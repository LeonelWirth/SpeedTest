
Testeo_velocidad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4e8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800c5f8  0800c5f8  0001c5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb9c  0800cb9c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800cb9c  0800cb9c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cb9c  0800cb9c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb9c  0800cb9c  0001cb9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cba0  0800cba0  0001cba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf0  200001e0  0800cd84  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ed0  0800cd84  00021ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e00b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cfb  00000000  00000000  0003e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  00041f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  00043490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b440  00000000  00000000  000448b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017617  00000000  00000000  0005fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000974fe  00000000  00000000  0007730f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e80d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a64  00000000  00000000  0010e860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c5e0 	.word	0x0800c5e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800c5e0 	.word	0x0800c5e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	78fa      	ldrb	r2, [r7, #3]
 8000ffc:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001004:	3301      	adds	r3, #1
 8001006:	425a      	negs	r2, r3
 8001008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800100c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001010:	bf58      	it	pl
 8001012:	4253      	negpl	r3, r2
 8001014:	b2da      	uxtb	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001022:	2b80      	cmp	r3, #128	; 0x80
 8001024:	d113      	bne.n	800104e <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001034:	3301      	adds	r3, #1
 8001036:	425a      	negs	r2, r3
 8001038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800103c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001040:	bf58      	it	pl
 8001042:	4253      	negpl	r3, r2
 8001044:	b2da      	uxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800104c:	e00b      	b.n	8001066 <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800105c:	3301      	adds	r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001080:	461a      	mov	r2, r3
 8001082:	6839      	ldr	r1, [r7, #0]
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f805 	bl	8001094 <RingGetNBytes>
 800108a:	4603      	mov	r3, r0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	4613      	mov	r3, r2
 80010a0:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <RingGetNBytes+0x1e>
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <RingGetNBytes+0x22>
 80010b2:	2300      	movs	r3, #0
 80010b4:	e03e      	b.n	8001134 <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b80      	cmp	r3, #128	; 0x80
 80010ba:	d901      	bls.n	80010c0 <RingGetNBytes+0x2c>
 80010bc:	2300      	movs	r3, #0
 80010be:	e039      	b.n	8001134 <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	75fb      	strb	r3, [r7, #23]
 80010c4:	e01b      	b.n	80010fe <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80010cc:	4619      	mov	r1, r3
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	4413      	add	r3, r2
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	5c52      	ldrb	r2, [r2, r1]
 80010d8:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80010e0:	3301      	adds	r3, #1
 80010e2:	425a      	negs	r2, r3
 80010e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010ec:	bf58      	it	pl
 80010ee:	4253      	negpl	r3, r2
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	3301      	adds	r3, #1
 80010fc:	75fb      	strb	r3, [r7, #23]
 80010fe:	7dfa      	ldrb	r2, [r7, #23]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	429a      	cmp	r2, r3
 8001104:	d205      	bcs.n	8001112 <RingGetNBytes+0x7e>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800110c:	7dfa      	ldrb	r2, [r7, #23]
 800110e:	429a      	cmp	r2, r3
 8001110:	d3d9      	bcc.n	80010c6 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	b2da      	uxtb	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 f805 	bl	800113c <RingClear>

	return uCounter;
 8001132:	7dfb      	ldrb	r3, [r7, #23]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
	...

08001170 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af02      	add	r7, sp, #8
 8001176:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8001178:	4b42      	ldr	r3, [pc, #264]	; (8001284 <ModbusInit+0x114>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d87d      	bhi.n	800127c <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	33bc      	adds	r3, #188	; 0xbc
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ffd9 	bl	800113c <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b03      	cmp	r3, #3
 8001190:	d109      	bne.n	80011a6 <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8001192:	4a3d      	ldr	r2, [pc, #244]	; (8001288 <ModbusInit+0x118>)
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	483d      	ldr	r0, [pc, #244]	; (800128c <ModbusInit+0x11c>)
 8001198:	f004 ffd8 	bl	800614c <osThreadNew>
 800119c:	4602      	mov	r2, r0
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80011a4:	e033      	b.n	800120e <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d12e      	bne.n	800120c <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 80011ae:	4a38      	ldr	r2, [pc, #224]	; (8001290 <ModbusInit+0x120>)
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4838      	ldr	r0, [pc, #224]	; (8001294 <ModbusInit+0x124>)
 80011b4:	f004 ffca 	bl	800614c <osThreadNew>
 80011b8:	4602      	mov	r2, r0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80011c6:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80011ce:	4a32      	ldr	r2, [pc, #200]	; (8001298 <ModbusInit+0x128>)
 80011d0:	9200      	str	r2, [sp, #0]
 80011d2:	2200      	movs	r2, #0
 80011d4:	4831      	ldr	r0, [pc, #196]	; (800129c <ModbusInit+0x12c>)
 80011d6:	f007 fdad 	bl	8008d34 <xTimerCreate>
 80011da:	4602      	mov	r2, r0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d100      	bne.n	80011ee <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 80011ec:	e7fe      	b.n	80011ec <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 80011ee:	4a2c      	ldr	r2, [pc, #176]	; (80012a0 <ModbusInit+0x130>)
 80011f0:	2110      	movs	r1, #16
 80011f2:	2002      	movs	r0, #2
 80011f4:	f005 f9dc 	bl	80065b0 <osMessageQueueNew>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800120a:	e7fe      	b.n	800120a <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800120c:	e7fe      	b.n	800120c <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001214:	2b00      	cmp	r3, #0
 8001216:	d100      	bne.n	800121a <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8001218:	e7fe      	b.n	8001218 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8001220:	4a20      	ldr	r2, [pc, #128]	; (80012a4 <ModbusInit+0x134>)
 8001222:	9200      	str	r2, [sp, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	2105      	movs	r1, #5
 8001228:	481f      	ldr	r0, [pc, #124]	; (80012a8 <ModbusInit+0x138>)
 800122a:	f007 fd83 	bl	8008d34 <xTimerCreate>
 800122e:	4602      	mov	r2, r0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d100      	bne.n	8001242 <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8001240:	e7fe      	b.n	8001240 <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8001242:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <ModbusInit+0x13c>)
 8001244:	2101      	movs	r1, #1
 8001246:	2001      	movs	r0, #1
 8001248:	f005 f858 	bl	80062fc <osSemaphoreNew>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800125e:	e7fe      	b.n	800125e <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <ModbusInit+0x114>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <ModbusInit+0x140>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <ModbusInit+0x114>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b03      	ldr	r3, [pc, #12]	; (8001284 <ModbusInit+0x114>)
 8001278:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800127a:	e000      	b.n	800127e <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800127c:	e7fe      	b.n	800127c <ModbusInit+0x10c>
}
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200001fc 	.word	0x200001fc
 8001288:	0800c6c8 	.word	0x0800c6c8
 800128c:	0800149d 	.word	0x0800149d
 8001290:	0800c6ec 	.word	0x0800c6ec
 8001294:	08001911 	.word	0x08001911
 8001298:	08001441 	.word	0x08001441
 800129c:	0800c63c 	.word	0x0800c63c
 80012a0:	0800c6b0 	.word	0x0800c6b0
 80012a4:	080013bd 	.word	0x080013bd
 80012a8:	0800c64c 	.word	0x0800c64c
 80012ac:	0800c710 	.word	0x0800c710
 80012b0:	20001bfc 	.word	0x20001bfc

080012b4 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d00f      	beq.n	80012e6 <ModbusStart+0x32>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d00a      	beq.n	80012e6 <ModbusStart+0x32>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d005      	beq.n	80012e6 <ModbusStart+0x32>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d000      	beq.n	80012e6 <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 80012e4:	e7fe      	b.n	80012e4 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d100      	bne.n	80012f2 <ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 80012f0:	e7fe      	b.n	80012f0 <ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d004      	beq.n	8001306 <ModbusStart+0x52>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001302:	2b04      	cmp	r3, #4
 8001304:	d13c      	bne.n	8001380 <ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68d8      	ldr	r0, [r3, #12]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	8a1b      	ldrh	r3, [r3, #16]
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	f002 fce3 	bl	8003ce4 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d105      	bne.n	8001332 <ModbusStart+0x7e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800132c:	2b00      	cmp	r3, #0
 800132e:	d100      	bne.n	8001332 <ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8001330:	e7fe      	b.n	8001330 <ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8001332:	bf00      	nop
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4618      	mov	r0, r3
 800133a:	f004 fc54 	bl	8005be6 <HAL_UART_GetState>
 800133e:	4603      	mov	r3, r0
 8001340:	2b20      	cmp	r3, #32
 8001342:	d1f7      	bne.n	8001334 <ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6858      	ldr	r0, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	33a6      	adds	r3, #166	; 0xa6
 800134c:	2201      	movs	r2, #1
 800134e:	4619      	mov	r1, r3
 8001350:	f004 f982 	bl	8005658 <HAL_UART_Receive_IT>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d000      	beq.n	800135c <ModbusStart+0xa8>
          {
                while(1)
 800135a:	e7fe      	b.n	800135a <ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7a1b      	ldrb	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <ModbusStart+0xba>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d100      	bne.n	800136e <ModbusStart+0xba>
          {
        	  while(1)
 800136c:	e7fe      	b.n	800136c <ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7a1b      	ldrb	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d104      	bne.n	8001380 <ModbusStart+0xcc>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d100      	bne.n	8001380 <ModbusStart+0xcc>
          {
             	  while(1)
 800137e:	e7fe      	b.n	800137e <ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e02a      	b.n	8001420 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80013ca:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <vTimerCallbackT35+0x7c>)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d11e      	bne.n	800141a <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 80013dc:	4a16      	ldr	r2, [pc, #88]	; (8001438 <vTimerCallbackT35+0x7c>)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d10c      	bne.n	8001404 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <vTimerCallbackT35+0x7c>)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80013f6:	2300      	movs	r3, #0
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2300      	movs	r3, #0
 80013fc:	2200      	movs	r2, #0
 80013fe:	2103      	movs	r1, #3
 8001400:	f007 fcec 	bl	8008ddc <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8001404:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <vTimerCallbackT35+0x7c>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001410:	2300      	movs	r3, #0
 8001412:	2203      	movs	r2, #3
 8001414:	2100      	movs	r1, #0
 8001416:	f007 fa75 	bl	8008904 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <vTimerCallbackT35+0x80>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4293      	cmp	r3, r2
 800142a:	dbce      	blt.n	80013ca <vTimerCallbackT35+0xe>
		}

	}
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20001bfc 	.word	0x20001bfc
 800143c:	200001fc 	.word	0x200001fc

08001440 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e017      	b.n	800147e <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <vTimerCallbackTimeout+0x54>)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001456:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	d10b      	bne.n	8001478 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8001460:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <vTimerCallbackTimeout+0x54>)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800146c:	2300      	movs	r3, #0
 800146e:	2203      	movs	r2, #3
 8001470:	f06f 0107 	mvn.w	r1, #7
 8001474:	f007 fa46 	bl	8008904 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <vTimerCallbackTimeout+0x58>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4293      	cmp	r3, r2
 8001488:	dbe1      	blt.n	800144e <vTimerCallbackTimeout+0xe>
		}

	}

}
 800148a:	bf00      	nop
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20001bfc 	.word	0x20001bfc
 8001498:	200001fc 	.word	0x200001fc

0800149c <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d004      	beq.n	80014c2 <StartTaskModbusSlave+0x26>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d117      	bne.n	80014f2 <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 80014c2:	f04f 31ff 	mov.w	r1, #4294967295
 80014c6:	2001      	movs	r0, #1
 80014c8:	f007 f9d0 	bl	800886c <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 fbe9 	bl	8001ca4 <getRxBuffer>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f113 0f03 	cmn.w	r3, #3
 80014d8:	d10b      	bne.n	80014f2 <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	22fd      	movs	r2, #253	; 0xfd
 80014de:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80014e6:	3301      	adds	r3, #1
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 80014f0:	e0a1      	b.n	8001636 <StartTaskModbusSlave+0x19a>
	  }
	   //modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
   }

   if (modH->u8BufferSize < 7)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80014f8:	2b06      	cmp	r3, #6
 80014fa:	d80b      	bhi.n	8001514 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	22fa      	movs	r2, #250	; 0xfa
 8001500:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001508:	3301      	adds	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	  {
		  netconn_close(modH->newconn);
		  netconn_delete(modH->newconn);
	  }
  #endif
	  continue;
 8001512:	e090      	b.n	8001636 <StartTaskModbusSlave+0x19a>
    }

		// check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)   //for Modbus TCP this is not validated, user should modify accordingly if needed
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	7cda      	ldrb	r2, [r3, #19]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	7a1b      	ldrb	r3, [r3, #8]
 800151c:	429a      	cmp	r2, r3
 800151e:	f040 8089 	bne.w	8001634 <StartTaskModbusSlave+0x198>
        #endif
		continue;
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 fc08 	bl	8001d38 <validateRequest>
 8001528:	4603      	mov	r3, r0
 800152a:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00c      	beq.n	800154c <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8001532:	7afb      	ldrb	r3, [r7, #11]
 8001534:	68f9      	ldr	r1, [r7, #12]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fda0 	bl	800207c <buildException>
			sendTxBuffer(modH);
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 fdbb 	bl	80020b8 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8001542:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	749a      	strb	r2, [r3, #18]
		{
		    netconn_close(modH->newconn);
		  	netconn_delete(modH->newconn);
		}
        #endif
		continue;
 800154a:	e074      	b.n	8001636 <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	749a      	strb	r2, [r3, #18]
	 xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	4618      	mov	r0, r3
 800155e:	f005 fe3d 	bl	80071dc <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	7d1b      	ldrb	r3, [r3, #20]
 8001566:	3b01      	subs	r3, #1
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d859      	bhi.n	8001620 <StartTaskModbusSlave+0x184>
 800156c:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <StartTaskModbusSlave+0xd8>)
 800156e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001572:	bf00      	nop
 8001574:	080015b5 	.word	0x080015b5
 8001578:	080015b5 	.word	0x080015b5
 800157c:	080015c7 	.word	0x080015c7
 8001580:	080015c7 	.word	0x080015c7
 8001584:	080015d9 	.word	0x080015d9
 8001588:	080015eb 	.word	0x080015eb
 800158c:	08001621 	.word	0x08001621
 8001590:	08001621 	.word	0x08001621
 8001594:	08001621 	.word	0x08001621
 8001598:	08001621 	.word	0x08001621
 800159c:	08001621 	.word	0x08001621
 80015a0:	08001621 	.word	0x08001621
 80015a4:	08001621 	.word	0x08001621
 80015a8:	08001621 	.word	0x08001621
 80015ac:	080015fd 	.word	0x080015fd
 80015b0:	0800160f 	.word	0x0800160f
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 fe0f 	bl	80021d8 <process_FC1>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80015c4:	e02d      	b.n	8001622 <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 febb 	bl	8002342 <process_FC3>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80015d6:	e024      	b.n	8001622 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 ff1d 	bl	8002418 <process_FC5>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80015e8:	e01b      	b.n	8001622 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 ff6d 	bl	80024ca <process_FC6>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80015fa:	e012      	b.n	8001622 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 ff96 	bl	800252e <process_FC15>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800160c:	e009      	b.n	8001622 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f001 f81b 	bl	800264a <process_FC16>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800161e:	e000      	b.n	8001622 <StartTaskModbusSlave+0x186>
			default:
				break;
 8001620:	bf00      	nop
	    netconn_close(modH->newconn);
	  	netconn_delete(modH->newconn);
	 }
   #endif

	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8001628:	2300      	movs	r3, #0
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	f005 fad1 	bl	8006bd4 <xQueueGenericSend>

	 continue;
 8001632:	e000      	b.n	8001636 <StartTaskModbusSlave+0x19a>
		continue;
 8001634:	bf00      	nop
  {
 8001636:	e737      	b.n	80014a8 <StartTaskModbusSlave+0xc>

08001638 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8001638:	b084      	sub	sp, #16
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	f107 001c 	add.w	r0, r7, #28
 8001646:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	4618      	mov	r0, r3
 800165a:	f005 fdbf 	bl	80071dc <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7a1b      	ldrb	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SendQuery+0x32>
 8001666:	23ff      	movs	r3, #255	; 0xff
 8001668:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SendQuery+0x40>
 8001674:	23fe      	movs	r3, #254	; 0xfe
 8001676:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8001678:	7f3b      	ldrb	r3, [r7, #28]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <SendQuery+0x4c>
 800167e:	7f3b      	ldrb	r3, [r7, #28]
 8001680:	2bf7      	cmp	r3, #247	; 0xf7
 8001682:	d901      	bls.n	8001688 <SendQuery+0x50>
 8001684:	23f7      	movs	r3, #247	; 0xf7
 8001686:	73bb      	strb	r3, [r7, #14]

	if(error)
 8001688:	7bbb      	ldrb	r3, [r7, #14]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00e      	beq.n	80016ac <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800168e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800169c:	2300      	movs	r3, #0
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	f005 fa97 	bl	8006bd4 <xQueueGenericSend>
		 return error;
 80016a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016aa:	e129      	b.n	8001900 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 80016ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 80016b4:	7f3a      	ldrb	r2, [r7, #28]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 80016ba:	7f7a      	ldrb	r2, [r7, #29]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 80016c0:	8bfb      	ldrh	r3, [r7, #30]
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 80016cc:	8bfb      	ldrh	r3, [r7, #30]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 80016d4:	7f7b      	ldrb	r3, [r7, #29]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	f200 80fe 	bhi.w	80018da <SendQuery+0x2a2>
 80016de:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <SendQuery+0xac>)
 80016e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e4:	08001725 	.word	0x08001725
 80016e8:	08001725 	.word	0x08001725
 80016ec:	08001725 	.word	0x08001725
 80016f0:	08001725 	.word	0x08001725
 80016f4:	08001743 	.word	0x08001743
 80016f8:	08001765 	.word	0x08001765
 80016fc:	080018db 	.word	0x080018db
 8001700:	080018db 	.word	0x080018db
 8001704:	080018db 	.word	0x080018db
 8001708:	080018db 	.word	0x080018db
 800170c:	080018db 	.word	0x080018db
 8001710:	080018db 	.word	0x080018db
 8001714:	080018db 	.word	0x080018db
 8001718:	080018db 	.word	0x080018db
 800171c:	08001787 	.word	0x08001787
 8001720:	08001845 	.word	0x08001845
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8001724:	8c3b      	ldrh	r3, [r7, #32]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	b29b      	uxth	r3, r3
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8001730:	8c3b      	ldrh	r3, [r7, #32]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2206      	movs	r2, #6
 800173c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8001740:	e0cb      	b.n	80018da <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SendQuery+0x116>
 800174a:	22ff      	movs	r2, #255	; 0xff
 800174c:	e000      	b.n	8001750 <SendQuery+0x118>
 800174e:	2200      	movs	r2, #0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2206      	movs	r2, #6
 800175e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8001762:	e0ba      	b.n	80018da <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	b29b      	uxth	r3, r3
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2206      	movs	r2, #6
 8001780:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8001784:	e0a9      	b.n	80018da <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8001786:	8c3b      	ldrh	r3, [r7, #32]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	b29b      	uxth	r3, r3
 800178c:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800178e:	7a7b      	ldrb	r3, [r7, #9]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8001794:	8c3b      	ldrh	r3, [r7, #32]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	b29b      	uxth	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <SendQuery+0x174>
	    {
	        u8bytesno++;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	3301      	adds	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 80017a6:	7a7b      	ldrb	r3, [r7, #9]
 80017a8:	3301      	adds	r3, #1
 80017aa:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80017ac:	8c3b      	ldrh	r3, [r7, #32]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80017b8:	8c3b      	ldrh	r3, [r7, #32]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2207      	movs	r2, #7
 80017ca:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	81bb      	strh	r3, [r7, #12]
 80017d2:	e031      	b.n	8001838 <SendQuery+0x200>
	    {
	        if(i%2)
 80017d4:	89bb      	ldrh	r3, [r7, #12]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	b29b      	uxth	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00f      	beq.n	8001800 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 80017e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e2:	89bb      	ldrh	r3, [r7, #12]
 80017e4:	085b      	lsrs	r3, r3, #1
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	881a      	ldrh	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80017f4:	4619      	mov	r1, r3
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	440b      	add	r3, r1
 80017fc:	74da      	strb	r2, [r3, #19]
 80017fe:	e010      	b.n	8001822 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8001800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001802:	89bb      	ldrh	r3, [r7, #12]
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	b29b      	uxth	r3, r3
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001818:	4619      	mov	r1, r3
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	440b      	add	r3, r1
 8001820:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001828:	3301      	adds	r3, #1
 800182a:	b2da      	uxtb	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8001832:	89bb      	ldrh	r3, [r7, #12]
 8001834:	3301      	adds	r3, #1
 8001836:	81bb      	strh	r3, [r7, #12]
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	b29b      	uxth	r3, r3
 800183c:	89ba      	ldrh	r2, [r7, #12]
 800183e:	429a      	cmp	r2, r3
 8001840:	d3c8      	bcc.n	80017d4 <SendQuery+0x19c>
	    }
	    break;
 8001842:	e04a      	b.n	80018da <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8001844:	8c3b      	ldrh	r3, [r7, #32]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b29b      	uxth	r3, r3
 800184a:	b2da      	uxtb	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8001850:	8c3b      	ldrh	r3, [r7, #32]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8001858:	8c3b      	ldrh	r3, [r7, #32]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	b2da      	uxtb	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2207      	movs	r2, #7
 8001868:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800186c:	2300      	movs	r3, #0
 800186e:	817b      	strh	r3, [r7, #10]
 8001870:	e02e      	b.n	80018d0 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8001872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001874:	897b      	ldrh	r3, [r7, #10]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	b29a      	uxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001886:	4619      	mov	r1, r3
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	440b      	add	r3, r1
 800188e:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001896:	3301      	adds	r3, #1
 8001898:	b2da      	uxtb	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 80018a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	881a      	ldrh	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80018b0:	4619      	mov	r1, r3
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	440b      	add	r3, r1
 80018b8:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80018c0:	3301      	adds	r3, #1
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80018ca:	897b      	ldrh	r3, [r7, #10]
 80018cc:	3301      	adds	r3, #1
 80018ce:	817b      	strh	r3, [r7, #10]
 80018d0:	8c3b      	ldrh	r3, [r7, #32]
 80018d2:	897a      	ldrh	r2, [r7, #10]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d3cc      	bcc.n	8001872 <SendQuery+0x23a>
	    }
	    break;
 80018d8:	bf00      	nop
	}

	sendTxBuffer(modH);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fbec 	bl	80020b8 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80018e6:	2300      	movs	r3, #0
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	f005 f972 	bl	8006bd4 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	749a      	strb	r2, [r3, #18]
	return 0;
 80018fe:	2300      	movs	r3, #0


}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800190a:	b004      	add	sp, #16
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop

08001910 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af02      	add	r7, sp, #8
 8001916:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001922:	f107 010c 	add.w	r1, r7, #12
 8001926:	f04f 32ff 	mov.w	r2, #4294967295
 800192a:	4618      	mov	r0, r3
 800192c:	f005 fb76 	bl	800701c <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800193c:	f7ff fe7c 	bl	8001638 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	2001      	movs	r0, #1
 8001946:	f006 ff91 	bl	800886c <ulTaskNotifyTake>
 800194a:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	2200      	movs	r2, #0
 8001950:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d018      	beq.n	800198a <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	2200      	movs	r2, #0
 800195c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	22f8      	movs	r2, #248	; 0xf8
 8001964:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800196c:	3301      	adds	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001976:	69b8      	ldr	r0, [r7, #24]
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800197e:	4619      	mov	r1, r3
 8001980:	2300      	movs	r3, #0
 8001982:	2203      	movs	r2, #3
 8001984:	f006 ffbe 	bl	8008904 <xTaskGenericNotify>
    	  continue;
 8001988:	e097      	b.n	8001aba <StartTaskModbusMaster+0x1aa>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 800198a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800198c:	f000 f98a 	bl	8001ca4 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001996:	2b05      	cmp	r3, #5
 8001998:	d818      	bhi.n	80019cc <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	2200      	movs	r2, #0
 800199e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	22fa      	movs	r2, #250	; 0xfa
 80019a6:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80019ae:	3301      	adds	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80019b8:	69b8      	ldr	r0, [r7, #24]
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80019c0:	4619      	mov	r1, r3
 80019c2:	2300      	movs	r3, #0
 80019c4:	2203      	movs	r2, #3
 80019c6:	f006 ff9d 	bl	8008904 <xTaskGenericNotify>
		  continue;
 80019ca:	e076      	b.n	8001aba <StartTaskModbusMaster+0x1aa>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80019d2:	2300      	movs	r3, #0
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2300      	movs	r3, #0
 80019d8:	2200      	movs	r2, #0
 80019da:	2103      	movs	r1, #3
 80019dc:	f007 f9fe 	bl	8008ddc <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 80019e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019e2:	f000 f8f1 	bl	8001bc8 <validateAnswer>
 80019e6:	4603      	mov	r3, r0
 80019e8:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 80019ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d010      	beq.n	8001a14 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	7ffa      	ldrb	r2, [r7, #31]
 80019fe:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001a00:	69b8      	ldr	r0, [r7, #24]
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	f006 ff79 	bl	8008904 <xTaskGenericNotify>
	     continue;
 8001a12:	e052      	b.n	8001aba <StartTaskModbusMaster+0x1aa>
	  }

	  modH->i8lastError = u8exception;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	7ffa      	ldrb	r2, [r7, #31]
 8001a18:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	4618      	mov	r0, r3
 8001a26:	f005 fbd9 	bl	80071dc <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	7d1b      	ldrb	r3, [r3, #20]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d82b      	bhi.n	8001a8c <StartTaskModbusMaster+0x17c>
 8001a34:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <StartTaskModbusMaster+0x12c>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a7d 	.word	0x08001a7d
 8001a40:	08001a7d 	.word	0x08001a7d
 8001a44:	08001a85 	.word	0x08001a85
 8001a48:	08001a85 	.word	0x08001a85
 8001a4c:	08001a8d 	.word	0x08001a8d
 8001a50:	08001a8d 	.word	0x08001a8d
 8001a54:	08001a8d 	.word	0x08001a8d
 8001a58:	08001a8d 	.word	0x08001a8d
 8001a5c:	08001a8d 	.word	0x08001a8d
 8001a60:	08001a8d 	.word	0x08001a8d
 8001a64:	08001a8d 	.word	0x08001a8d
 8001a68:	08001a8d 	.word	0x08001a8d
 8001a6c:	08001a8d 	.word	0x08001a8d
 8001a70:	08001a8d 	.word	0x08001a8d
 8001a74:	08001a8d 	.word	0x08001a8d
 8001a78:	08001a8d 	.word	0x08001a8d
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8001a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a7e:	f000 f81d 	bl	8001abc <get_FC1>
	      break;
 8001a82:	e004      	b.n	8001a8e <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 8001a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a86:	f000 f870 	bl	8001b6a <get_FC3>
	      break;
 8001a8a:	e000      	b.n	8001a8e <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8001a8c:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	f005 f897 	bl	8006bd4 <xQueueGenericSend>
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001aa6:	69b8      	ldr	r0, [r7, #24]
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	f006 ff26 	bl	8008904 <xTaskGenericNotify>
	  continue;
 8001ab8:	bf00      	nop
  {
 8001aba:	e72f      	b.n	800191c <StartTaskModbusMaster+0xc>

08001abc <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	e043      	b.n	8001b56 <get_FC1+0x9a>

        if(i%2)
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d01c      	beq.n	8001b14 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	4413      	add	r3, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	7cd8      	ldrb	r0, [r3, #19]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	085b      	lsrs	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b2d9      	uxtb	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	085b      	lsrs	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	18d4      	adds	r4, r2, r3
 8001b0a:	f000 fa5f 	bl	8001fcc <word>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	8023      	strh	r3, [r4, #0]
 8001b12:	e01d      	b.n	8001b50 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b2d8      	uxtb	r0, r3
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	7bbb      	ldrb	r3, [r7, #14]
 8001b30:	4413      	add	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	7cd9      	ldrb	r1, [r3, #19]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	18d4      	adds	r4, r2, r3
 8001b48:	f000 fa40 	bl	8001fcc <word>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	3301      	adds	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7d5b      	ldrb	r3, [r3, #21]
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d3b6      	bcc.n	8001ace <get_FC1+0x12>
        }

     }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}

08001b6a <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8001b6a:	b590      	push	{r4, r7, lr}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8001b72:	2303      	movs	r3, #3
 8001b74:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	73bb      	strb	r3, [r7, #14]
 8001b7a:	e018      	b.n	8001bae <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	7cd8      	ldrb	r0, [r3, #19]
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	3301      	adds	r3, #1
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	7cd9      	ldrb	r1, [r3, #19]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	18d4      	adds	r4, r2, r3
 8001b9a:	f000 fa17 	bl	8001fcc <word>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	3301      	adds	r3, #1
 8001bac:	73bb      	strb	r3, [r7, #14]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7d5b      	ldrb	r3, [r3, #21]
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	7bba      	ldrb	r2, [r7, #14]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d3df      	bcc.n	8001b7c <get_FC3+0x12>
    }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd90      	pop	{r4, r7, pc}
	...

08001bc8 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001bd6:	3b02      	subs	r3, #2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	7cdb      	ldrb	r3, [r3, #19]
 8001bde:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001be8:	3b01      	subs	r3, #1
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	440b      	add	r3, r1
 8001bee:	7cdb      	ldrb	r3, [r3, #19]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8001bf6:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f103 0213 	add.w	r2, r3, #19
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001c04:	3b02      	subs	r3, #2
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f000 f9f0 	bl	8001ff0 <calcCRC>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	89bb      	ldrh	r3, [r7, #12]
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d009      	beq.n	8001c2e <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001c20:	3301      	adds	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 8001c2a:	23fc      	movs	r3, #252	; 0xfc
 8001c2c:	e034      	b.n	8001c98 <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7d1b      	ldrb	r3, [r3, #20]
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da09      	bge.n	8001c4c <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001c3e:	3301      	adds	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 8001c48:	23fb      	movs	r3, #251	; 0xfb
 8001c4a:	e025      	b.n	8001c98 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	73bb      	strb	r3, [r7, #14]
 8001c54:	e00c      	b.n	8001c70 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8001c56:	7bbb      	ldrb	r3, [r7, #14]
 8001c58:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <validateAnswer+0xd8>)
 8001c5a:	5cd2      	ldrb	r2, [r2, r3]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7d1b      	ldrb	r3, [r3, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d102      	bne.n	8001c6a <validateAnswer+0xa2>
        {
            isSupported = 1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
            break;
 8001c68:	e005      	b.n	8001c76 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001c6a:	7bbb      	ldrb	r3, [r7, #14]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	73bb      	strb	r3, [r7, #14]
 8001c70:	7bbb      	ldrb	r3, [r7, #14]
 8001c72:	2b07      	cmp	r3, #7
 8001c74:	d9ef      	bls.n	8001c56 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	f083 0301 	eor.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d009      	beq.n	8001c96 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	0800c720 	.word	0x0800c720

08001ca4 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d104      	bne.n	8001cc0 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fcfc 	bl	80056b8 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	33bc      	adds	r3, #188	; 0xbc
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fa34 	bl	800113c <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8001cd4:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8001cd8:	81fb      	strh	r3, [r7, #14]
 8001cda:	e019      	b.n	8001d10 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3313      	adds	r3, #19
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f7ff f9c1 	bl	8001070 <RingGetAllBytes>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001d0e:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d107      	bne.n	8001d2a <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6858      	ldr	r0, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	33a6      	adds	r3, #166	; 0xa6
 8001d22:	2201      	movs	r2, #1
 8001d24:	4619      	mov	r1, r3
 8001d26:	f003 fc97 	bl	8005658 <HAL_UART_Receive_IT>
	}

    return i16result;
 8001d2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001d46:	3b02      	subs	r3, #2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	7cdb      	ldrb	r3, [r3, #19]
 8001d4e:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	440b      	add	r3, r1
 8001d5e:	7cdb      	ldrb	r3, [r3, #19]
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001d66:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f103 0213 	add.w	r2, r3, #19
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001d74:	3b02      	subs	r3, #2
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f000 f938 	bl	8001ff0 <calcCRC>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	893b      	ldrh	r3, [r7, #8]
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d009      	beq.n	8001d9e <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001d90:	3301      	adds	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 8001d9a:	23fc      	movs	r3, #252	; 0xfc
 8001d9c:	e10f      	b.n	8001fbe <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	73bb      	strb	r3, [r7, #14]
 8001da6:	e00c      	b.n	8001dc2 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8001da8:	7bbb      	ldrb	r3, [r7, #14]
 8001daa:	4a87      	ldr	r2, [pc, #540]	; (8001fc8 <validateRequest+0x290>)
 8001dac:	5cd2      	ldrb	r2, [r2, r3]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7d1b      	ldrb	r3, [r3, #20]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d102      	bne.n	8001dbc <validateRequest+0x84>
	        {
	            isSupported = 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
	            break;
 8001dba:	e005      	b.n	8001dc8 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001dbc:	7bbb      	ldrb	r3, [r7, #14]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	73bb      	strb	r3, [r7, #14]
 8001dc2:	7bbb      	ldrb	r3, [r7, #14]
 8001dc4:	2b07      	cmp	r3, #7
 8001dc6:	d9ef      	bls.n	8001da8 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	f083 0301 	eor.w	r3, r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0ea      	b.n	8001fbe <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7d1b      	ldrb	r3, [r3, #20]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	f200 80e0 	bhi.w	8001fbc <validateRequest+0x284>
 8001dfc:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <validateRequest+0xcc>)
 8001dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e45 	.word	0x08001e45
 8001e08:	08001e45 	.word	0x08001e45
 8001e0c:	08001f5d 	.word	0x08001f5d
 8001e10:	08001f5d 	.word	0x08001f5d
 8001e14:	08001ef1 	.word	0x08001ef1
 8001e18:	08001f39 	.word	0x08001f39
 8001e1c:	08001fbd 	.word	0x08001fbd
 8001e20:	08001fbd 	.word	0x08001fbd
 8001e24:	08001fbd 	.word	0x08001fbd
 8001e28:	08001fbd 	.word	0x08001fbd
 8001e2c:	08001fbd 	.word	0x08001fbd
 8001e30:	08001fbd 	.word	0x08001fbd
 8001e34:	08001fbd 	.word	0x08001fbd
 8001e38:	08001fbd 	.word	0x08001fbd
 8001e3c:	08001e45 	.word	0x08001e45
 8001e40:	08001f5d 	.word	0x08001f5d
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7d5a      	ldrb	r2, [r3, #21]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7d9b      	ldrb	r3, [r3, #22]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f000 f8bc 	bl	8001fcc <word>
 8001e54:	4603      	mov	r3, r0
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7dda      	ldrb	r2, [r3, #23]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7e1b      	ldrb	r3, [r3, #24]
 8001e62:	4619      	mov	r1, r3
 8001e64:	4610      	mov	r0, r2
 8001e66:	f000 f8b1 	bl	8001fcc <word>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7dda      	ldrb	r2, [r3, #23]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7e1b      	ldrb	r3, [r3, #24]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f000 f8a6 	bl	8001fcc <word>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <validateRequest+0x15a>
 8001e8c:	897b      	ldrh	r3, [r7, #10]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8001e92:	89ba      	ldrh	r2, [r7, #12]
 8001e94:	897b      	ldrh	r3, [r7, #10]
 8001e96:	4413      	add	r3, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	dd01      	ble.n	8001ea6 <validateRequest+0x16e>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e08b      	b.n	8001fbe <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7dda      	ldrb	r2, [r3, #23]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7e1b      	ldrb	r3, [r3, #24]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f000 f88b 	bl	8001fcc <word>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7dda      	ldrb	r2, [r3, #23]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7e1b      	ldrb	r3, [r3, #24]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f000 f880 	bl	8001fcc <word>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <validateRequest+0x1a6>
 8001ed8:	897b      	ldrh	r3, [r7, #10]
 8001eda:	3301      	adds	r3, #1
 8001edc:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8001ede:	897b      	ldrh	r3, [r7, #10]
 8001ee0:	3305      	adds	r3, #5
 8001ee2:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8001ee4:	897b      	ldrh	r3, [r7, #10]
 8001ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eea:	d960      	bls.n	8001fae <validateRequest+0x276>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e066      	b.n	8001fbe <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7d5a      	ldrb	r2, [r3, #21]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7d9b      	ldrb	r3, [r3, #22]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f000 f866 	bl	8001fcc <word>
 8001f00:	4603      	mov	r3, r0
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7d5a      	ldrb	r2, [r3, #21]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7d9b      	ldrb	r3, [r3, #22]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4610      	mov	r0, r2
 8001f12:	f000 f85b 	bl	8001fcc <word>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <validateRequest+0x1f0>
 8001f22:	89bb      	ldrh	r3, [r7, #12]
 8001f24:	3301      	adds	r3, #1
 8001f26:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001f2e:	89ba      	ldrh	r2, [r7, #12]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d93e      	bls.n	8001fb2 <validateRequest+0x27a>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e042      	b.n	8001fbe <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7d5a      	ldrb	r2, [r3, #21]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7d9b      	ldrb	r3, [r3, #22]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f000 f842 	bl	8001fcc <word>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001f52:	89ba      	ldrh	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d92e      	bls.n	8001fb6 <validateRequest+0x27e>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e030      	b.n	8001fbe <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7d5a      	ldrb	r2, [r3, #21]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	7d9b      	ldrb	r3, [r3, #22]
 8001f64:	4619      	mov	r1, r3
 8001f66:	4610      	mov	r0, r2
 8001f68:	f000 f830 	bl	8001fcc <word>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7dda      	ldrb	r2, [r3, #23]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7e1b      	ldrb	r3, [r3, #24]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f000 f826 	bl	8001fcc <word>
 8001f80:	4603      	mov	r3, r0
 8001f82:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8001f84:	89ba      	ldrh	r2, [r7, #12]
 8001f86:	897b      	ldrh	r3, [r7, #10]
 8001f88:	4413      	add	r3, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8001f90:	4293      	cmp	r3, r2
 8001f92:	dd01      	ble.n	8001f98 <validateRequest+0x260>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e012      	b.n	8001fbe <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8001f98:	897b      	ldrh	r3, [r7, #10]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3305      	adds	r3, #5
 8001fa0:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8001fa2:	897b      	ldrh	r3, [r7, #10]
 8001fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa8:	d907      	bls.n	8001fba <validateRequest+0x282>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e007      	b.n	8001fbe <validateRequest+0x286>
	        break;
 8001fae:	bf00      	nop
 8001fb0:	e004      	b.n	8001fbc <validateRequest+0x284>
	        break;
 8001fb2:	bf00      	nop
 8001fb4:	e002      	b.n	8001fbc <validateRequest+0x284>
	        break;
 8001fb6:	bf00      	nop
 8001fb8:	e000      	b.n	8001fbc <validateRequest+0x284>
	        break;
 8001fba:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8001fbc:	2300      	movs	r3, #0

}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	0800c720 	.word	0x0800c720

08001fcc <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	71fb      	strb	r3, [r7, #7]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8001fdc:	79bb      	ldrb	r3, [r7, #6]
 8001fde:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8001fe4:	89bb      	ldrh	r3, [r7, #12]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8001ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002000:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8002002:	2300      	movs	r3, #0
 8002004:	74fb      	strb	r3, [r7, #19]
 8002006:	e023      	b.n	8002050 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	4053      	eors	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002018:	2301      	movs	r3, #1
 800201a:	74bb      	strb	r3, [r7, #18]
 800201c:	e012      	b.n	8002044 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	085b      	lsrs	r3, r3, #1
 800202a:	617b      	str	r3, [r7, #20]
            if (flag)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <calcCRC+0x4e>
                temp ^= 0xA001;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8002038:	f083 0301 	eor.w	r3, r3, #1
 800203c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800203e:	7cbb      	ldrb	r3, [r7, #18]
 8002040:	3301      	adds	r3, #1
 8002042:	74bb      	strb	r3, [r7, #18]
 8002044:	7cbb      	ldrb	r3, [r7, #18]
 8002046:	2b08      	cmp	r3, #8
 8002048:	d9e9      	bls.n	800201e <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	3301      	adds	r3, #1
 800204e:	74fb      	strb	r3, [r7, #19]
 8002050:	7cfa      	ldrb	r2, [r7, #19]
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	429a      	cmp	r2, r3
 8002056:	d3d7      	bcc.n	8002008 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	b29b      	uxth	r3, r3
 800206c:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	b29b      	uxth	r3, r3

}
 8002072:	4618      	mov	r0, r3
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	7d1b      	ldrb	r3, [r3, #20]
 800208c:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	7a1a      	ldrb	r2, [r3, #8]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	3b80      	subs	r3, #128	; 0x80
 800209a:	b2da      	uxtb	r2, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	79fa      	ldrb	r2, [r7, #7]
 80020a4:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2203      	movs	r2, #3
 80020aa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af02      	add	r7, sp, #8
 80020be:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f103 0213 	add.w	r2, r3, #19
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f7ff ff8e 	bl	8001ff0 <calcCRC>
 80020d4:	4603      	mov	r3, r0
 80020d6:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	b29a      	uxth	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80020e4:	4619      	mov	r1, r3
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	440b      	add	r3, r1
 80020ec:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80020f4:	3301      	adds	r3, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002104:	4619      	mov	r1, r3
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	440b      	add	r3, r1
 800210e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002116:	3301      	adds	r3, #1
 8002118:	b2da      	uxtb	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00c      	beq.n	8002142 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	f003 fcf4 	bl	8005b1a <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68d8      	ldr	r0, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8a1b      	ldrh	r3, [r3, #16]
 800213a:	2201      	movs	r2, #1
 800213c:	4619      	mov	r1, r3
 800213e:	f001 fdd1 	bl	8003ce4 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6858      	ldr	r0, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f103 0113 	add.w	r1, r3, #19
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	f003 fa3b 	bl	80055d0 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800215a:	21fa      	movs	r1, #250	; 0xfa
 800215c:	2001      	movs	r0, #1
 800215e:	f006 fb85 	bl	800886c <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8002162:	bf00      	nop
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f7      	beq.n	8002164 <sendTxBuffer+0xac>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00c      	beq.n	8002196 <sendTxBuffer+0xde>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68d8      	ldr	r0, [r3, #12]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8a1b      	ldrh	r3, [r3, #16]
 8002184:	2200      	movs	r2, #0
 8002186:	4619      	mov	r1, r3
 8002188:	f001 fdac 	bl	8003ce4 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	f003 fcf5 	bl	8005b80 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d10c      	bne.n	80021b8 <sendTxBuffer+0x100>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80021a4:	f005 fe76 	bl	8007e94 <xTaskGetTickCount>
 80021a8:	4602      	mov	r2, r0
 80021aa:	2300      	movs	r3, #0
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2300      	movs	r3, #0
 80021b0:	2102      	movs	r1, #2
 80021b2:	4620      	mov	r0, r4
 80021b4:	f006 fe12 	bl	8008ddc <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80021c6:	3301      	adds	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7d5a      	ldrb	r2, [r3, #21]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7d9b      	ldrb	r3, [r3, #22]
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f7ff feee 	bl	8001fcc <word>
 80021f0:	4603      	mov	r3, r0
 80021f2:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7dda      	ldrb	r2, [r3, #23]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7e1b      	ldrb	r3, [r3, #24]
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7ff fee4 	bl	8001fcc <word>
 8002204:	4603      	mov	r3, r0
 8002206:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8002208:	8a3b      	ldrh	r3, [r7, #16]
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	b29b      	uxth	r3, r3
 800220e:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8002210:	8a3b      	ldrh	r3, [r7, #16]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <process_FC1+0x4a>
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	3301      	adds	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7dfa      	ldrb	r2, [r7, #23]
 8002226:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2203      	movs	r2, #3
 800222c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002236:	461a      	mov	r2, r3
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	4413      	add	r3, r2
 800223c:	3b01      	subs	r3, #1
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	2200      	movs	r2, #0
 8002244:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800224a:	2300      	movs	r3, #0
 800224c:	82bb      	strh	r3, [r7, #20]
 800224e:	e058      	b.n	8002302 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8002250:	8a7a      	ldrh	r2, [r7, #18]
 8002252:	8abb      	ldrh	r3, [r7, #20]
 8002254:	4413      	add	r3, r2
 8002256:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8002258:	89bb      	ldrh	r3, [r7, #12]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800225e:	89bb      	ldrh	r3, [r7, #12]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800226e:	897b      	ldrh	r3, [r7, #10]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	7a7b      	ldrb	r3, [r7, #9]
 800227a:	fa42 f303 	asr.w	r3, r2, r3
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d014      	beq.n	80022b0 <process_FC1+0xd8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	7cda      	ldrb	r2, [r3, #19]
 8002294:	7dbb      	ldrb	r3, [r7, #22]
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	440b      	add	r3, r1
 80022ac:	74da      	strb	r2, [r3, #19]
 80022ae:	e015      	b.n	80022dc <process_FC1+0x104>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80022b6:	461a      	mov	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4413      	add	r3, r2
 80022bc:	7cda      	ldrb	r2, [r3, #19]
 80022be:	7dbb      	ldrb	r3, [r7, #22]
 80022c0:	2101      	movs	r1, #1
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 80022d2:	4013      	ands	r3, r2
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	440b      	add	r3, r1
 80022da:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 80022dc:	7dbb      	ldrb	r3, [r7, #22]
 80022de:	3301      	adds	r3, #1
 80022e0:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80022e2:	7dbb      	ldrb	r3, [r7, #22]
 80022e4:	2b07      	cmp	r3, #7
 80022e6:	d909      	bls.n	80022fc <process_FC1+0x124>
        {
            u8bitsno = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80022f2:	3301      	adds	r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80022fc:	8abb      	ldrh	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	82bb      	strh	r3, [r7, #20]
 8002302:	8aba      	ldrh	r2, [r7, #20]
 8002304:	8a3b      	ldrh	r3, [r7, #16]
 8002306:	429a      	cmp	r2, r3
 8002308:	d3a2      	bcc.n	8002250 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800230a:	8a3b      	ldrh	r3, [r7, #16]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <process_FC1+0x14e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800231c:	3301      	adds	r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800232c:	3302      	adds	r3, #2
 800232e:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff fec1 	bl	80020b8 <sendTxBuffer>
    return u8CopyBufferSize;
 8002336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7d5a      	ldrb	r2, [r3, #21]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7d9b      	ldrb	r3, [r3, #22]
 8002352:	4619      	mov	r1, r3
 8002354:	4610      	mov	r0, r2
 8002356:	f7ff fe39 	bl	8001fcc <word>
 800235a:	4603      	mov	r3, r0
 800235c:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7dda      	ldrb	r2, [r3, #23]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7e1b      	ldrb	r3, [r3, #24]
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7ff fe2f 	bl	8001fcc <word>
 800236e:	4603      	mov	r3, r0
 8002370:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8002372:	7afb      	ldrb	r3, [r7, #11]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	b2da      	uxtb	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2203      	movs	r2, #3
 8002380:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8002384:	89bb      	ldrh	r3, [r7, #12]
 8002386:	81fb      	strh	r3, [r7, #14]
 8002388:	e032      	b.n	80023f0 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002390:	89fb      	ldrh	r3, [r7, #14]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b29a      	uxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80023a2:	4619      	mov	r1, r3
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	440b      	add	r3, r1
 80023aa:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80023c2:	89fb      	ldrh	r3, [r7, #14]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	881a      	ldrh	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80023d0:	4619      	mov	r1, r3
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	440b      	add	r3, r1
 80023d8:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80023e0:	3301      	adds	r3, #1
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80023ea:	89fb      	ldrh	r3, [r7, #14]
 80023ec:	3301      	adds	r3, #1
 80023ee:	81fb      	strh	r3, [r7, #14]
 80023f0:	89fa      	ldrh	r2, [r7, #14]
 80023f2:	89b9      	ldrh	r1, [r7, #12]
 80023f4:	7afb      	ldrb	r3, [r7, #11]
 80023f6:	440b      	add	r3, r1
 80023f8:	429a      	cmp	r2, r3
 80023fa:	dbc6      	blt.n	800238a <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002402:	3302      	adds	r3, #2
 8002404:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fe56 	bl	80020b8 <sendTxBuffer>

    return u8CopyBufferSize;
 800240c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7d5a      	ldrb	r2, [r3, #21]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7d9b      	ldrb	r3, [r3, #22]
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f7ff fdce 	bl	8001fcc <word>
 8002430:	4603      	mov	r3, r0
 8002432:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8002434:	89fb      	ldrh	r3, [r7, #14]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800243a:	89fb      	ldrh	r3, [r7, #14]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7ddb      	ldrb	r3, [r3, #23]
 8002448:	2bff      	cmp	r3, #255	; 0xff
 800244a:	d115      	bne.n	8002478 <process_FC5+0x60>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002452:	89bb      	ldrh	r3, [r7, #12]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	8819      	ldrh	r1, [r3, #0]
 800245a:	7afb      	ldrb	r3, [r7, #11]
 800245c:	2201      	movs	r2, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	b29a      	uxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800246a:	89bb      	ldrh	r3, [r7, #12]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4403      	add	r3, r0
 8002470:	430a      	orrs	r2, r1
 8002472:	b292      	uxth	r2, r2
 8002474:	801a      	strh	r2, [r3, #0]
 8002476:	e016      	b.n	80024a6 <process_FC5+0x8e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800247e:	89bb      	ldrh	r3, [r7, #12]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	8819      	ldrh	r1, [r3, #0]
 8002486:	7afb      	ldrb	r3, [r7, #11]
 8002488:	2201      	movs	r2, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	b29b      	uxth	r3, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800249a:	89bb      	ldrh	r3, [r7, #12]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4403      	add	r3, r0
 80024a0:	400a      	ands	r2, r1
 80024a2:	b292      	uxth	r2, r2
 80024a4:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2206      	movs	r2, #6
 80024aa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80024b4:	3302      	adds	r3, #2
 80024b6:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff fdfd 	bl	80020b8 <sendTxBuffer>

    return u8CopyBufferSize;
 80024be:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7d5a      	ldrb	r2, [r3, #21]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7d9b      	ldrb	r3, [r3, #22]
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f7ff fd75 	bl	8001fcc <word>
 80024e2:	4603      	mov	r3, r0
 80024e4:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7dda      	ldrb	r2, [r3, #23]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7e1b      	ldrb	r3, [r3, #24]
 80024ee:	4619      	mov	r1, r3
 80024f0:	4610      	mov	r0, r2
 80024f2:	f7ff fd6b 	bl	8001fcc <word>
 80024f6:	4603      	mov	r3, r0
 80024f8:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4413      	add	r3, r2
 8002506:	89ba      	ldrh	r2, [r7, #12]
 8002508:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2206      	movs	r2, #6
 800250e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002518:	3302      	adds	r3, #2
 800251a:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff fdcb 	bl	80020b8 <sendTxBuffer>

    return u8CopyBufferSize;
 8002522:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7d5a      	ldrb	r2, [r3, #21]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7d9b      	ldrb	r3, [r3, #22]
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f7ff fd43 	bl	8001fcc <word>
 8002546:	4603      	mov	r3, r0
 8002548:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7dda      	ldrb	r2, [r3, #23]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7e1b      	ldrb	r3, [r3, #24]
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f7ff fd39 	bl	8001fcc <word>
 800255a:	4603      	mov	r3, r0
 800255c:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8002562:	2307      	movs	r3, #7
 8002564:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002566:	2300      	movs	r3, #0
 8002568:	82bb      	strh	r3, [r7, #20]
 800256a:	e058      	b.n	800261e <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800256c:	8a7a      	ldrh	r2, [r7, #18]
 800256e:	8abb      	ldrh	r3, [r7, #20]
 8002570:	4413      	add	r3, r2
 8002572:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 8002574:	89bb      	ldrh	r3, [r7, #12]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800257a:	89bb      	ldrh	r3, [r7, #12]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	7cdb      	ldrb	r3, [r3, #19]
 800258c:	461a      	mov	r2, r3
 800258e:	7dbb      	ldrb	r3, [r7, #22]
 8002590:	fa42 f303 	asr.w	r3, r2, r3
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80025a2:	7a3b      	ldrb	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d015      	beq.n	80025d4 <process_FC15+0xa6>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80025ae:	897b      	ldrh	r3, [r7, #10]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	8819      	ldrh	r1, [r3, #0]
 80025b6:	7a7b      	ldrb	r3, [r7, #9]
 80025b8:	2201      	movs	r2, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80025c6:	897b      	ldrh	r3, [r7, #10]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4403      	add	r3, r0
 80025cc:	430a      	orrs	r2, r1
 80025ce:	b292      	uxth	r2, r2
 80025d0:	801a      	strh	r2, [r3, #0]
 80025d2:	e016      	b.n	8002602 <process_FC15+0xd4>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80025da:	897b      	ldrh	r3, [r7, #10]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	8819      	ldrh	r1, [r3, #0]
 80025e2:	7a7b      	ldrb	r3, [r7, #9]
 80025e4:	2201      	movs	r2, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4403      	add	r3, r0
 80025fc:	400a      	ands	r2, r1
 80025fe:	b292      	uxth	r2, r2
 8002600:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8002602:	7dbb      	ldrb	r3, [r7, #22]
 8002604:	3301      	adds	r3, #1
 8002606:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8002608:	7dbb      	ldrb	r3, [r7, #22]
 800260a:	2b07      	cmp	r3, #7
 800260c:	d904      	bls.n	8002618 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	3301      	adds	r3, #1
 8002616:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002618:	8abb      	ldrh	r3, [r7, #20]
 800261a:	3301      	adds	r3, #1
 800261c:	82bb      	strh	r3, [r7, #20]
 800261e:	8aba      	ldrh	r2, [r7, #20]
 8002620:	8a3b      	ldrh	r3, [r7, #16]
 8002622:	429a      	cmp	r2, r3
 8002624:	d3a2      	bcc.n	800256c <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2206      	movs	r2, #6
 800262a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002634:	3302      	adds	r3, #2
 8002636:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff fd3d 	bl	80020b8 <sendTxBuffer>
    return u8CopyBufferSize;
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	7d5b      	ldrb	r3, [r3, #21]
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	b21a      	sxth	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7d9b      	ldrb	r3, [r3, #22]
 800265e:	b21b      	sxth	r3, r3
 8002660:	4313      	orrs	r3, r2
 8002662:	b21b      	sxth	r3, r3
 8002664:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7ddb      	ldrb	r3, [r3, #23]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	b21a      	sxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7e1b      	ldrb	r3, [r3, #24]
 8002672:	b21b      	sxth	r3, r3
 8002674:	4313      	orrs	r3, r2
 8002676:	b21b      	sxth	r3, r3
 8002678:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8002680:	8a7b      	ldrh	r3, [r7, #18]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2206      	movs	r2, #6
 800268c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8002690:	2300      	movs	r3, #0
 8002692:	82fb      	strh	r3, [r7, #22]
 8002694:	e01d      	b.n	80026d2 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8002696:	8afb      	ldrh	r3, [r7, #22]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	3307      	adds	r3, #7
        temp = word(
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 80026a2:	8afb      	ldrh	r3, [r7, #22]
 80026a4:	3304      	adds	r3, #4
 80026a6:	005b      	lsls	r3, r3, #1
        temp = word(
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	7cdb      	ldrb	r3, [r3, #19]
 80026ae:	4619      	mov	r1, r3
 80026b0:	f7ff fc8c 	bl	8001fcc <word>
 80026b4:	4603      	mov	r3, r0
 80026b6:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80026be:	8ab9      	ldrh	r1, [r7, #20]
 80026c0:	8afb      	ldrh	r3, [r7, #22]
 80026c2:	440b      	add	r3, r1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	89fa      	ldrh	r2, [r7, #14]
 80026ca:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 80026cc:	8afb      	ldrh	r3, [r7, #22]
 80026ce:	3301      	adds	r3, #1
 80026d0:	82fb      	strh	r3, [r7, #22]
 80026d2:	8afa      	ldrh	r2, [r7, #22]
 80026d4:	8a7b      	ldrh	r3, [r7, #18]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d3dd      	bcc.n	8002696 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80026e0:	3302      	adds	r3, #2
 80026e2:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff fce7 	bl	80020b8 <sendTxBuffer>

    return u8CopyBufferSize;
 80026ea:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e019      	b.n	800273e <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800270a:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_UART_TxCpltCallback+0x70>)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	d10e      	bne.n	8002738 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_UART_TxCpltCallback+0x70>)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8002726:	f107 0308 	add.w	r3, r7, #8
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2300      	movs	r3, #0
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	f006 f991 	bl	8008a58 <xTaskGenericNotifyFromISR>
	   		break;
 8002736:	e008      	b.n	800274a <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3301      	adds	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_UART_TxCpltCallback+0x74>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4293      	cmp	r3, r2
 8002748:	dbdf      	blt.n	800270a <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_UART_TxCpltCallback+0x68>
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <HAL_UART_TxCpltCallback+0x78>)
 8002752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20001bfc 	.word	0x20001bfc
 800276c:	200001fc 	.word	0x200001fc
 8002770:	e000ed04 	.word	0xe000ed04

08002774 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b087      	sub	sp, #28
 8002778:	af02      	add	r7, sp, #8
 800277a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e042      	b.n	800280c <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8002786:	4a2d      	ldr	r2, [pc, #180]	; (800283c <HAL_UART_RxCpltCallback+0xc8>)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	429a      	cmp	r2, r3
 8002794:	d137      	bne.n	8002806 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8002796:	4a29      	ldr	r2, [pc, #164]	; (800283c <HAL_UART_RxCpltCallback+0xc8>)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d139      	bne.n	800281a <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 80027a6:	4a25      	ldr	r2, [pc, #148]	; (800283c <HAL_UART_RxCpltCallback+0xc8>)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80027b2:	4922      	ldr	r1, [pc, #136]	; (800283c <HAL_UART_RxCpltCallback+0xc8>)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027ba:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f7fe fc0f 	bl	8000fe4 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <HAL_UART_RxCpltCallback+0xc8>)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	6858      	ldr	r0, [r3, #4]
 80027d0:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_UART_RxCpltCallback+0xc8>)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d8:	33a6      	adds	r3, #166	; 0xa6
 80027da:	2201      	movs	r2, #1
 80027dc:	4619      	mov	r1, r3
 80027de:	f002 ff3b 	bl	8005658 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 80027e2:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_UART_RxCpltCallback+0xc8>)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 80027ee:	f005 fb5f 	bl	8007eb0 <xTaskGetTickCountFromISR>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f107 0308 	add.w	r3, r7, #8
 80027f8:	2100      	movs	r1, #0
 80027fa:	9100      	str	r1, [sp, #0]
 80027fc:	2107      	movs	r1, #7
 80027fe:	4620      	mov	r0, r4
 8002800:	f006 faec 	bl	8008ddc <xTimerGenericCommand>
    		}
    		break;
 8002804:	e009      	b.n	800281a <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3301      	adds	r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_UART_RxCpltCallback+0xcc>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4293      	cmp	r3, r2
 8002816:	dbb6      	blt.n	8002786 <HAL_UART_RxCpltCallback+0x12>
 8002818:	e000      	b.n	800281c <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800281a:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_UART_RxCpltCallback+0xbe>
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_UART_RxCpltCallback+0xd0>)
 8002824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}
 800283a:	bf00      	nop
 800283c:	20001bfc 	.word	0x20001bfc
 8002840:	200001fc 	.word	0x200001fc
 8002844:	e000ed04 	.word	0xe000ed04

08002848 <HAL_GPIO_EXTI_Callback>:
		htim1.Instance->CCR1 = 0;
		ModbusDATA[1]=0;
	}
}

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == D01_Encoder_Pin){
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d111      	bne.n	800287c <HAL_GPIO_EXTI_Callback+0x34>
		ticksAux = ticksPrev;
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_GPIO_EXTI_Callback+0x3c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_GPIO_EXTI_Callback+0x40>)
 800285e:	6013      	str	r3, [r2, #0]
		ticksPrev = ticksNow;
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_GPIO_EXTI_Callback+0x44>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002866:	6013      	str	r3, [r2, #0]
		ticksNow = __HAL_TIM_GetCounter(&htim2);
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_GPIO_EXTI_Callback+0x48>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	4a07      	ldr	r2, [pc, #28]	; (800288c <HAL_GPIO_EXTI_Callback+0x44>)
 8002870:	6013      	str	r3, [r2, #0]
		osSemaphoreRelease(SpeedSemaphoreHandle);
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fe42 	bl	8006500 <osSemaphoreRelease>
	}

}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000214 	.word	0x20000214
 8002888:	2000021c 	.word	0x2000021c
 800288c:	20000218 	.word	0x20000218
 8002890:	20001de0 	.word	0x20001de0
 8002894:	20001d8c 	.word	0x20001d8c

08002898 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800289c:	f000 fedc 	bl	8003658 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80028a0:	f000 f878 	bl	8002994 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80028a4:	f000 f9d4 	bl	8002c50 <MX_GPIO_Init>
	MX_TIM2_Init();
 80028a8:	f000 f95a 	bl	8002b60 <MX_TIM2_Init>
	MX_TIM1_Init();
 80028ac:	f000 f8b8 	bl	8002a20 <MX_TIM1_Init>
	MX_USART3_UART_Init();
 80028b0:	f000 f9a4 	bl	8002bfc <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80028b4:	4827      	ldr	r0, [pc, #156]	; (8002954 <main+0xbc>)
 80028b6:	f001 fedf 	bl	8004678 <HAL_TIM_Base_Start_IT>


	// Definiciones para la biblioteca de modbus
	ModbusH.uModbusType = MB_SLAVE;
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <main+0xc0>)
 80028bc:	2203      	movs	r2, #3
 80028be:	701a      	strb	r2, [r3, #0]
	ModbusH.port =  &huart3;
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <main+0xc0>)
 80028c2:	4a26      	ldr	r2, [pc, #152]	; (800295c <main+0xc4>)
 80028c4:	605a      	str	r2, [r3, #4]
	ModbusH.u8id = 1; //Modbus slave ID
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <main+0xc0>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	721a      	strb	r2, [r3, #8]
	ModbusH.u16timeOut = 1000;
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <main+0xc0>)
 80028ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028d2:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	ModbusH.EN_Port = NULL;
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <main+0xc0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
	ModbusH.u16regs = ModbusDATA;
 80028dc:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <main+0xc0>)
 80028de:	4a20      	ldr	r2, [pc, #128]	; (8002960 <main+0xc8>)
 80028e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <main+0xc0>)
 80028e6:	2207      	movs	r2, #7
 80028e8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	ModbusH.xTypeHW = USART_HW;
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <main+0xc0>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

	//Initialize Modbus library
	ModbusInit(&ModbusH);
 80028f4:	4818      	ldr	r0, [pc, #96]	; (8002958 <main+0xc0>)
 80028f6:	f7fe fc3b 	bl	8001170 <ModbusInit>
	//Start capturing traffic on serial Port
	ModbusStart(&ModbusH);
 80028fa:	4817      	ldr	r0, [pc, #92]	; (8002958 <main+0xc0>)
 80028fc:	f7fe fcda 	bl	80012b4 <ModbusStart>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002900:	2100      	movs	r1, #0
 8002902:	4818      	ldr	r0, [pc, #96]	; (8002964 <main+0xcc>)
 8002904:	f001 ff62 	bl	80047cc <HAL_TIM_PWM_Start>
	//  	HAL_UART_Transmit(&huart3, (uint8_t*)"V\n", 3*sizeof(char), HAL_MAX_DELAY);
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8002908:	f003 fbba 	bl	8006080 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of SpeedSemaphore */
	SpeedSemaphoreHandle = osSemaphoreNew(1, 1, &SpeedSemaphore_attributes);
 800290c:	4a16      	ldr	r2, [pc, #88]	; (8002968 <main+0xd0>)
 800290e:	2101      	movs	r1, #1
 8002910:	2001      	movs	r0, #1
 8002912:	f003 fcf3 	bl	80062fc <osSemaphoreNew>
 8002916:	4603      	mov	r3, r0
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <main+0xd4>)
 800291a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Speed */
	SpeedHandle = osThreadNew(StartSpeed, NULL, &Speed_attributes);
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <main+0xd8>)
 800291e:	2100      	movs	r1, #0
 8002920:	4814      	ldr	r0, [pc, #80]	; (8002974 <main+0xdc>)
 8002922:	f003 fc13 	bl	800614c <osThreadNew>
 8002926:	4603      	mov	r3, r0
 8002928:	4a13      	ldr	r2, [pc, #76]	; (8002978 <main+0xe0>)
 800292a:	6013      	str	r3, [r2, #0]

	/* creation of Modbus */
	ModbusHandle = osThreadNew(StartModbus, NULL, &Modbus_attributes);
 800292c:	4a13      	ldr	r2, [pc, #76]	; (800297c <main+0xe4>)
 800292e:	2100      	movs	r1, #0
 8002930:	4813      	ldr	r0, [pc, #76]	; (8002980 <main+0xe8>)
 8002932:	f003 fc0b 	bl	800614c <osThreadNew>
 8002936:	4603      	mov	r3, r0
 8002938:	4a12      	ldr	r2, [pc, #72]	; (8002984 <main+0xec>)
 800293a:	6013      	str	r3, [r2, #0]

	/* creation of CheckVelocidad */
	CheckVelocidadHandle = osThreadNew(StartCheckVelocidad, NULL, &CheckVelocidad_attributes);
 800293c:	4a12      	ldr	r2, [pc, #72]	; (8002988 <main+0xf0>)
 800293e:	2100      	movs	r1, #0
 8002940:	4812      	ldr	r0, [pc, #72]	; (800298c <main+0xf4>)
 8002942:	f003 fc03 	bl	800614c <osThreadNew>
 8002946:	4603      	mov	r3, r0
 8002948:	4a11      	ldr	r2, [pc, #68]	; (8002990 <main+0xf8>)
 800294a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800294c:	f003 fbca 	bl	80060e4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002950:	e7fe      	b.n	8002950 <main+0xb8>
 8002952:	bf00      	nop
 8002954:	20001de0 	.word	0x20001de0
 8002958:	20001c04 	.word	0x20001c04
 800295c:	20001d48 	.word	0x20001d48
 8002960:	20000200 	.word	0x20000200
 8002964:	20001d94 	.word	0x20001d94
 8002968:	0800c794 	.word	0x0800c794
 800296c:	20001d8c 	.word	0x20001d8c
 8002970:	0800c728 	.word	0x0800c728
 8002974:	08002d61 	.word	0x08002d61
 8002978:	20001e28 	.word	0x20001e28
 800297c:	0800c74c 	.word	0x0800c74c
 8002980:	08002ff5 	.word	0x08002ff5
 8002984:	20001e2c 	.word	0x20001e2c
 8002988:	0800c770 	.word	0x0800c770
 800298c:	080030c5 	.word	0x080030c5
 8002990:	20001e30 	.word	0x20001e30

08002994 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b090      	sub	sp, #64	; 0x40
 8002998:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800299a:	f107 0318 	add.w	r3, r7, #24
 800299e:	2228      	movs	r2, #40	; 0x28
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f007 f9db 	bl	8009d5e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029be:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029c4:	2301      	movs	r3, #1
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029c8:	2302      	movs	r3, #2
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80029d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d8:	f107 0318 	add.w	r3, r7, #24
 80029dc:	4618      	mov	r0, r3
 80029de:	f001 f9b1 	bl	8003d44 <HAL_RCC_OscConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <SystemClock_Config+0x58>
	{
		Error_Handler();
 80029e8:	f000 fbba 	bl	8003160 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ec:	230f      	movs	r3, #15
 80029ee:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f0:	2302      	movs	r3, #2
 80029f2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	2102      	movs	r1, #2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 fc1c 	bl	8004244 <HAL_RCC_ClockConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8002a12:	f000 fba5 	bl	8003160 <Error_Handler>
	}
}
 8002a16:	bf00      	nop
 8002a18:	3740      	adds	r7, #64	; 0x40
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b096      	sub	sp, #88	; 0x58
 8002a24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	615a      	str	r2, [r3, #20]
 8002a50:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	2220      	movs	r2, #32
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f007 f980 	bl	8009d5e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002a5e:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002a60:	4a3e      	ldr	r2, [pc, #248]	; (8002b5c <MX_TIM1_Init+0x13c>)
 8002a62:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72-1;
 8002a64:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002a66:	2247      	movs	r2, #71	; 0x47
 8002a68:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6a:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 10000-1;
 8002a70:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002a72:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a76:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a78:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002a7e:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a84:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a8a:	4833      	ldr	r0, [pc, #204]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002a8c:	f001 fda4 	bl	80045d8 <HAL_TIM_Base_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 8002a96:	f000 fb63 	bl	8003160 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a9e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002aa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	482c      	ldr	r0, [pc, #176]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002aa8:	f002 f8f8 	bl	8004c9c <HAL_TIM_ConfigClockSource>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 8002ab2:	f000 fb55 	bl	8003160 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ab6:	4828      	ldr	r0, [pc, #160]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002ab8:	f001 fe30 	bl	800471c <HAL_TIM_PWM_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 8002ac2:	f000 fb4d 	bl	8003160 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4820      	ldr	r0, [pc, #128]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002ad6:	f002 fc6d 	bl	80053b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8002ae0:	f000 fb3e 	bl	8003160 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae4:	2360      	movs	r3, #96	; 0x60
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002af0:	2300      	movs	r3, #0
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002af8:	2300      	movs	r3, #0
 8002afa:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b04:	2200      	movs	r2, #0
 8002b06:	4619      	mov	r1, r3
 8002b08:	4813      	ldr	r0, [pc, #76]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002b0a:	f002 f809 	bl	8004b20 <HAL_TIM_PWM_ConfigChannel>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM1_Init+0xf8>
	{
		Error_Handler();
 8002b14:	f000 fb24 	bl	8003160 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b30:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4807      	ldr	r0, [pc, #28]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002b3c:	f002 fc98 	bl	8005470 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM1_Init+0x12a>
	{
		Error_Handler();
 8002b46:	f000 fb0b 	bl	8003160 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002b4a:	4803      	ldr	r0, [pc, #12]	; (8002b58 <MX_TIM1_Init+0x138>)
 8002b4c:	f000 fb7e 	bl	800324c <HAL_TIM_MspPostInit>

}
 8002b50:	bf00      	nop
 8002b52:	3758      	adds	r7, #88	; 0x58
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20001d94 	.word	0x20001d94
 8002b5c:	40012c00 	.word	0x40012c00

08002b60 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b66:	f107 0308 	add.w	r3, r7, #8
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b74:	463b      	mov	r3, r7
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <MX_TIM2_Init+0x98>)
 8002b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b82:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1440-1;
 8002b84:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <MX_TIM2_Init+0x98>)
 8002b86:	f240 529f 	movw	r2, #1439	; 0x59f
 8002b8a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <MX_TIM2_Init+0x98>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 20000-1;
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <MX_TIM2_Init+0x98>)
 8002b94:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002b98:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9a:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <MX_TIM2_Init+0x98>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <MX_TIM2_Init+0x98>)
 8002ba2:	2280      	movs	r2, #128	; 0x80
 8002ba4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ba6:	4814      	ldr	r0, [pc, #80]	; (8002bf8 <MX_TIM2_Init+0x98>)
 8002ba8:	f001 fd16 	bl	80045d8 <HAL_TIM_Base_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8002bb2:	f000 fad5 	bl	8003160 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bba:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bbc:	f107 0308 	add.w	r3, r7, #8
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480d      	ldr	r0, [pc, #52]	; (8002bf8 <MX_TIM2_Init+0x98>)
 8002bc4:	f002 f86a 	bl	8004c9c <HAL_TIM_ConfigClockSource>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8002bce:	f000 fac7 	bl	8003160 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bda:	463b      	mov	r3, r7
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4806      	ldr	r0, [pc, #24]	; (8002bf8 <MX_TIM2_Init+0x98>)
 8002be0:	f002 fbe8 	bl	80053b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8002bea:	f000 fab9 	bl	8003160 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20001de0 	.word	0x20001de0

08002bfc <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <MX_USART3_UART_Init+0x4c>)
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <MX_USART3_UART_Init+0x50>)
 8002c04:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <MX_USART3_UART_Init+0x4c>)
 8002c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c0c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <MX_USART3_UART_Init+0x4c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <MX_USART3_UART_Init+0x4c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <MX_USART3_UART_Init+0x4c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <MX_USART3_UART_Init+0x4c>)
 8002c22:	220c      	movs	r2, #12
 8002c24:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <MX_USART3_UART_Init+0x4c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <MX_USART3_UART_Init+0x4c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c32:	4805      	ldr	r0, [pc, #20]	; (8002c48 <MX_USART3_UART_Init+0x4c>)
 8002c34:	f002 fc7f 	bl	8005536 <HAL_UART_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8002c3e:	f000 fa8f 	bl	8003160 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20001d48 	.word	0x20001d48
 8002c4c:	40004800 	.word	0x40004800

08002c50 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c56:	f107 0310 	add.w	r3, r7, #16
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002c64:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4a37      	ldr	r2, [pc, #220]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002c6a:	f043 0310 	orr.w	r3, r3, #16
 8002c6e:	6193      	str	r3, [r2, #24]
 8002c70:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	4a31      	ldr	r2, [pc, #196]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002c82:	f043 0320 	orr.w	r3, r3, #32
 8002c86:	6193      	str	r3, [r2, #24]
 8002c88:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c94:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	4a2b      	ldr	r2, [pc, #172]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002c9a:	f043 0304 	orr.w	r3, r3, #4
 8002c9e:	6193      	str	r3, [r2, #24]
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002cac:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002cb2:	f043 0308 	orr.w	r3, r3, #8
 8002cb6:	6193      	str	r3, [r2, #24]
 8002cb8:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <MX_GPIO_Init+0xf8>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cca:	4820      	ldr	r0, [pc, #128]	; (8002d4c <MX_GPIO_Init+0xfc>)
 8002ccc:	f001 f80a 	bl	8003ce4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, IN1_2_Pin|IN1_1_Pin, GPIO_PIN_RESET);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002cd6:	481e      	ldr	r0, [pc, #120]	; (8002d50 <MX_GPIO_Init+0x100>)
 8002cd8:	f001 f804 	bl	8003ce4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 8002cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ce0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2302      	movs	r3, #2
 8002cec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8002cee:	f107 0310 	add.w	r3, r7, #16
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4815      	ldr	r0, [pc, #84]	; (8002d4c <MX_GPIO_Init+0xfc>)
 8002cf6:	f000 fe71 	bl	80039dc <HAL_GPIO_Init>

	/*Configure GPIO pin : D01_Encoder_Pin */
	GPIO_InitStruct.Pin = D01_Encoder_Pin;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <MX_GPIO_Init+0x104>)
 8002d00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d02:	2302      	movs	r3, #2
 8002d04:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(D01_Encoder_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f107 0310 	add.w	r3, r7, #16
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4812      	ldr	r0, [pc, #72]	; (8002d58 <MX_GPIO_Init+0x108>)
 8002d0e:	f000 fe65 	bl	80039dc <HAL_GPIO_Init>

	/*Configure GPIO pins : IN1_2_Pin IN1_1_Pin */
	GPIO_InitStruct.Pin = IN1_2_Pin|IN1_1_Pin;
 8002d12:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002d16:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2302      	movs	r3, #2
 8002d22:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	f107 0310 	add.w	r3, r7, #16
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4809      	ldr	r0, [pc, #36]	; (8002d50 <MX_GPIO_Init+0x100>)
 8002d2c:	f000 fe56 	bl	80039dc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2105      	movs	r1, #5
 8002d34:	2007      	movs	r0, #7
 8002d36:	f000 fd76 	bl	8003826 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002d3a:	2007      	movs	r0, #7
 8002d3c:	f000 fd8f 	bl	800385e <HAL_NVIC_EnableIRQ>

}
 8002d40:	bf00      	nop
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40011000 	.word	0x40011000
 8002d50:	40010c00 	.word	0x40010c00
 8002d54:	10110000 	.word	0x10110000
 8002d58:	40010800 	.word	0x40010800
 8002d5c:	00000000 	.word	0x00000000

08002d60 <StartSpeed>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSpeed */
void StartSpeed(void *argument)
{
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b090      	sub	sp, #64	; 0x40
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	uint32_t ranuras = 50;
 8002d68:	2332      	movs	r3, #50	; 0x32
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t cantTicksTmr2 = 20000;
 8002d6c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
	uint64_t fsTmr2= 50000;
 8002d72:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t tickFilter = 600; // Parametro delicado, puede hacer cagadas en la medicion de la velocidad, OJO
 8002d7e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	uint32_t ticksPrev_l = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ticksNow_l = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
	uint32_t ticksAux_l = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
	uint32_t deltaTicks_l = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
	uint16_t overflow_l =0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	82fb      	strh	r3, [r7, #22]
	float velocidad_prima2_l = 0;
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
	float velocidad_prima1_l = 0;
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
	float velocidad_l = 0;
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(SpeedSemaphoreHandle, osWaitForever);
 8002db0:	4b87      	ldr	r3, [pc, #540]	; (8002fd0 <StartSpeed+0x270>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fb3b 	bl	8006434 <osSemaphoreAcquire>
		taskENTER_CRITICAL();
 8002dbe:	f006 fbc5 	bl	800954c <vPortEnterCritical>

		ticksPrev_l = ticksPrev;
 8002dc2:	4b84      	ldr	r3, [pc, #528]	; (8002fd4 <StartSpeed+0x274>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
		ticksNow_l = ticksNow;
 8002dc8:	4b83      	ldr	r3, [pc, #524]	; (8002fd8 <StartSpeed+0x278>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	623b      	str	r3, [r7, #32]
		ticksAux_l = ticksAux;
 8002dce:	4b83      	ldr	r3, [pc, #524]	; (8002fdc <StartSpeed+0x27c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	61fb      	str	r3, [r7, #28]
		overflow_l = overflow;
 8002dd4:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <StartSpeed+0x280>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	82fb      	strh	r3, [r7, #22]
		velocidad_l = velocidad;
 8002dda:	4b82      	ldr	r3, [pc, #520]	; (8002fe4 <StartSpeed+0x284>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60bb      	str	r3, [r7, #8]
		velocidad_prima1_l = velocidad_prima1;
 8002de0:	4b81      	ldr	r3, [pc, #516]	; (8002fe8 <StartSpeed+0x288>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60fb      	str	r3, [r7, #12]
		velocidad_prima2_l = velocidad_prima2;
 8002de6:	4b81      	ldr	r3, [pc, #516]	; (8002fec <StartSpeed+0x28c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	613b      	str	r3, [r7, #16]

		taskEXIT_CRITICAL();
 8002dec:	f006 fbde 	bl	80095ac <vPortExitCritical>

		//		HAL_NVIC_EnableIRQ(EXTI1_IRQn);

		if (overflow_l == 0){
 8002df0:	8afb      	ldrh	r3, [r7, #22]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d16c      	bne.n	8002ed0 <StartSpeed+0x170>
			// Todo cool, calculo normal
			deltaTicks_l = ticksNow_l - ticksPrev_l;
 8002df6:	6a3a      	ldr	r2, [r7, #32]
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	61bb      	str	r3, [r7, #24]
			if (deltaTicks_l > tickFilter){
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	461a      	mov	r2, r3
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e0a:	4299      	cmp	r1, r3
 8002e0c:	bf08      	it	eq
 8002e0e:	4290      	cmpeq	r0, r2
 8002e10:	d253      	bcs.n	8002eba <StartSpeed+0x15a>
				velocidad_l = ((1/(float)ranuras)/((float)deltaTicks_l/(float)fsTmr2));
 8002e12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e14:	f7fd ff3e 	bl	8000c94 <__aeabi_ui2f>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002e20:	f7fe f844 	bl	8000eac <__aeabi_fdiv>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461d      	mov	r5, r3
 8002e28:	69b8      	ldr	r0, [r7, #24]
 8002e2a:	f7fd ff33 	bl	8000c94 <__aeabi_ui2f>
 8002e2e:	4604      	mov	r4, r0
 8002e30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002e34:	f7fd ff40 	bl	8000cb8 <__aeabi_ul2f>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f7fe f835 	bl	8000eac <__aeabi_fdiv>
 8002e42:	4603      	mov	r3, r0
 8002e44:	4619      	mov	r1, r3
 8002e46:	4628      	mov	r0, r5
 8002e48:	f7fe f830 	bl	8000eac <__aeabi_fdiv>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60bb      	str	r3, [r7, #8]
				//Filtro IIR
				velocidad_prima2_l = velocidad_prima1_l;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	613b      	str	r3, [r7, #16]
				velocidad_prima1_l = 0.9*velocidad_prima2_l + 0.1*velocidad_l;
 8002e54:	6938      	ldr	r0, [r7, #16]
 8002e56:	f7fd fae7 	bl	8000428 <__aeabi_f2d>
 8002e5a:	a359      	add	r3, pc, #356	; (adr r3, 8002fc0 <StartSpeed+0x260>)
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	f7fd fb3a 	bl	80004d8 <__aeabi_dmul>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4614      	mov	r4, r2
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	68b8      	ldr	r0, [r7, #8]
 8002e6e:	f7fd fadb 	bl	8000428 <__aeabi_f2d>
 8002e72:	a355      	add	r3, pc, #340	; (adr r3, 8002fc8 <StartSpeed+0x268>)
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd fb2e 	bl	80004d8 <__aeabi_dmul>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4620      	mov	r0, r4
 8002e82:	4629      	mov	r1, r5
 8002e84:	f7fd f972 	bl	800016c <__adddf3>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f7fd fdfa 	bl	8000a88 <__aeabi_d2f>
 8002e94:	4603      	mov	r3, r0
 8002e96:	60fb      	str	r3, [r7, #12]

				taskENTER_CRITICAL();
 8002e98:	f006 fb58 	bl	800954c <vPortEnterCritical>
				deltaTicks = deltaTicks_l;
 8002e9c:	4a54      	ldr	r2, [pc, #336]	; (8002ff0 <StartSpeed+0x290>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	6013      	str	r3, [r2, #0]
				velocidad = velocidad_l;
 8002ea2:	4a50      	ldr	r2, [pc, #320]	; (8002fe4 <StartSpeed+0x284>)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	6013      	str	r3, [r2, #0]
				velocidad_prima1 = velocidad_prima1_l;
 8002ea8:	4a4f      	ldr	r2, [pc, #316]	; (8002fe8 <StartSpeed+0x288>)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6013      	str	r3, [r2, #0]
				velocidad_prima2 = velocidad_prima2_l;
 8002eae:	4a4f      	ldr	r2, [pc, #316]	; (8002fec <StartSpeed+0x28c>)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8002eb4:	f006 fb7a 	bl	80095ac <vPortExitCritical>
 8002eb8:	e77a      	b.n	8002db0 <StartSpeed+0x50>
			}
			else{
				taskENTER_CRITICAL();
 8002eba:	f006 fb47 	bl	800954c <vPortEnterCritical>
				ticksNow = ticksPrev_l;
 8002ebe:	4a46      	ldr	r2, [pc, #280]	; (8002fd8 <StartSpeed+0x278>)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	6013      	str	r3, [r2, #0]
				ticksPrev = ticksAux_l;
 8002ec4:	4a43      	ldr	r2, [pc, #268]	; (8002fd4 <StartSpeed+0x274>)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8002eca:	f006 fb6f 	bl	80095ac <vPortExitCritical>
 8002ece:	e76f      	b.n	8002db0 <StartSpeed+0x50>
			}
		} else{
			// Tuve algun desborde y tengo que tenerlo en cuenta
			deltaTicks_l = (ticksNow_l + overflow_l * cantTicksTmr2)- ticksPrev_l;/////////////////////////////////////////
 8002ed0:	8afb      	ldrh	r3, [r7, #22]
 8002ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ed4:	fb02 f203 	mul.w	r2, r2, r3
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	441a      	add	r2, r3
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	61bb      	str	r3, [r7, #24]
			if (deltaTicks_l > tickFilter){
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002eee:	4299      	cmp	r1, r3
 8002ef0:	bf08      	it	eq
 8002ef2:	4290      	cmpeq	r0, r2
 8002ef4:	d256      	bcs.n	8002fa4 <StartSpeed+0x244>
				velocidad_l = ((1/(float)ranuras)/((float)deltaTicks_l/(float)fsTmr2));
 8002ef6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ef8:	f7fd fecc 	bl	8000c94 <__aeabi_ui2f>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4619      	mov	r1, r3
 8002f00:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f04:	f7fd ffd2 	bl	8000eac <__aeabi_fdiv>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461d      	mov	r5, r3
 8002f0c:	69b8      	ldr	r0, [r7, #24]
 8002f0e:	f7fd fec1 	bl	8000c94 <__aeabi_ui2f>
 8002f12:	4604      	mov	r4, r0
 8002f14:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f18:	f7fd fece 	bl	8000cb8 <__aeabi_ul2f>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4620      	mov	r0, r4
 8002f22:	f7fd ffc3 	bl	8000eac <__aeabi_fdiv>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f7fd ffbe 	bl	8000eac <__aeabi_fdiv>
 8002f30:	4603      	mov	r3, r0
 8002f32:	60bb      	str	r3, [r7, #8]
				//Filtro IIR
				velocidad_prima2_l = velocidad_prima1_l;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	613b      	str	r3, [r7, #16]
				velocidad_prima1_l = 0.9*velocidad_prima2_l + 0.1*velocidad_l;
 8002f38:	6938      	ldr	r0, [r7, #16]
 8002f3a:	f7fd fa75 	bl	8000428 <__aeabi_f2d>
 8002f3e:	a320      	add	r3, pc, #128	; (adr r3, 8002fc0 <StartSpeed+0x260>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd fac8 	bl	80004d8 <__aeabi_dmul>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	68b8      	ldr	r0, [r7, #8]
 8002f52:	f7fd fa69 	bl	8000428 <__aeabi_f2d>
 8002f56:	a31c      	add	r3, pc, #112	; (adr r3, 8002fc8 <StartSpeed+0x268>)
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f7fd fabc 	bl	80004d8 <__aeabi_dmul>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4620      	mov	r0, r4
 8002f66:	4629      	mov	r1, r5
 8002f68:	f7fd f900 	bl	800016c <__adddf3>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f7fd fd88 	bl	8000a88 <__aeabi_d2f>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	60fb      	str	r3, [r7, #12]

				taskENTER_CRITICAL();
 8002f7c:	f006 fae6 	bl	800954c <vPortEnterCritical>
				overflow = 0;
 8002f80:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <StartSpeed+0x280>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	801a      	strh	r2, [r3, #0]
				deltaTicks = deltaTicks_l;
 8002f86:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <StartSpeed+0x290>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6013      	str	r3, [r2, #0]
				velocidad = velocidad_l;
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <StartSpeed+0x284>)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6013      	str	r3, [r2, #0]
				velocidad_prima1 = velocidad_prima1_l;
 8002f92:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <StartSpeed+0x288>)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6013      	str	r3, [r2, #0]
				velocidad_prima2 = velocidad_prima2_l;
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <StartSpeed+0x28c>)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8002f9e:	f006 fb05 	bl	80095ac <vPortExitCritical>
 8002fa2:	e705      	b.n	8002db0 <StartSpeed+0x50>
			}
			else{
				taskENTER_CRITICAL();
 8002fa4:	f006 fad2 	bl	800954c <vPortEnterCritical>
				ticksNow = ticksPrev_l;
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <StartSpeed+0x278>)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	6013      	str	r3, [r2, #0]
				ticksPrev = ticksAux_l;
 8002fae:	4a09      	ldr	r2, [pc, #36]	; (8002fd4 <StartSpeed+0x274>)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8002fb4:	f006 fafa 	bl	80095ac <vPortExitCritical>
		osSemaphoreAcquire(SpeedSemaphoreHandle, osWaitForever);
 8002fb8:	e6fa      	b.n	8002db0 <StartSpeed+0x50>
 8002fba:	bf00      	nop
 8002fbc:	f3af 8000 	nop.w
 8002fc0:	cccccccd 	.word	0xcccccccd
 8002fc4:	3feccccc 	.word	0x3feccccc
 8002fc8:	9999999a 	.word	0x9999999a
 8002fcc:	3fb99999 	.word	0x3fb99999
 8002fd0:	20001d8c 	.word	0x20001d8c
 8002fd4:	20000214 	.word	0x20000214
 8002fd8:	20000218 	.word	0x20000218
 8002fdc:	2000021c 	.word	0x2000021c
 8002fe0:	20000224 	.word	0x20000224
 8002fe4:	20000210 	.word	0x20000210
 8002fe8:	20001ddc 	.word	0x20001ddc
 8002fec:	20001d90 	.word	0x20001d90
 8002ff0:	20000220 	.word	0x20000220

08002ff4 <StartModbus>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartModbus */
void StartModbus(void *argument)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08c      	sub	sp, #48	; 0x30
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	uint16_t delta[2];// para mandar los deltaticks
	uint16_t delta1[2];
	uint16_t deltaticks[2];


	float velocidad_l = 0;
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
	float velocidad_prima1_l = 0;
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
	uint32_t deltaTicks_l = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
	uint16_t ModbusDATA_l[7] = {'\0'};
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	819a      	strh	r2, [r3, #12]
	/* Infinite loop */
	for(;;)
	{
		taskENTER_CRITICAL();
 800301a:	f006 fa97 	bl	800954c <vPortEnterCritical>
		deltaTicks_l = deltaTicks;
 800301e:	4b23      	ldr	r3, [pc, #140]	; (80030ac <StartModbus+0xb8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	61bb      	str	r3, [r7, #24]
		velocidad_l = velocidad;
 8003024:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <StartModbus+0xbc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	623b      	str	r3, [r7, #32]
		velocidad_prima1_l = velocidad_prima1;
 800302a:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <StartModbus+0xc0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	61fb      	str	r3, [r7, #28]
		ModbusDATA_l[0] = ModbusDATA[0];
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <StartModbus+0xc4>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	813b      	strh	r3, [r7, #8]
		taskEXIT_CRITICAL();
 8003036:	f006 fab9 	bl	80095ac <vPortExitCritical>

		HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 800303a:	2201      	movs	r2, #1
 800303c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003040:	481e      	ldr	r0, [pc, #120]	; (80030bc <StartModbus+0xc8>)
 8003042:	f000 fe4f 	bl	8003ce4 <HAL_GPIO_WritePin>
		htim1.Instance->CCR1 = ModbusDATA_l[0];
 8003046:	893a      	ldrh	r2, [r7, #8]
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <StartModbus+0xcc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	635a      	str	r2, [r3, #52]	; 0x34
 800304e:	69bb      	ldr	r3, [r7, #24]



		memcpy(deltaticks, &deltaTicks_l, sizeof(deltaTicks_l));
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
		ModbusDATA_l[1]=deltaticks[0];
 8003052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003054:	817b      	strh	r3, [r7, #10]
		ModbusDATA_l[2]=deltaticks[1];
 8003056:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003058:	81bb      	strh	r3, [r7, #12]
 800305a:	6a3b      	ldr	r3, [r7, #32]

		memcpy(delta, &velocidad_l, sizeof(velocidad_l));
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
		ModbusDATA_l[3]=delta[0];
 800305e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003060:	81fb      	strh	r3, [r7, #14]
		ModbusDATA_l[4]=delta[1];
 8003062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003064:	823b      	strh	r3, [r7, #16]
 8003066:	69fb      	ldr	r3, [r7, #28]

		memcpy(delta1, &velocidad_prima1_l, sizeof(velocidad_prima1_l));
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
		ModbusDATA_l[5]=delta1[0];
 800306a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800306c:	827b      	strh	r3, [r7, #18]
		ModbusDATA_l[6]=delta1[1];
 800306e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003070:	82bb      	strh	r3, [r7, #20]

		taskENTER_CRITICAL();
 8003072:	f006 fa6b 	bl	800954c <vPortEnterCritical>
		ModbusDATA[0] = ModbusDATA_l[0];
 8003076:	893a      	ldrh	r2, [r7, #8]
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <StartModbus+0xc4>)
 800307a:	801a      	strh	r2, [r3, #0]
		ModbusDATA[1] = ModbusDATA_l[1];
 800307c:	897a      	ldrh	r2, [r7, #10]
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <StartModbus+0xc4>)
 8003080:	805a      	strh	r2, [r3, #2]
		ModbusDATA[2] = ModbusDATA_l[2];
 8003082:	89ba      	ldrh	r2, [r7, #12]
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <StartModbus+0xc4>)
 8003086:	809a      	strh	r2, [r3, #4]
		ModbusDATA[3] = ModbusDATA_l[3];
 8003088:	89fa      	ldrh	r2, [r7, #14]
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <StartModbus+0xc4>)
 800308c:	80da      	strh	r2, [r3, #6]
		ModbusDATA[4] = ModbusDATA_l[4];
 800308e:	8a3a      	ldrh	r2, [r7, #16]
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <StartModbus+0xc4>)
 8003092:	811a      	strh	r2, [r3, #8]
		ModbusDATA[5] = ModbusDATA_l[5];
 8003094:	8a7a      	ldrh	r2, [r7, #18]
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <StartModbus+0xc4>)
 8003098:	815a      	strh	r2, [r3, #10]
		ModbusDATA[6] = ModbusDATA_l[6];
 800309a:	8aba      	ldrh	r2, [r7, #20]
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <StartModbus+0xc4>)
 800309e:	819a      	strh	r2, [r3, #12]
		taskEXIT_CRITICAL();
 80030a0:	f006 fa84 	bl	80095ac <vPortExitCritical>
		//		memcpy(delta1, &velocidad, sizeof(velocidad));
		//		ModbusDATA[10]=delta1[0];
		//		ModbusDATA[11]=delta1[1];
		//		ModbusDATA[5] = overflow;

		osDelay(50);
 80030a4:	2032      	movs	r0, #50	; 0x32
 80030a6:	f003 f8fb 	bl	80062a0 <osDelay>
		taskENTER_CRITICAL();
 80030aa:	e7b6      	b.n	800301a <StartModbus+0x26>
 80030ac:	20000220 	.word	0x20000220
 80030b0:	20000210 	.word	0x20000210
 80030b4:	20001ddc 	.word	0x20001ddc
 80030b8:	20000200 	.word	0x20000200
 80030bc:	40010c00 	.word	0x40010c00
 80030c0:	20001d94 	.word	0x20001d94

080030c4 <StartCheckVelocidad>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCheckVelocidad */
void StartCheckVelocidad(void *argument)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCheckVelocidad */

	uint16_t overflow_l =0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	81fb      	strh	r3, [r7, #14]


	/* Infinite loop */
	for(;;)
	{
		taskENTER_CRITICAL();
 80030d0:	f006 fa3c 	bl	800954c <vPortEnterCritical>
		overflow_l = overflow;
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <StartCheckVelocidad+0x50>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	81fb      	strh	r3, [r7, #14]
		taskEXIT_CRITICAL();
 80030da:	f006 fa67 	bl	80095ac <vPortExitCritical>

		if(overflow_l >= 2){
 80030de:	89fb      	ldrh	r3, [r7, #14]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d912      	bls.n	800310a <StartCheckVelocidad+0x46>
			taskENTER_CRITICAL();
 80030e4:	f006 fa32 	bl	800954c <vPortEnterCritical>
			overflow = 0;
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <StartCheckVelocidad+0x50>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	801a      	strh	r2, [r3, #0]
			velocidad_prima2 = 0;
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <StartCheckVelocidad+0x54>)
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
			velocidad_prima1 = 0;
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <StartCheckVelocidad+0x58>)
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
			velocidad = 0;
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <StartCheckVelocidad+0x5c>)
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8003106:	f006 fa51 	bl	80095ac <vPortExitCritical>
		}
		osDelay(10);
 800310a:	200a      	movs	r0, #10
 800310c:	f003 f8c8 	bl	80062a0 <osDelay>
		taskENTER_CRITICAL();
 8003110:	e7de      	b.n	80030d0 <StartCheckVelocidad+0xc>
 8003112:	bf00      	nop
 8003114:	20000224 	.word	0x20000224
 8003118:	20001d90 	.word	0x20001d90
 800311c:	20001ddc 	.word	0x20001ddc
 8003120:	20000210 	.word	0x20000210

08003124 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a09      	ldr	r2, [pc, #36]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003136:	f000 faa5 	bl	8003684 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if(htim->Instance == TIM2){
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003142:	d105      	bne.n	8003150 <HAL_TIM_PeriodElapsedCallback+0x2c>
		overflow += 1;
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800314e:	801a      	strh	r2, [r3, #0]

	}
	/* USER CODE END Callback 1 */
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40000800 	.word	0x40000800
 800315c:	20000224 	.word	0x20000224

08003160 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003164:	b672      	cpsid	i
}
 8003166:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003168:	e7fe      	b.n	8003168 <Error_Handler+0x8>
	...

0800316c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003172:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_MspInit+0x68>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <HAL_MspInit+0x68>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6193      	str	r3, [r2, #24]
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_MspInit+0x68>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_MspInit+0x68>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <HAL_MspInit+0x68>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003194:	61d3      	str	r3, [r2, #28]
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_MspInit+0x68>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	210f      	movs	r1, #15
 80031a6:	f06f 0001 	mvn.w	r0, #1
 80031aa:	f000 fb3c 	bl	8003826 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_MspInit+0x6c>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_MspInit+0x6c>)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40010000 	.word	0x40010000

080031dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <HAL_TIM_Base_MspInit+0x68>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d10c      	bne.n	8003208 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_TIM_Base_MspInit+0x6c>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	4a15      	ldr	r2, [pc, #84]	; (8003248 <HAL_TIM_Base_MspInit+0x6c>)
 80031f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031f8:	6193      	str	r3, [r2, #24]
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HAL_TIM_Base_MspInit+0x6c>)
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003206:	e018      	b.n	800323a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003210:	d113      	bne.n	800323a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_TIM_Base_MspInit+0x6c>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <HAL_TIM_Base_MspInit+0x6c>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	61d3      	str	r3, [r2, #28]
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_TIM_Base_MspInit+0x6c>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2105      	movs	r1, #5
 800322e:	201c      	movs	r0, #28
 8003230:	f000 faf9 	bl	8003826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003234:	201c      	movs	r0, #28
 8003236:	f000 fb12 	bl	800385e <HAL_NVIC_EnableIRQ>
}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 0310 	add.w	r3, r7, #16
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a10      	ldr	r2, [pc, #64]	; (80032a8 <HAL_TIM_MspPostInit+0x5c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d118      	bne.n	800329e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_TIM_MspPostInit+0x60>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <HAL_TIM_MspPostInit+0x60>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	6193      	str	r3, [r2, #24]
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <HAL_TIM_MspPostInit+0x60>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003288:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2302      	movs	r3, #2
 8003290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003292:	f107 0310 	add.w	r3, r7, #16
 8003296:	4619      	mov	r1, r3
 8003298:	4805      	ldr	r0, [pc, #20]	; (80032b0 <HAL_TIM_MspPostInit+0x64>)
 800329a:	f000 fb9f 	bl	80039dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800329e:	bf00      	nop
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40012c00 	.word	0x40012c00
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40010800 	.word	0x40010800

080032b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 0310 	add.w	r3, r7, #16
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a20      	ldr	r2, [pc, #128]	; (8003350 <HAL_UART_MspInit+0x9c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d139      	bne.n	8003348 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80032d4:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <HAL_UART_MspInit+0xa0>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <HAL_UART_MspInit+0xa0>)
 80032da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032de:	61d3      	str	r3, [r2, #28]
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_UART_MspInit+0xa0>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_UART_MspInit+0xa0>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	4a18      	ldr	r2, [pc, #96]	; (8003354 <HAL_UART_MspInit+0xa0>)
 80032f2:	f043 0308 	orr.w	r3, r3, #8
 80032f6:	6193      	str	r3, [r2, #24]
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_UART_MspInit+0xa0>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003308:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800330e:	2303      	movs	r3, #3
 8003310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003312:	f107 0310 	add.w	r3, r7, #16
 8003316:	4619      	mov	r1, r3
 8003318:	480f      	ldr	r0, [pc, #60]	; (8003358 <HAL_UART_MspInit+0xa4>)
 800331a:	f000 fb5f 	bl	80039dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800331e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332c:	f107 0310 	add.w	r3, r7, #16
 8003330:	4619      	mov	r1, r3
 8003332:	4809      	ldr	r0, [pc, #36]	; (8003358 <HAL_UART_MspInit+0xa4>)
 8003334:	f000 fb52 	bl	80039dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003338:	2200      	movs	r2, #0
 800333a:	2105      	movs	r1, #5
 800333c:	2027      	movs	r0, #39	; 0x27
 800333e:	f000 fa72 	bl	8003826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003342:	2027      	movs	r0, #39	; 0x27
 8003344:	f000 fa8b 	bl	800385e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003348:	bf00      	nop
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40004800 	.word	0x40004800
 8003354:	40021000 	.word	0x40021000
 8003358:	40010c00 	.word	0x40010c00

0800335c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08c      	sub	sp, #48	; 0x30
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800336c:	2200      	movs	r2, #0
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	201e      	movs	r0, #30
 8003372:	f000 fa58 	bl	8003826 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003376:	201e      	movs	r0, #30
 8003378:	f000 fa71 	bl	800385e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800337c:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <HAL_InitTick+0xa0>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <HAL_InitTick+0xa0>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	61d3      	str	r3, [r2, #28]
 8003388:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <HAL_InitTick+0xa0>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003394:	f107 0210 	add.w	r2, r7, #16
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	4611      	mov	r1, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	f001 f8cc 	bl	800453c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80033a4:	f001 f8a2 	bl	80044ec <HAL_RCC_GetPCLK1Freq>
 80033a8:	4603      	mov	r3, r0
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	4a13      	ldr	r2, [pc, #76]	; (8003400 <HAL_InitTick+0xa4>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0c9b      	lsrs	r3, r3, #18
 80033b8:	3b01      	subs	r3, #1
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_InitTick+0xa8>)
 80033be:	4a12      	ldr	r2, [pc, #72]	; (8003408 <HAL_InitTick+0xac>)
 80033c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_InitTick+0xa8>)
 80033c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033c8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80033ca:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <HAL_InitTick+0xa8>)
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_InitTick+0xa8>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_InitTick+0xa8>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80033dc:	4809      	ldr	r0, [pc, #36]	; (8003404 <HAL_InitTick+0xa8>)
 80033de:	f001 f8fb 	bl	80045d8 <HAL_TIM_Base_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d104      	bne.n	80033f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80033e8:	4806      	ldr	r0, [pc, #24]	; (8003404 <HAL_InitTick+0xa8>)
 80033ea:	f001 f945 	bl	8004678 <HAL_TIM_Base_Start_IT>
 80033ee:	4603      	mov	r3, r0
 80033f0:	e000      	b.n	80033f4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3730      	adds	r7, #48	; 0x30
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	431bde83 	.word	0x431bde83
 8003404:	20001e34 	.word	0x20001e34
 8003408:	40000800 	.word	0x40000800

0800340c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003410:	e7fe      	b.n	8003410 <NMI_Handler+0x4>

08003412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003416:	e7fe      	b.n	8003416 <HardFault_Handler+0x4>

08003418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800341c:	e7fe      	b.n	800341c <MemManage_Handler+0x4>

0800341e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003422:	e7fe      	b.n	8003422 <BusFault_Handler+0x4>

08003424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003428:	e7fe      	b.n	8003428 <UsageFault_Handler+0x4>

0800342a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D01_Encoder_Pin);
 800343a:	2002      	movs	r0, #2
 800343c:	f000 fc6a 	bl	8003d14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}

08003444 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <TIM2_IRQHandler+0x10>)
 800344a:	f001 fa61 	bl	8004910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20001de0 	.word	0x20001de0

08003458 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <TIM4_IRQHandler+0x10>)
 800345e:	f001 fa57 	bl	8004910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20001e34 	.word	0x20001e34

0800346c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <USART3_IRQHandler+0x10>)
 8003472:	f002 f98b 	bl	800578c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20001d48 	.word	0x20001d48

08003480 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
	return 1;
 8003484:	2301      	movs	r3, #1
}
 8003486:	4618      	mov	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr

0800348e <_kill>:

int _kill(int pid, int sig)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003498:	f006 fb30 	bl	8009afc <__errno>
 800349c:	4603      	mov	r3, r0
 800349e:	2216      	movs	r2, #22
 80034a0:	601a      	str	r2, [r3, #0]
	return -1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <_exit>:

void _exit (int status)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034b6:	f04f 31ff 	mov.w	r1, #4294967295
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffe7 	bl	800348e <_kill>
	while (1) {}		/* Make sure we hang here */
 80034c0:	e7fe      	b.n	80034c0 <_exit+0x12>

080034c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e00a      	b.n	80034ea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034d4:	f3af 8000 	nop.w
 80034d8:	4601      	mov	r1, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	60ba      	str	r2, [r7, #8]
 80034e0:	b2ca      	uxtb	r2, r1
 80034e2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	3301      	adds	r3, #1
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	dbf0      	blt.n	80034d4 <_read+0x12>
	}

return len;
 80034f2:	687b      	ldr	r3, [r7, #4]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e009      	b.n	8003522 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	60ba      	str	r2, [r7, #8]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3301      	adds	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	429a      	cmp	r2, r3
 8003528:	dbf1      	blt.n	800350e <_write+0x12>
	}
	return len;
 800352a:	687b      	ldr	r3, [r7, #4]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <_close>:

int _close(int file)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	return -1;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800355a:	605a      	str	r2, [r3, #4]
	return 0;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <_isatty>:

int _isatty(int file)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	return 1;
 8003570:	2301      	movs	r3, #1
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
	return 0;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <_sbrk+0x5c>)
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <_sbrk+0x60>)
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <_sbrk+0x64>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <_sbrk+0x64>)
 80035b2:	4a12      	ldr	r2, [pc, #72]	; (80035fc <_sbrk+0x68>)
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <_sbrk+0x64>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d207      	bcs.n	80035d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c4:	f006 fa9a 	bl	8009afc <__errno>
 80035c8:	4603      	mov	r3, r0
 80035ca:	220c      	movs	r2, #12
 80035cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295
 80035d2:	e009      	b.n	80035e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d4:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <_sbrk+0x64>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <_sbrk+0x64>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <_sbrk+0x64>)
 80035e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20005000 	.word	0x20005000
 80035f4:	00000400 	.word	0x00000400
 80035f8:	20000228 	.word	0x20000228
 80035fc:	20001ed0 	.word	0x20001ed0

08003600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800360c:	480c      	ldr	r0, [pc, #48]	; (8003640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800360e:	490d      	ldr	r1, [pc, #52]	; (8003644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003610:	4a0d      	ldr	r2, [pc, #52]	; (8003648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003614:	e002      	b.n	800361c <LoopCopyDataInit>

08003616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800361a:	3304      	adds	r3, #4

0800361c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800361c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800361e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003620:	d3f9      	bcc.n	8003616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003624:	4c0a      	ldr	r4, [pc, #40]	; (8003650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003628:	e001      	b.n	800362e <LoopFillZerobss>

0800362a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800362a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800362c:	3204      	adds	r2, #4

0800362e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800362e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003630:	d3fb      	bcc.n	800362a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003632:	f7ff ffe5 	bl	8003600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003636:	f006 fb5d 	bl	8009cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800363a:	f7ff f92d 	bl	8002898 <main>
  bx lr
 800363e:	4770      	bx	lr
  ldr r0, =_sdata
 8003640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003644:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003648:	0800cba4 	.word	0x0800cba4
  ldr r2, =_sbss
 800364c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003650:	20001ed0 	.word	0x20001ed0

08003654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003654:	e7fe      	b.n	8003654 <ADC1_2_IRQHandler>
	...

08003658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_Init+0x28>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a07      	ldr	r2, [pc, #28]	; (8003680 <HAL_Init+0x28>)
 8003662:	f043 0310 	orr.w	r3, r3, #16
 8003666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003668:	2003      	movs	r0, #3
 800366a:	f000 f8d1 	bl	8003810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800366e:	200f      	movs	r0, #15
 8003670:	f7ff fe74 	bl	800335c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003674:	f7ff fd7a 	bl	800316c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40022000 	.word	0x40022000

08003684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_IncTick+0x1c>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_IncTick+0x20>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4413      	add	r3, r2
 8003694:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <HAL_IncTick+0x20>)
 8003696:	6013      	str	r3, [r2, #0]
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	20000008 	.word	0x20000008
 80036a4:	20001e7c 	.word	0x20001e7c

080036a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return uwTick;
 80036ac:	4b02      	ldr	r3, [pc, #8]	; (80036b8 <HAL_GetTick+0x10>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	20001e7c 	.word	0x20001e7c

080036bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <__NVIC_SetPriorityGrouping+0x44>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036d8:	4013      	ands	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ee:	4a04      	ldr	r2, [pc, #16]	; (8003700 <__NVIC_SetPriorityGrouping+0x44>)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	60d3      	str	r3, [r2, #12]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <__NVIC_GetPriorityGrouping+0x18>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	f003 0307 	and.w	r3, r3, #7
}
 8003712:	4618      	mov	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	2b00      	cmp	r3, #0
 8003730:	db0b      	blt.n	800374a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	f003 021f 	and.w	r2, r3, #31
 8003738:	4906      	ldr	r1, [pc, #24]	; (8003754 <__NVIC_EnableIRQ+0x34>)
 800373a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2001      	movs	r0, #1
 8003742:	fa00 f202 	lsl.w	r2, r0, r2
 8003746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	e000e100 	.word	0xe000e100

08003758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	2b00      	cmp	r3, #0
 800376a:	db0a      	blt.n	8003782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	490c      	ldr	r1, [pc, #48]	; (80037a4 <__NVIC_SetPriority+0x4c>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	0112      	lsls	r2, r2, #4
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	440b      	add	r3, r1
 800377c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003780:	e00a      	b.n	8003798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4908      	ldr	r1, [pc, #32]	; (80037a8 <__NVIC_SetPriority+0x50>)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	3b04      	subs	r3, #4
 8003790:	0112      	lsls	r2, r2, #4
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	440b      	add	r3, r1
 8003796:	761a      	strb	r2, [r3, #24]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e100 	.word	0xe000e100
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	; 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f1c3 0307 	rsb	r3, r3, #7
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	bf28      	it	cs
 80037ca:	2304      	movcs	r3, #4
 80037cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d902      	bls.n	80037dc <NVIC_EncodePriority+0x30>
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3b03      	subs	r3, #3
 80037da:	e000      	b.n	80037de <NVIC_EncodePriority+0x32>
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	f04f 32ff 	mov.w	r2, #4294967295
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	401a      	ands	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f4:	f04f 31ff 	mov.w	r1, #4294967295
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	43d9      	mvns	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003804:	4313      	orrs	r3, r2
         );
}
 8003806:	4618      	mov	r0, r3
 8003808:	3724      	adds	r7, #36	; 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr

08003810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ff4f 	bl	80036bc <__NVIC_SetPriorityGrouping>
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003826:	b580      	push	{r7, lr}
 8003828:	b086      	sub	sp, #24
 800382a:	af00      	add	r7, sp, #0
 800382c:	4603      	mov	r3, r0
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003838:	f7ff ff64 	bl	8003704 <__NVIC_GetPriorityGrouping>
 800383c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	6978      	ldr	r0, [r7, #20]
 8003844:	f7ff ffb2 	bl	80037ac <NVIC_EncodePriority>
 8003848:	4602      	mov	r2, r0
 800384a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ff81 	bl	8003758 <__NVIC_SetPriority>
}
 8003856:	bf00      	nop
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	4603      	mov	r3, r0
 8003866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff57 	bl	8003720 <__NVIC_EnableIRQ>
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800388c:	2b02      	cmp	r3, #2
 800388e:	d008      	beq.n	80038a2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2204      	movs	r2, #4
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e020      	b.n	80038e4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 020e 	bic.w	r2, r2, #14
 80038b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003902:	2b02      	cmp	r3, #2
 8003904:	d005      	beq.n	8003912 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2204      	movs	r2, #4
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	e051      	b.n	80039b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 020e 	bic.w	r2, r2, #14
 8003920:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <HAL_DMA_Abort_IT+0xd0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d029      	beq.n	8003990 <HAL_DMA_Abort_IT+0xa0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <HAL_DMA_Abort_IT+0xd4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_DMA_Abort_IT+0x9c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_DMA_Abort_IT+0xd8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01a      	beq.n	8003986 <HAL_DMA_Abort_IT+0x96>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_DMA_Abort_IT+0xdc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d012      	beq.n	8003980 <HAL_DMA_Abort_IT+0x90>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <HAL_DMA_Abort_IT+0xe0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00a      	beq.n	800397a <HAL_DMA_Abort_IT+0x8a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_DMA_Abort_IT+0xe4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d102      	bne.n	8003974 <HAL_DMA_Abort_IT+0x84>
 800396e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003972:	e00e      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 8003974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003978:	e00b      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 800397a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800397e:	e008      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 8003980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003984:	e005      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 8003986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800398a:	e002      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 800398c:	2310      	movs	r3, #16
 800398e:	e000      	b.n	8003992 <HAL_DMA_Abort_IT+0xa2>
 8003990:	2301      	movs	r3, #1
 8003992:	4a11      	ldr	r2, [pc, #68]	; (80039d8 <HAL_DMA_Abort_IT+0xe8>)
 8003994:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
    } 
  }
  return status;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40020008 	.word	0x40020008
 80039c4:	4002001c 	.word	0x4002001c
 80039c8:	40020030 	.word	0x40020030
 80039cc:	40020044 	.word	0x40020044
 80039d0:	40020058 	.word	0x40020058
 80039d4:	4002006c 	.word	0x4002006c
 80039d8:	40020000 	.word	0x40020000

080039dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039dc:	b480      	push	{r7}
 80039de:	b08b      	sub	sp, #44	; 0x2c
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039ea:	2300      	movs	r3, #0
 80039ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ee:	e169      	b.n	8003cc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039f0:	2201      	movs	r2, #1
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	f040 8158 	bne.w	8003cbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4a9a      	ldr	r2, [pc, #616]	; (8003c7c <HAL_GPIO_Init+0x2a0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d05e      	beq.n	8003ad6 <HAL_GPIO_Init+0xfa>
 8003a18:	4a98      	ldr	r2, [pc, #608]	; (8003c7c <HAL_GPIO_Init+0x2a0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d875      	bhi.n	8003b0a <HAL_GPIO_Init+0x12e>
 8003a1e:	4a98      	ldr	r2, [pc, #608]	; (8003c80 <HAL_GPIO_Init+0x2a4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d058      	beq.n	8003ad6 <HAL_GPIO_Init+0xfa>
 8003a24:	4a96      	ldr	r2, [pc, #600]	; (8003c80 <HAL_GPIO_Init+0x2a4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d86f      	bhi.n	8003b0a <HAL_GPIO_Init+0x12e>
 8003a2a:	4a96      	ldr	r2, [pc, #600]	; (8003c84 <HAL_GPIO_Init+0x2a8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d052      	beq.n	8003ad6 <HAL_GPIO_Init+0xfa>
 8003a30:	4a94      	ldr	r2, [pc, #592]	; (8003c84 <HAL_GPIO_Init+0x2a8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d869      	bhi.n	8003b0a <HAL_GPIO_Init+0x12e>
 8003a36:	4a94      	ldr	r2, [pc, #592]	; (8003c88 <HAL_GPIO_Init+0x2ac>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d04c      	beq.n	8003ad6 <HAL_GPIO_Init+0xfa>
 8003a3c:	4a92      	ldr	r2, [pc, #584]	; (8003c88 <HAL_GPIO_Init+0x2ac>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d863      	bhi.n	8003b0a <HAL_GPIO_Init+0x12e>
 8003a42:	4a92      	ldr	r2, [pc, #584]	; (8003c8c <HAL_GPIO_Init+0x2b0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d046      	beq.n	8003ad6 <HAL_GPIO_Init+0xfa>
 8003a48:	4a90      	ldr	r2, [pc, #576]	; (8003c8c <HAL_GPIO_Init+0x2b0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d85d      	bhi.n	8003b0a <HAL_GPIO_Init+0x12e>
 8003a4e:	2b12      	cmp	r3, #18
 8003a50:	d82a      	bhi.n	8003aa8 <HAL_GPIO_Init+0xcc>
 8003a52:	2b12      	cmp	r3, #18
 8003a54:	d859      	bhi.n	8003b0a <HAL_GPIO_Init+0x12e>
 8003a56:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <HAL_GPIO_Init+0x80>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003ad7 	.word	0x08003ad7
 8003a60:	08003ab1 	.word	0x08003ab1
 8003a64:	08003ac3 	.word	0x08003ac3
 8003a68:	08003b05 	.word	0x08003b05
 8003a6c:	08003b0b 	.word	0x08003b0b
 8003a70:	08003b0b 	.word	0x08003b0b
 8003a74:	08003b0b 	.word	0x08003b0b
 8003a78:	08003b0b 	.word	0x08003b0b
 8003a7c:	08003b0b 	.word	0x08003b0b
 8003a80:	08003b0b 	.word	0x08003b0b
 8003a84:	08003b0b 	.word	0x08003b0b
 8003a88:	08003b0b 	.word	0x08003b0b
 8003a8c:	08003b0b 	.word	0x08003b0b
 8003a90:	08003b0b 	.word	0x08003b0b
 8003a94:	08003b0b 	.word	0x08003b0b
 8003a98:	08003b0b 	.word	0x08003b0b
 8003a9c:	08003b0b 	.word	0x08003b0b
 8003aa0:	08003ab9 	.word	0x08003ab9
 8003aa4:	08003acd 	.word	0x08003acd
 8003aa8:	4a79      	ldr	r2, [pc, #484]	; (8003c90 <HAL_GPIO_Init+0x2b4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003aae:	e02c      	b.n	8003b0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	623b      	str	r3, [r7, #32]
          break;
 8003ab6:	e029      	b.n	8003b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	3304      	adds	r3, #4
 8003abe:	623b      	str	r3, [r7, #32]
          break;
 8003ac0:	e024      	b.n	8003b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	623b      	str	r3, [r7, #32]
          break;
 8003aca:	e01f      	b.n	8003b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	623b      	str	r3, [r7, #32]
          break;
 8003ad4:	e01a      	b.n	8003b0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ade:	2304      	movs	r3, #4
 8003ae0:	623b      	str	r3, [r7, #32]
          break;
 8003ae2:	e013      	b.n	8003b0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003aec:	2308      	movs	r3, #8
 8003aee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	611a      	str	r2, [r3, #16]
          break;
 8003af6:	e009      	b.n	8003b0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003af8:	2308      	movs	r3, #8
 8003afa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	615a      	str	r2, [r3, #20]
          break;
 8003b02:	e003      	b.n	8003b0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b04:	2300      	movs	r3, #0
 8003b06:	623b      	str	r3, [r7, #32]
          break;
 8003b08:	e000      	b.n	8003b0c <HAL_GPIO_Init+0x130>
          break;
 8003b0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2bff      	cmp	r3, #255	; 0xff
 8003b10:	d801      	bhi.n	8003b16 <HAL_GPIO_Init+0x13a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	e001      	b.n	8003b1a <HAL_GPIO_Init+0x13e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2bff      	cmp	r3, #255	; 0xff
 8003b20:	d802      	bhi.n	8003b28 <HAL_GPIO_Init+0x14c>
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	e002      	b.n	8003b2e <HAL_GPIO_Init+0x152>
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	3b08      	subs	r3, #8
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	210f      	movs	r1, #15
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	401a      	ands	r2, r3
 8003b40:	6a39      	ldr	r1, [r7, #32]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80b1 	beq.w	8003cbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b5c:	4b4d      	ldr	r3, [pc, #308]	; (8003c94 <HAL_GPIO_Init+0x2b8>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	4a4c      	ldr	r2, [pc, #304]	; (8003c94 <HAL_GPIO_Init+0x2b8>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	6193      	str	r3, [r2, #24]
 8003b68:	4b4a      	ldr	r3, [pc, #296]	; (8003c94 <HAL_GPIO_Init+0x2b8>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b74:	4a48      	ldr	r2, [pc, #288]	; (8003c98 <HAL_GPIO_Init+0x2bc>)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	220f      	movs	r2, #15
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4013      	ands	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a40      	ldr	r2, [pc, #256]	; (8003c9c <HAL_GPIO_Init+0x2c0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <HAL_GPIO_Init+0x1ec>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a3f      	ldr	r2, [pc, #252]	; (8003ca0 <HAL_GPIO_Init+0x2c4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_GPIO_Init+0x1e8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3e      	ldr	r2, [pc, #248]	; (8003ca4 <HAL_GPIO_Init+0x2c8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <HAL_GPIO_Init+0x1e4>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a3d      	ldr	r2, [pc, #244]	; (8003ca8 <HAL_GPIO_Init+0x2cc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_GPIO_Init+0x1e0>
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e006      	b.n	8003bca <HAL_GPIO_Init+0x1ee>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	e004      	b.n	8003bca <HAL_GPIO_Init+0x1ee>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e002      	b.n	8003bca <HAL_GPIO_Init+0x1ee>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <HAL_GPIO_Init+0x1ee>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bcc:	f002 0203 	and.w	r2, r2, #3
 8003bd0:	0092      	lsls	r2, r2, #2
 8003bd2:	4093      	lsls	r3, r2
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bda:	492f      	ldr	r1, [pc, #188]	; (8003c98 <HAL_GPIO_Init+0x2bc>)
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	089b      	lsrs	r3, r3, #2
 8003be0:	3302      	adds	r3, #2
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d006      	beq.n	8003c02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	492c      	ldr	r1, [pc, #176]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	600b      	str	r3, [r1, #0]
 8003c00:	e006      	b.n	8003c10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c02:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	4928      	ldr	r1, [pc, #160]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d006      	beq.n	8003c2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c1c:	4b23      	ldr	r3, [pc, #140]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	4922      	ldr	r1, [pc, #136]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
 8003c28:	e006      	b.n	8003c38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	491e      	ldr	r1, [pc, #120]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d006      	beq.n	8003c52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	4918      	ldr	r1, [pc, #96]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	608b      	str	r3, [r1, #8]
 8003c50:	e006      	b.n	8003c60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c52:	4b16      	ldr	r3, [pc, #88]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	4914      	ldr	r1, [pc, #80]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d021      	beq.n	8003cb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	490e      	ldr	r1, [pc, #56]	; (8003cac <HAL_GPIO_Init+0x2d0>)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60cb      	str	r3, [r1, #12]
 8003c78:	e021      	b.n	8003cbe <HAL_GPIO_Init+0x2e2>
 8003c7a:	bf00      	nop
 8003c7c:	10320000 	.word	0x10320000
 8003c80:	10310000 	.word	0x10310000
 8003c84:	10220000 	.word	0x10220000
 8003c88:	10210000 	.word	0x10210000
 8003c8c:	10120000 	.word	0x10120000
 8003c90:	10110000 	.word	0x10110000
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	40010800 	.word	0x40010800
 8003ca0:	40010c00 	.word	0x40010c00
 8003ca4:	40011000 	.word	0x40011000
 8003ca8:	40011400 	.word	0x40011400
 8003cac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	4909      	ldr	r1, [pc, #36]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	fa22 f303 	lsr.w	r3, r2, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f47f ae8e 	bne.w	80039f0 <HAL_GPIO_Init+0x14>
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	372c      	adds	r7, #44	; 0x2c
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	40010400 	.word	0x40010400

08003ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cf4:	787b      	ldrb	r3, [r7, #1]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cfa:	887a      	ldrh	r2, [r7, #2]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d00:	e003      	b.n	8003d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	041a      	lsls	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	611a      	str	r2, [r3, #16]
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d006      	beq.n	8003d38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d2a:	4a05      	ldr	r2, [pc, #20]	; (8003d40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe fd88 	bl	8002848 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40010400 	.word	0x40010400

08003d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e26c      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8087 	beq.w	8003e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d64:	4b92      	ldr	r3, [pc, #584]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d00c      	beq.n	8003d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d70:	4b8f      	ldr	r3, [pc, #572]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d112      	bne.n	8003da2 <HAL_RCC_OscConfig+0x5e>
 8003d7c:	4b8c      	ldr	r3, [pc, #560]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d10b      	bne.n	8003da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8a:	4b89      	ldr	r3, [pc, #548]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d06c      	beq.n	8003e70 <HAL_RCC_OscConfig+0x12c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d168      	bne.n	8003e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e246      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x76>
 8003dac:	4b80      	ldr	r3, [pc, #512]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a7f      	ldr	r2, [pc, #508]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	e02e      	b.n	8003e18 <HAL_RCC_OscConfig+0xd4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x98>
 8003dc2:	4b7b      	ldr	r3, [pc, #492]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7a      	ldr	r2, [pc, #488]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b78      	ldr	r3, [pc, #480]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a77      	ldr	r2, [pc, #476]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e01d      	b.n	8003e18 <HAL_RCC_OscConfig+0xd4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0xbc>
 8003de6:	4b72      	ldr	r3, [pc, #456]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a71      	ldr	r2, [pc, #452]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b6f      	ldr	r3, [pc, #444]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a6e      	ldr	r2, [pc, #440]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0xd4>
 8003e00:	4b6b      	ldr	r3, [pc, #428]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a6a      	ldr	r2, [pc, #424]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b68      	ldr	r3, [pc, #416]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a67      	ldr	r2, [pc, #412]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d013      	beq.n	8003e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7ff fc42 	bl	80036a8 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e28:	f7ff fc3e 	bl	80036a8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	; 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e1fa      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b5d      	ldr	r3, [pc, #372]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0xe4>
 8003e46:	e014      	b.n	8003e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7ff fc2e 	bl	80036a8 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e50:	f7ff fc2a 	bl	80036a8 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	; 0x64
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e1e6      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e62:	4b53      	ldr	r3, [pc, #332]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x10c>
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d063      	beq.n	8003f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e7e:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e8a:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d11c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x18c>
 8003e96:	4b46      	ldr	r3, [pc, #280]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d116      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_RCC_OscConfig+0x176>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d001      	beq.n	8003eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e1ba      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eba:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4939      	ldr	r1, [pc, #228]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	e03a      	b.n	8003f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed8:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <HAL_RCC_OscConfig+0x270>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7ff fbe3 	bl	80036a8 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee6:	f7ff fbdf 	bl	80036a8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e19b      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f04:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4927      	ldr	r1, [pc, #156]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
 8003f18:	e015      	b.n	8003f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1a:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <HAL_RCC_OscConfig+0x270>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7ff fbc2 	bl	80036a8 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f28:	f7ff fbbe 	bl	80036a8 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e17a      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d03a      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d019      	beq.n	8003f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5a:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f60:	f7ff fba2 	bl	80036a8 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f68:	f7ff fb9e 	bl	80036a8 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e15a      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f86:	2001      	movs	r0, #1
 8003f88:	f000 fb08 	bl	800459c <RCC_Delay>
 8003f8c:	e01c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_RCC_OscConfig+0x274>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f94:	f7ff fb88 	bl	80036a8 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9a:	e00f      	b.n	8003fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7ff fb84 	bl	80036a8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d908      	bls.n	8003fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e140      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	42420000 	.word	0x42420000
 8003fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fbc:	4b9e      	ldr	r3, [pc, #632]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e9      	bne.n	8003f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80a6 	beq.w	8004122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fda:	4b97      	ldr	r3, [pc, #604]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe6:	4b94      	ldr	r3, [pc, #592]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	4a93      	ldr	r2, [pc, #588]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8003fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	61d3      	str	r3, [r2, #28]
 8003ff2:	4b91      	ldr	r3, [pc, #580]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004002:	4b8e      	ldr	r3, [pc, #568]	; (800423c <HAL_RCC_OscConfig+0x4f8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d118      	bne.n	8004040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800400e:	4b8b      	ldr	r3, [pc, #556]	; (800423c <HAL_RCC_OscConfig+0x4f8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a8a      	ldr	r2, [pc, #552]	; (800423c <HAL_RCC_OscConfig+0x4f8>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401a:	f7ff fb45 	bl	80036a8 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004022:	f7ff fb41 	bl	80036a8 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b64      	cmp	r3, #100	; 0x64
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0fd      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004034:	4b81      	ldr	r3, [pc, #516]	; (800423c <HAL_RCC_OscConfig+0x4f8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x312>
 8004048:	4b7b      	ldr	r3, [pc, #492]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4a7a      	ldr	r2, [pc, #488]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6213      	str	r3, [r2, #32]
 8004054:	e02d      	b.n	80040b2 <HAL_RCC_OscConfig+0x36e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10c      	bne.n	8004078 <HAL_RCC_OscConfig+0x334>
 800405e:	4b76      	ldr	r3, [pc, #472]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	4a75      	ldr	r2, [pc, #468]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	6213      	str	r3, [r2, #32]
 800406a:	4b73      	ldr	r3, [pc, #460]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	4a72      	ldr	r2, [pc, #456]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8004070:	f023 0304 	bic.w	r3, r3, #4
 8004074:	6213      	str	r3, [r2, #32]
 8004076:	e01c      	b.n	80040b2 <HAL_RCC_OscConfig+0x36e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b05      	cmp	r3, #5
 800407e:	d10c      	bne.n	800409a <HAL_RCC_OscConfig+0x356>
 8004080:	4b6d      	ldr	r3, [pc, #436]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4a6c      	ldr	r2, [pc, #432]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	6213      	str	r3, [r2, #32]
 800408c:	4b6a      	ldr	r3, [pc, #424]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a69      	ldr	r2, [pc, #420]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6213      	str	r3, [r2, #32]
 8004098:	e00b      	b.n	80040b2 <HAL_RCC_OscConfig+0x36e>
 800409a:	4b67      	ldr	r3, [pc, #412]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	4a66      	ldr	r2, [pc, #408]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	6213      	str	r3, [r2, #32]
 80040a6:	4b64      	ldr	r3, [pc, #400]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4a63      	ldr	r2, [pc, #396]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 80040ac:	f023 0304 	bic.w	r3, r3, #4
 80040b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d015      	beq.n	80040e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ba:	f7ff faf5 	bl	80036a8 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7ff faf1 	bl	80036a8 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0ab      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d8:	4b57      	ldr	r3, [pc, #348]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ee      	beq.n	80040c2 <HAL_RCC_OscConfig+0x37e>
 80040e4:	e014      	b.n	8004110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e6:	f7ff fadf 	bl	80036a8 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7ff fadb 	bl	80036a8 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e095      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004104:	4b4c      	ldr	r3, [pc, #304]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ee      	bne.n	80040ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004116:	4b48      	ldr	r3, [pc, #288]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4a47      	ldr	r2, [pc, #284]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 800411c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8081 	beq.w	800422e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800412c:	4b42      	ldr	r3, [pc, #264]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b08      	cmp	r3, #8
 8004136:	d061      	beq.n	80041fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d146      	bne.n	80041ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004140:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <HAL_RCC_OscConfig+0x4fc>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7ff faaf 	bl	80036a8 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414e:	f7ff faab 	bl	80036a8 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e067      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004160:	4b35      	ldr	r3, [pc, #212]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004174:	d108      	bne.n	8004188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004176:	4b30      	ldr	r3, [pc, #192]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	492d      	ldr	r1, [pc, #180]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004188:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a19      	ldr	r1, [r3, #32]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	430b      	orrs	r3, r1
 800419a:	4927      	ldr	r1, [pc, #156]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 800419c:	4313      	orrs	r3, r2
 800419e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a0:	4b27      	ldr	r3, [pc, #156]	; (8004240 <HAL_RCC_OscConfig+0x4fc>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a6:	f7ff fa7f 	bl	80036a8 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ae:	f7ff fa7b 	bl	80036a8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e037      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041c0:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x46a>
 80041cc:	e02f      	b.n	800422e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ce:	4b1c      	ldr	r3, [pc, #112]	; (8004240 <HAL_RCC_OscConfig+0x4fc>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7ff fa68 	bl	80036a8 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7ff fa64 	bl	80036a8 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e020      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x498>
 80041fa:	e018      	b.n	800422e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e013      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_OscConfig+0x4f4>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	429a      	cmp	r2, r3
 800421a:	d106      	bne.n	800422a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000
 800423c:	40007000 	.word	0x40007000
 8004240:	42420060 	.word	0x42420060

08004244 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0d0      	b.n	80043fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004258:	4b6a      	ldr	r3, [pc, #424]	; (8004404 <HAL_RCC_ClockConfig+0x1c0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d910      	bls.n	8004288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b67      	ldr	r3, [pc, #412]	; (8004404 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 0207 	bic.w	r2, r3, #7
 800426e:	4965      	ldr	r1, [pc, #404]	; (8004404 <HAL_RCC_ClockConfig+0x1c0>)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b63      	ldr	r3, [pc, #396]	; (8004404 <HAL_RCC_ClockConfig+0x1c0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0b8      	b.n	80043fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d020      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a0:	4b59      	ldr	r3, [pc, #356]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4a58      	ldr	r2, [pc, #352]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b8:	4b53      	ldr	r3, [pc, #332]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a52      	ldr	r2, [pc, #328]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c4:	4b50      	ldr	r3, [pc, #320]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	494d      	ldr	r1, [pc, #308]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d040      	beq.n	8004364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d115      	bne.n	8004322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e07f      	b.n	80043fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004302:	4b41      	ldr	r3, [pc, #260]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e073      	b.n	80043fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004312:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e06b      	b.n	80043fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004322:	4b39      	ldr	r3, [pc, #228]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f023 0203 	bic.w	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4936      	ldr	r1, [pc, #216]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004334:	f7ff f9b8 	bl	80036a8 <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433a:	e00a      	b.n	8004352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800433c:	f7ff f9b4 	bl	80036a8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e053      	b.n	80043fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 020c 	and.w	r2, r3, #12
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	429a      	cmp	r2, r3
 8004362:	d1eb      	bne.n	800433c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_RCC_ClockConfig+0x1c0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d210      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RCC_ClockConfig+0x1c0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 0207 	bic.w	r2, r3, #7
 800437a:	4922      	ldr	r1, [pc, #136]	; (8004404 <HAL_RCC_ClockConfig+0x1c0>)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b20      	ldr	r3, [pc, #128]	; (8004404 <HAL_RCC_ClockConfig+0x1c0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d001      	beq.n	8004394 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e032      	b.n	80043fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a0:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4916      	ldr	r1, [pc, #88]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	490e      	ldr	r1, [pc, #56]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043d2:	f000 f821 	bl	8004418 <HAL_RCC_GetSysClockFreq>
 80043d6:	4602      	mov	r2, r0
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	490a      	ldr	r1, [pc, #40]	; (800440c <HAL_RCC_ClockConfig+0x1c8>)
 80043e4:	5ccb      	ldrb	r3, [r1, r3]
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <HAL_RCC_ClockConfig+0x1cc>)
 80043ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_ClockConfig+0x1d0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe ffb2 	bl	800335c <HAL_InitTick>

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40022000 	.word	0x40022000
 8004408:	40021000 	.word	0x40021000
 800440c:	0800c7a4 	.word	0x0800c7a4
 8004410:	20000000 	.word	0x20000000
 8004414:	20000004 	.word	0x20000004

08004418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004418:	b490      	push	{r4, r7}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800441e:	4b2a      	ldr	r3, [pc, #168]	; (80044c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004420:	1d3c      	adds	r4, r7, #4
 8004422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004428:	f240 2301 	movw	r3, #513	; 0x201
 800442c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	2300      	movs	r3, #0
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004442:	4b22      	ldr	r3, [pc, #136]	; (80044cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b04      	cmp	r3, #4
 8004450:	d002      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x40>
 8004452:	2b08      	cmp	r3, #8
 8004454:	d003      	beq.n	800445e <HAL_RCC_GetSysClockFreq+0x46>
 8004456:	e02d      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004458:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800445a:	623b      	str	r3, [r7, #32]
      break;
 800445c:	e02d      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	0c9b      	lsrs	r3, r3, #18
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800446a:	4413      	add	r3, r2
 800446c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004470:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800447c:	4b13      	ldr	r3, [pc, #76]	; (80044cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	0c5b      	lsrs	r3, r3, #17
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800448a:	4413      	add	r3, r2
 800448c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004490:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	4a0e      	ldr	r2, [pc, #56]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004496:	fb02 f203 	mul.w	r2, r2, r3
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
 80044a2:	e004      	b.n	80044ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	4a0b      	ldr	r2, [pc, #44]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	623b      	str	r3, [r7, #32]
      break;
 80044b2:	e002      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044b6:	623b      	str	r3, [r7, #32]
      break;
 80044b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ba:	6a3b      	ldr	r3, [r7, #32]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3728      	adds	r7, #40	; 0x28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc90      	pop	{r4, r7}
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	0800c688 	.word	0x0800c688
 80044cc:	40021000 	.word	0x40021000
 80044d0:	007a1200 	.word	0x007a1200
 80044d4:	003d0900 	.word	0x003d0900

080044d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044dc:	4b02      	ldr	r3, [pc, #8]	; (80044e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	20000000 	.word	0x20000000

080044ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044f0:	f7ff fff2 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80044f4:	4602      	mov	r2, r0
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <HAL_RCC_GetPCLK1Freq+0x20>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	4903      	ldr	r1, [pc, #12]	; (8004510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004502:	5ccb      	ldrb	r3, [r1, r3]
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004508:	4618      	mov	r0, r3
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40021000 	.word	0x40021000
 8004510:	0800c7b4 	.word	0x0800c7b4

08004514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004518:	f7ff ffde 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	0adb      	lsrs	r3, r3, #11
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4903      	ldr	r1, [pc, #12]	; (8004538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000
 8004538:	0800c7b4 	.word	0x0800c7b4

0800453c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	220f      	movs	r2, #15
 800454a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800454c:	4b11      	ldr	r3, [pc, #68]	; (8004594 <HAL_RCC_GetClockConfig+0x58>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0203 	and.w	r2, r3, #3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_RCC_GetClockConfig+0x58>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_GetClockConfig+0x58>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004570:	4b08      	ldr	r3, [pc, #32]	; (8004594 <HAL_RCC_GetClockConfig+0x58>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	08db      	lsrs	r3, r3, #3
 8004576:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCC_GetClockConfig+0x5c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0207 	and.w	r2, r3, #7
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	40021000 	.word	0x40021000
 8004598:	40022000 	.word	0x40022000

0800459c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045a4:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <RCC_Delay+0x34>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <RCC_Delay+0x38>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	0a5b      	lsrs	r3, r3, #9
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045b8:	bf00      	nop
  }
  while (Delay --);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1e5a      	subs	r2, r3, #1
 80045be:	60fa      	str	r2, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f9      	bne.n	80045b8 <RCC_Delay+0x1c>
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	20000000 	.word	0x20000000
 80045d4:	10624dd3 	.word	0x10624dd3

080045d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e041      	b.n	800466e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fe fdec 	bl	80031dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f000 fc28 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d001      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e03a      	b.n	8004706 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a18      	ldr	r2, [pc, #96]	; (8004710 <HAL_TIM_Base_Start_IT+0x98>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00e      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x58>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d009      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x58>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a14      	ldr	r2, [pc, #80]	; (8004714 <HAL_TIM_Base_Start_IT+0x9c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x58>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a13      	ldr	r2, [pc, #76]	; (8004718 <HAL_TIM_Base_Start_IT+0xa0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d111      	bne.n	80046f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d010      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f2:	e007      	b.n	8004704 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	40012c00 	.word	0x40012c00
 8004714:	40000400 	.word	0x40000400
 8004718:	40000800 	.word	0x40000800

0800471c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e041      	b.n	80047b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f839 	bl	80047ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3304      	adds	r3, #4
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f000 fb86 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_TIM_PWM_Start+0x24>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e022      	b.n	8004836 <HAL_TIM_PWM_Start+0x6a>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d109      	bne.n	800480a <HAL_TIM_PWM_Start+0x3e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	bf14      	ite	ne
 8004802:	2301      	movne	r3, #1
 8004804:	2300      	moveq	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	e015      	b.n	8004836 <HAL_TIM_PWM_Start+0x6a>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d109      	bne.n	8004824 <HAL_TIM_PWM_Start+0x58>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	bf14      	ite	ne
 800481c:	2301      	movne	r3, #1
 800481e:	2300      	moveq	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	e008      	b.n	8004836 <HAL_TIM_PWM_Start+0x6a>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e05e      	b.n	80048fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d104      	bne.n	800484e <HAL_TIM_PWM_Start+0x82>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800484c:	e013      	b.n	8004876 <HAL_TIM_PWM_Start+0xaa>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d104      	bne.n	800485e <HAL_TIM_PWM_Start+0x92>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800485c:	e00b      	b.n	8004876 <HAL_TIM_PWM_Start+0xaa>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b08      	cmp	r3, #8
 8004862:	d104      	bne.n	800486e <HAL_TIM_PWM_Start+0xa2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486c:	e003      	b.n	8004876 <HAL_TIM_PWM_Start+0xaa>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2201      	movs	r2, #1
 800487c:	6839      	ldr	r1, [r7, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fd74 	bl	800536c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1e      	ldr	r2, [pc, #120]	; (8004904 <HAL_TIM_PWM_Start+0x138>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d107      	bne.n	800489e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a18      	ldr	r2, [pc, #96]	; (8004904 <HAL_TIM_PWM_Start+0x138>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIM_PWM_Start+0xfa>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b0:	d009      	beq.n	80048c6 <HAL_TIM_PWM_Start+0xfa>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a14      	ldr	r2, [pc, #80]	; (8004908 <HAL_TIM_PWM_Start+0x13c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIM_PWM_Start+0xfa>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a12      	ldr	r2, [pc, #72]	; (800490c <HAL_TIM_PWM_Start+0x140>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d111      	bne.n	80048ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b06      	cmp	r3, #6
 80048d6:	d010      	beq.n	80048fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e8:	e007      	b.n	80048fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800

08004910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b02      	cmp	r3, #2
 8004924:	d122      	bne.n	800496c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b02      	cmp	r3, #2
 8004932:	d11b      	bne.n	800496c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0202 	mvn.w	r2, #2
 800493c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa6f 	bl	8004e36 <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa62 	bl	8004e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fa71 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b04      	cmp	r3, #4
 8004978:	d122      	bne.n	80049c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b04      	cmp	r3, #4
 8004986:	d11b      	bne.n	80049c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0204 	mvn.w	r2, #4
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fa45 	bl	8004e36 <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa38 	bl	8004e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fa47 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d122      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d11b      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0208 	mvn.w	r2, #8
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2204      	movs	r2, #4
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa1b 	bl	8004e36 <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fa0e 	bl	8004e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fa1d 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d122      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d11b      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0210 	mvn.w	r2, #16
 8004a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f9f1 	bl	8004e36 <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9e4 	bl	8004e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f9f3 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d10e      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0201 	mvn.w	r2, #1
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fe fb48 	bl	8003124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b80      	cmp	r3, #128	; 0x80
 8004aa0:	d10e      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d107      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fd32 	bl	8005524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d10e      	bne.n	8004aec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d107      	bne.n	8004aec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f9b7 	bl	8004e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	d10e      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d107      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0220 	mvn.w	r2, #32
 8004b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fcfd 	bl	8005512 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b18:	bf00      	nop
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e0ac      	b.n	8004c94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b0c      	cmp	r3, #12
 8004b46:	f200 809f 	bhi.w	8004c88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b85 	.word	0x08004b85
 8004b54:	08004c89 	.word	0x08004c89
 8004b58:	08004c89 	.word	0x08004c89
 8004b5c:	08004c89 	.word	0x08004c89
 8004b60:	08004bc5 	.word	0x08004bc5
 8004b64:	08004c89 	.word	0x08004c89
 8004b68:	08004c89 	.word	0x08004c89
 8004b6c:	08004c89 	.word	0x08004c89
 8004b70:	08004c07 	.word	0x08004c07
 8004b74:	08004c89 	.word	0x08004c89
 8004b78:	08004c89 	.word	0x08004c89
 8004b7c:	08004c89 	.word	0x08004c89
 8004b80:	08004c47 	.word	0x08004c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f9d0 	bl	8004f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0208 	orr.w	r2, r2, #8
 8004b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0204 	bic.w	r2, r2, #4
 8004bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6999      	ldr	r1, [r3, #24]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	619a      	str	r2, [r3, #24]
      break;
 8004bc2:	e062      	b.n	8004c8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fa16 	bl	8004ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6999      	ldr	r1, [r3, #24]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	021a      	lsls	r2, r3, #8
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	619a      	str	r2, [r3, #24]
      break;
 8004c04:	e041      	b.n	8004c8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fa5f 	bl	80050d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0208 	orr.w	r2, r2, #8
 8004c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0204 	bic.w	r2, r2, #4
 8004c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69d9      	ldr	r1, [r3, #28]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	61da      	str	r2, [r3, #28]
      break;
 8004c44:	e021      	b.n	8004c8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 faa9 	bl	80051a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69da      	ldr	r2, [r3, #28]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69d9      	ldr	r1, [r3, #28]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	021a      	lsls	r2, r3, #8
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	61da      	str	r2, [r3, #28]
      break;
 8004c86:	e000      	b.n	8004c8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004c88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIM_ConfigClockSource+0x18>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e0b3      	b.n	8004e1c <HAL_TIM_ConfigClockSource+0x180>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cec:	d03e      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0xd0>
 8004cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf2:	f200 8087 	bhi.w	8004e04 <HAL_TIM_ConfigClockSource+0x168>
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfa:	f000 8085 	beq.w	8004e08 <HAL_TIM_ConfigClockSource+0x16c>
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d02:	d87f      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x168>
 8004d04:	2b70      	cmp	r3, #112	; 0x70
 8004d06:	d01a      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0xa2>
 8004d08:	2b70      	cmp	r3, #112	; 0x70
 8004d0a:	d87b      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x168>
 8004d0c:	2b60      	cmp	r3, #96	; 0x60
 8004d0e:	d050      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x116>
 8004d10:	2b60      	cmp	r3, #96	; 0x60
 8004d12:	d877      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x168>
 8004d14:	2b50      	cmp	r3, #80	; 0x50
 8004d16:	d03c      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0xf6>
 8004d18:	2b50      	cmp	r3, #80	; 0x50
 8004d1a:	d873      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x168>
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d058      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x136>
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	d86f      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x168>
 8004d24:	2b30      	cmp	r3, #48	; 0x30
 8004d26:	d064      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x156>
 8004d28:	2b30      	cmp	r3, #48	; 0x30
 8004d2a:	d86b      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x168>
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d060      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x156>
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d867      	bhi.n	8004e04 <HAL_TIM_ConfigClockSource+0x168>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d05c      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x156>
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d05a      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d3c:	e062      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6899      	ldr	r1, [r3, #8]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f000 faee 	bl	800532e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	609a      	str	r2, [r3, #8]
      break;
 8004d6a:	e04e      	b.n	8004e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	6899      	ldr	r1, [r3, #8]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f000 fad7 	bl	800532e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d8e:	609a      	str	r2, [r3, #8]
      break;
 8004d90:	e03b      	b.n	8004e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	6859      	ldr	r1, [r3, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f000 fa4e 	bl	8005240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2150      	movs	r1, #80	; 0x50
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 faa5 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 8004db0:	e02b      	b.n	8004e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6859      	ldr	r1, [r3, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f000 fa6c 	bl	800529c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2160      	movs	r1, #96	; 0x60
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fa95 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 8004dd0:	e01b      	b.n	8004e0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6859      	ldr	r1, [r3, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f000 fa2e 	bl	8005240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2140      	movs	r1, #64	; 0x40
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fa85 	bl	80052fa <TIM_ITRx_SetConfig>
      break;
 8004df0:	e00b      	b.n	8004e0a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f000 fa7c 	bl	80052fa <TIM_ITRx_SetConfig>
        break;
 8004e02:	e002      	b.n	8004e0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e04:	bf00      	nop
 8004e06:	e000      	b.n	8004e0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr

08004e36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr

08004e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr

08004e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a29      	ldr	r2, [pc, #164]	; (8004f24 <TIM_Base_SetConfig+0xb8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <TIM_Base_SetConfig+0x30>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8a:	d007      	beq.n	8004e9c <TIM_Base_SetConfig+0x30>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <TIM_Base_SetConfig+0xbc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_Base_SetConfig+0x30>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <TIM_Base_SetConfig+0xc0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d108      	bne.n	8004eae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <TIM_Base_SetConfig+0xb8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_Base_SetConfig+0x62>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d007      	beq.n	8004ece <TIM_Base_SetConfig+0x62>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <TIM_Base_SetConfig+0xbc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_Base_SetConfig+0x62>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <TIM_Base_SetConfig+0xc0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a07      	ldr	r2, [pc, #28]	; (8004f24 <TIM_Base_SetConfig+0xb8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d103      	bne.n	8004f14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	615a      	str	r2, [r3, #20]
}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	40000800 	.word	0x40000800

08004f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0302 	bic.w	r3, r3, #2
 8004f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <TIM_OC1_SetConfig+0xc8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d10c      	bne.n	8004fa6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0308 	bic.w	r3, r3, #8
 8004f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a13      	ldr	r2, [pc, #76]	; (8004ff8 <TIM_OC1_SetConfig+0xc8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d111      	bne.n	8004fd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	621a      	str	r2, [r3, #32]
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40012c00 	.word	0x40012c00

08004ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0210 	bic.w	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f023 0320 	bic.w	r3, r3, #32
 8005046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <TIM_OC2_SetConfig+0xd0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d10d      	bne.n	8005078 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005076:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a14      	ldr	r2, [pc, #80]	; (80050cc <TIM_OC2_SetConfig+0xd0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d113      	bne.n	80050a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005086:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800508e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	40012c00 	.word	0x40012c00

080050d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0303 	bic.w	r3, r3, #3
 8005106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <TIM_OC3_SetConfig+0xd0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10d      	bne.n	800514a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <TIM_OC3_SetConfig+0xd0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d113      	bne.n	800517a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	621a      	str	r2, [r3, #32]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00

080051a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	031b      	lsls	r3, r3, #12
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a0f      	ldr	r2, [pc, #60]	; (800523c <TIM_OC4_SetConfig+0x98>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d109      	bne.n	8005218 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr
 800523c:	40012c00 	.word	0x40012c00

08005240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0201 	bic.w	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800526a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 030a 	bic.w	r3, r3, #10
 800527c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr

0800529c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f023 0210 	bic.w	r2, r3, #16
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	031b      	lsls	r3, r3, #12
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	621a      	str	r2, [r3, #32]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	f043 0307 	orr.w	r3, r3, #7
 800531c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800532e:	b480      	push	{r7}
 8005330:	b087      	sub	sp, #28
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005348:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	021a      	lsls	r2, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	431a      	orrs	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4313      	orrs	r3, r2
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	609a      	str	r2, [r3, #8]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr

0800536c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	2201      	movs	r2, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a1a      	ldr	r2, [r3, #32]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	43db      	mvns	r3, r3
 800538e:	401a      	ands	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1a      	ldr	r2, [r3, #32]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	fa01 f303 	lsl.w	r3, r1, r3
 80053a4:	431a      	orrs	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	621a      	str	r2, [r3, #32]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e046      	b.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a16      	ldr	r2, [pc, #88]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00e      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005418:	d009      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a12      	ldr	r2, [pc, #72]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d004      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a10      	ldr	r2, [pc, #64]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d10c      	bne.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	4313      	orrs	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800

08005470 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005488:	2302      	movs	r3, #2
 800548a:	e03d      	b.n	8005508 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr

08005512 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e03f      	b.n	80055c8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fd fea9 	bl	80032b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2224      	movs	r2, #36	; 0x24
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005578:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fcf2 	bl	8005f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800558e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800559e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d130      	bne.n	800564c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_UART_Transmit_IT+0x26>
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e029      	b.n	800564e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_UART_Transmit_IT+0x38>
 8005604:	2302      	movs	r3, #2
 8005606:	e022      	b.n	800564e <HAL_UART_Transmit_IT+0x7e>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	88fa      	ldrh	r2, [r7, #6]
 800561a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2221      	movs	r2, #33	; 0x21
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005646:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	e000      	b.n	800564e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800564c:	2302      	movs	r3, #2
  }
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b20      	cmp	r3, #32
 8005670:	d11d      	bne.n	80056ae <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_UART_Receive_IT+0x26>
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e016      	b.n	80056b0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_UART_Receive_IT+0x38>
 800568c:	2302      	movs	r3, #2
 800568e:	e00f      	b.n	80056b0 <HAL_UART_Receive_IT+0x58>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	461a      	mov	r2, r3
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fabb 	bl	8005c20 <UART_Start_Receive_IT>
 80056aa:	4603      	mov	r3, r0
 80056ac:	e000      	b.n	80056b0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80056ae:	2302      	movs	r3, #2
  }
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0201 	bic.w	r2, r2, #1
 80056de:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d107      	bne.n	80056f8 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0210 	bic.w	r2, r2, #16
 80056f6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d02d      	beq.n	8005762 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695a      	ldr	r2, [r3, #20]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005714:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	2b00      	cmp	r3, #0
 800571c:	d013      	beq.n	8005746 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	4a19      	ldr	r2, [pc, #100]	; (8005788 <HAL_UART_AbortReceive_IT+0xd0>)
 8005724:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe f8e0 	bl	80038f0 <HAL_DMA_Abort_IT>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d022      	beq.n	800577c <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005740:	4610      	mov	r0, r2
 8005742:	4798      	blx	r3
 8005744:	e01a      	b.n	800577c <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f9c9 	bl	8005af2 <HAL_UART_AbortReceiveCpltCallback>
 8005760:	e00c      	b.n	800577c <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f9bb 	bl	8005af2 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	08005d13 	.word	0x08005d13

0800578c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10d      	bne.n	80057de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d008      	beq.n	80057de <HAL_UART_IRQHandler+0x52>
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fb1a 	bl	8005e10 <UART_Receive_IT>
      return;
 80057dc:	e17b      	b.n	8005ad6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80b1 	beq.w	8005948 <HAL_UART_IRQHandler+0x1bc>
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d105      	bne.n	80057fc <HAL_UART_IRQHandler+0x70>
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80a6 	beq.w	8005948 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_UART_IRQHandler+0x90>
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	f043 0201 	orr.w	r2, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <HAL_UART_IRQHandler+0xb0>
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	f043 0202 	orr.w	r2, r3, #2
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_UART_IRQHandler+0xd0>
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f043 0204 	orr.w	r2, r3, #4
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00f      	beq.n	8005886 <HAL_UART_IRQHandler+0xfa>
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d104      	bne.n	800587a <HAL_UART_IRQHandler+0xee>
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	f043 0208 	orr.w	r2, r3, #8
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 811e 	beq.w	8005acc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <HAL_UART_IRQHandler+0x11e>
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fab3 	bl	8005e10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <HAL_UART_IRQHandler+0x146>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d031      	beq.n	8005936 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9dd 	bl	8005c92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d023      	beq.n	800592e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695a      	ldr	r2, [r3, #20]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d013      	beq.n	8005926 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	4a76      	ldr	r2, [pc, #472]	; (8005adc <HAL_UART_IRQHandler+0x350>)
 8005904:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	4618      	mov	r0, r3
 800590c:	f7fd fff0 	bl	80038f0 <HAL_DMA_Abort_IT>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d016      	beq.n	8005944 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005920:	4610      	mov	r0, r2
 8005922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	e00e      	b.n	8005944 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8da 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592c:	e00a      	b.n	8005944 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f8d6 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	e006      	b.n	8005944 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f8d2 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005942:	e0c3      	b.n	8005acc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005944:	bf00      	nop
    return;
 8005946:	e0c1      	b.n	8005acc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594c:	2b01      	cmp	r3, #1
 800594e:	f040 80a1 	bne.w	8005a94 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 809b 	beq.w	8005a94 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8095 	beq.w	8005a94 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	d04e      	beq.n	8005a2c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005998:	8a3b      	ldrh	r3, [r7, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8098 	beq.w	8005ad0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059a4:	8a3a      	ldrh	r2, [r7, #16]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	f080 8092 	bcs.w	8005ad0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	8a3a      	ldrh	r2, [r7, #16]
 80059b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d02b      	beq.n	8005a14 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0210 	bic.w	r2, r2, #16
 8005a08:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fd ff33 	bl	800387a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	4619      	mov	r1, r3
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f86d 	bl	8005b04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a2a:	e051      	b.n	8005ad0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d047      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005a44:	8a7b      	ldrh	r3, [r7, #18]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d044      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a58:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695a      	ldr	r2, [r3, #20]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0210 	bic.w	r2, r2, #16
 8005a86:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a88:	8a7b      	ldrh	r3, [r7, #18]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f839 	bl	8005b04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a92:	e01f      	b.n	8005ad4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x324>
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f94a 	bl	8005d42 <UART_Transmit_IT>
    return;
 8005aae:	e012      	b.n	8005ad6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00d      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x34a>
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f98b 	bl	8005de0 <UART_EndTransmit_IT>
    return;
 8005aca:	e004      	b.n	8005ad6 <HAL_UART_IRQHandler+0x34a>
    return;
 8005acc:	bf00      	nop
 8005ace:	e002      	b.n	8005ad6 <HAL_UART_IRQHandler+0x34a>
      return;
 8005ad0:	bf00      	nop
 8005ad2:	e000      	b.n	8005ad6 <HAL_UART_IRQHandler+0x34a>
      return;
 8005ad4:	bf00      	nop
  }
}
 8005ad6:	3728      	adds	r7, #40	; 0x28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	08005ceb 	.word	0x08005ceb

08005ae0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr

08005b04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr

08005b1a <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e020      	b.n	8005b76 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	; 0x24
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 030c 	bic.w	r3, r3, #12
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f043 0308 	orr.w	r3, r3, #8
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr

08005b80 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <HAL_HalfDuplex_EnableReceiver+0x1a>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e020      	b.n	8005bdc <HAL_HalfDuplex_EnableReceiver+0x5c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2224      	movs	r2, #36	; 0x24
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 030c 	bic.w	r3, r3, #12
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f043 0304 	orr.w	r3, r3, #4
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr

08005be6 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	4313      	orrs	r3, r2
 8005c14:	b2db      	uxtb	r3, r3
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr

08005c20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2222      	movs	r2, #34	; 0x22
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c64:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695a      	ldr	r2, [r3, #20]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0201 	orr.w	r2, r2, #1
 8005c74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0220 	orr.w	r2, r2, #32
 8005c84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bc80      	pop	{r7}
 8005c90:	4770      	bx	lr

08005c92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ca8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695a      	ldr	r2, [r3, #20]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0201 	bic.w	r2, r2, #1
 8005cb8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d107      	bne.n	8005cd2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0210 	bic.w	r2, r2, #16
 8005cd0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr

08005cea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f7ff feeb 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff fedc 	bl	8005af2 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b21      	cmp	r3, #33	; 0x21
 8005d54:	d13e      	bne.n	8005dd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5e:	d114      	bne.n	8005d8a <UART_Transmit_IT+0x48>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d110      	bne.n	8005d8a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	1c9a      	adds	r2, r3, #2
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	621a      	str	r2, [r3, #32]
 8005d88:	e008      	b.n	8005d9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	1c59      	adds	r1, r3, #1
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6211      	str	r1, [r2, #32]
 8005d94:	781a      	ldrb	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4619      	mov	r1, r3
 8005daa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10f      	bne.n	8005dd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e000      	b.n	8005dd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dd4:	2302      	movs	r3, #2
  }
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fc fc79 	bl	80026f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b22      	cmp	r3, #34	; 0x22
 8005e22:	f040 8099 	bne.w	8005f58 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2e:	d117      	bne.n	8005e60 <UART_Receive_IT+0x50>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d113      	bne.n	8005e60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	1c9a      	adds	r2, r3, #2
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	629a      	str	r2, [r3, #40]	; 0x28
 8005e5e:	e026      	b.n	8005eae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e64:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e72:	d007      	beq.n	8005e84 <UART_Receive_IT+0x74>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <UART_Receive_IT+0x82>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	e008      	b.n	8005ea4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d148      	bne.n	8005f54 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0220 	bic.w	r2, r2, #32
 8005ed0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ee0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	695a      	ldr	r2, [r3, #20]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d123      	bne.n	8005f4a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0210 	bic.w	r2, r2, #16
 8005f16:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	2b10      	cmp	r3, #16
 8005f24:	d10a      	bne.n	8005f3c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fdde 	bl	8005b04 <HAL_UARTEx_RxEventCallback>
 8005f48:	e002      	b.n	8005f50 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fc fc12 	bl	8002774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e002      	b.n	8005f5a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e000      	b.n	8005f5a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005f58:	2302      	movs	r3, #2
  }
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f9e:	f023 030c 	bic.w	r3, r3, #12
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6812      	ldr	r2, [r2, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	430b      	orrs	r3, r1
 8005faa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a2c      	ldr	r2, [pc, #176]	; (8006078 <UART_SetConfig+0x114>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d103      	bne.n	8005fd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fcc:	f7fe faa2 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	e002      	b.n	8005fda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fe fa8a 	bl	80044ec <HAL_RCC_GetPCLK1Freq>
 8005fd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009a      	lsls	r2, r3, #2
 8005fe4:	441a      	add	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	4a22      	ldr	r2, [pc, #136]	; (800607c <UART_SetConfig+0x118>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	0119      	lsls	r1, r3, #4
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009a      	lsls	r2, r3, #2
 8006004:	441a      	add	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006010:	4b1a      	ldr	r3, [pc, #104]	; (800607c <UART_SetConfig+0x118>)
 8006012:	fba3 0302 	umull	r0, r3, r3, r2
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	2064      	movs	r0, #100	; 0x64
 800601a:	fb00 f303 	mul.w	r3, r0, r3
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	3332      	adds	r3, #50	; 0x32
 8006024:	4a15      	ldr	r2, [pc, #84]	; (800607c <UART_SetConfig+0x118>)
 8006026:	fba2 2303 	umull	r2, r3, r2, r3
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006030:	4419      	add	r1, r3
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009a      	lsls	r2, r3, #2
 800603c:	441a      	add	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	fbb2 f2f3 	udiv	r2, r2, r3
 8006048:	4b0c      	ldr	r3, [pc, #48]	; (800607c <UART_SetConfig+0x118>)
 800604a:	fba3 0302 	umull	r0, r3, r3, r2
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	2064      	movs	r0, #100	; 0x64
 8006052:	fb00 f303 	mul.w	r3, r0, r3
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	3332      	adds	r3, #50	; 0x32
 800605c:	4a07      	ldr	r2, [pc, #28]	; (800607c <UART_SetConfig+0x118>)
 800605e:	fba2 2303 	umull	r2, r3, r2, r3
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	f003 020f 	and.w	r2, r3, #15
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	440a      	add	r2, r1
 800606e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40013800 	.word	0x40013800
 800607c:	51eb851f 	.word	0x51eb851f

08006080 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006086:	f3ef 8305 	mrs	r3, IPSR
 800608a:	60bb      	str	r3, [r7, #8]
  return(result);
 800608c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10f      	bne.n	80060b2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006092:	f3ef 8310 	mrs	r3, PRIMASK
 8006096:	607b      	str	r3, [r7, #4]
  return(result);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <osKernelInitialize+0x32>
 800609e:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <osKernelInitialize+0x60>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d109      	bne.n	80060ba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060a6:	f3ef 8311 	mrs	r3, BASEPRI
 80060aa:	603b      	str	r3, [r7, #0]
  return(result);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80060b2:	f06f 0305 	mvn.w	r3, #5
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	e00c      	b.n	80060d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060ba:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <osKernelInitialize+0x60>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80060c2:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <osKernelInitialize+0x60>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e002      	b.n	80060d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80060ce:	f04f 33ff 	mov.w	r3, #4294967295
 80060d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80060d4:	68fb      	ldr	r3, [r7, #12]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr
 80060e0:	2000022c 	.word	0x2000022c

080060e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ea:	f3ef 8305 	mrs	r3, IPSR
 80060ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80060f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10f      	bne.n	8006116 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f6:	f3ef 8310 	mrs	r3, PRIMASK
 80060fa:	607b      	str	r3, [r7, #4]
  return(result);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <osKernelStart+0x32>
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <osKernelStart+0x64>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d109      	bne.n	800611e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800610a:	f3ef 8311 	mrs	r3, BASEPRI
 800610e:	603b      	str	r3, [r7, #0]
  return(result);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006116:	f06f 0305 	mvn.w	r3, #5
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	e00e      	b.n	800613c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800611e:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <osKernelStart+0x64>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d107      	bne.n	8006136 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006126:	4b08      	ldr	r3, [pc, #32]	; (8006148 <osKernelStart+0x64>)
 8006128:	2202      	movs	r2, #2
 800612a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800612c:	f001 fd96 	bl	8007c5c <vTaskStartScheduler>
      stat = osOK;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e002      	b.n	800613c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006136:	f04f 33ff 	mov.w	r3, #4294967295
 800613a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800613c:	68fb      	ldr	r3, [r7, #12]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	2000022c 	.word	0x2000022c

0800614c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800614c:	b580      	push	{r7, lr}
 800614e:	b092      	sub	sp, #72	; 0x48
 8006150:	af04      	add	r7, sp, #16
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800615c:	f3ef 8305 	mrs	r3, IPSR
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006164:	2b00      	cmp	r3, #0
 8006166:	f040 8094 	bne.w	8006292 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800616a:	f3ef 8310 	mrs	r3, PRIMASK
 800616e:	623b      	str	r3, [r7, #32]
  return(result);
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f040 808d 	bne.w	8006292 <osThreadNew+0x146>
 8006178:	4b48      	ldr	r3, [pc, #288]	; (800629c <osThreadNew+0x150>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d106      	bne.n	800618e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006180:	f3ef 8311 	mrs	r3, BASEPRI
 8006184:	61fb      	str	r3, [r7, #28]
  return(result);
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f040 8082 	bne.w	8006292 <osThreadNew+0x146>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d07e      	beq.n	8006292 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006194:	2380      	movs	r3, #128	; 0x80
 8006196:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006198:	2318      	movs	r3, #24
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800619c:	2300      	movs	r3, #0
 800619e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80061a0:	f107 031b 	add.w	r3, r7, #27
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80061a6:	f04f 33ff 	mov.w	r3, #4294967295
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d045      	beq.n	800623e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <osThreadNew+0x74>
        name = attr->name;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <osThreadNew+0x9a>
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	2b38      	cmp	r3, #56	; 0x38
 80061d8:	d805      	bhi.n	80061e6 <osThreadNew+0x9a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <osThreadNew+0x9e>
        return (NULL);
 80061e6:	2300      	movs	r3, #0
 80061e8:	e054      	b.n	8006294 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	089b      	lsrs	r3, r3, #2
 80061f8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00e      	beq.n	8006220 <osThreadNew+0xd4>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	2bbb      	cmp	r3, #187	; 0xbb
 8006208:	d90a      	bls.n	8006220 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800620e:	2b00      	cmp	r3, #0
 8006210:	d006      	beq.n	8006220 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <osThreadNew+0xd4>
        mem = 1;
 800621a:	2301      	movs	r3, #1
 800621c:	62bb      	str	r3, [r7, #40]	; 0x28
 800621e:	e010      	b.n	8006242 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10c      	bne.n	8006242 <osThreadNew+0xf6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d108      	bne.n	8006242 <osThreadNew+0xf6>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d104      	bne.n	8006242 <osThreadNew+0xf6>
          mem = 0;
 8006238:	2300      	movs	r3, #0
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
 800623c:	e001      	b.n	8006242 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	2b01      	cmp	r3, #1
 8006246:	d110      	bne.n	800626a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006250:	9202      	str	r2, [sp, #8]
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f001 fb18 	bl	8007894 <xTaskCreateStatic>
 8006264:	4603      	mov	r3, r0
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e013      	b.n	8006292 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626c:	2b00      	cmp	r3, #0
 800626e:	d110      	bne.n	8006292 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	b29a      	uxth	r2, r3
 8006274:	f107 0314 	add.w	r3, r7, #20
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f001 fb62 	bl	800794c <xTaskCreate>
 8006288:	4603      	mov	r3, r0
 800628a:	2b01      	cmp	r3, #1
 800628c:	d001      	beq.n	8006292 <osThreadNew+0x146>
          hTask = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006292:	697b      	ldr	r3, [r7, #20]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3738      	adds	r7, #56	; 0x38
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	2000022c 	.word	0x2000022c

080062a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062a8:	f3ef 8305 	mrs	r3, IPSR
 80062ac:	613b      	str	r3, [r7, #16]
  return(result);
 80062ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10f      	bne.n	80062d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b4:	f3ef 8310 	mrs	r3, PRIMASK
 80062b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d109      	bne.n	80062d4 <osDelay+0x34>
 80062c0:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <osDelay+0x58>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d109      	bne.n	80062dc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062c8:	f3ef 8311 	mrs	r3, BASEPRI
 80062cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <osDelay+0x3c>
    stat = osErrorISR;
 80062d4:	f06f 0305 	mvn.w	r3, #5
 80062d8:	617b      	str	r3, [r7, #20]
 80062da:	e007      	b.n	80062ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 fc84 	bl	8007bf4 <vTaskDelay>
    }
  }

  return (stat);
 80062ec:	697b      	ldr	r3, [r7, #20]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	2000022c 	.word	0x2000022c

080062fc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08c      	sub	sp, #48	; 0x30
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006308:	2300      	movs	r3, #0
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800630c:	f3ef 8305 	mrs	r3, IPSR
 8006310:	61bb      	str	r3, [r7, #24]
  return(result);
 8006312:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006314:	2b00      	cmp	r3, #0
 8006316:	f040 8086 	bne.w	8006426 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800631a:	f3ef 8310 	mrs	r3, PRIMASK
 800631e:	617b      	str	r3, [r7, #20]
  return(result);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d17f      	bne.n	8006426 <osSemaphoreNew+0x12a>
 8006326:	4b42      	ldr	r3, [pc, #264]	; (8006430 <osSemaphoreNew+0x134>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d105      	bne.n	800633a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800632e:	f3ef 8311 	mrs	r3, BASEPRI
 8006332:	613b      	str	r3, [r7, #16]
  return(result);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d175      	bne.n	8006426 <osSemaphoreNew+0x12a>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d072      	beq.n	8006426 <osSemaphoreNew+0x12a>
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	429a      	cmp	r2, r3
 8006346:	d86e      	bhi.n	8006426 <osSemaphoreNew+0x12a>
    mem = -1;
 8006348:	f04f 33ff 	mov.w	r3, #4294967295
 800634c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d015      	beq.n	8006380 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d006      	beq.n	800636a <osSemaphoreNew+0x6e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b4f      	cmp	r3, #79	; 0x4f
 8006362:	d902      	bls.n	800636a <osSemaphoreNew+0x6e>
        mem = 1;
 8006364:	2301      	movs	r3, #1
 8006366:	623b      	str	r3, [r7, #32]
 8006368:	e00c      	b.n	8006384 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d108      	bne.n	8006384 <osSemaphoreNew+0x88>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d104      	bne.n	8006384 <osSemaphoreNew+0x88>
          mem = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	623b      	str	r3, [r7, #32]
 800637e:	e001      	b.n	8006384 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006380:	2300      	movs	r3, #0
 8006382:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638a:	d04c      	beq.n	8006426 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d128      	bne.n	80063e4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d10a      	bne.n	80063ae <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2203      	movs	r2, #3
 800639e:	9200      	str	r2, [sp, #0]
 80063a0:	2200      	movs	r2, #0
 80063a2:	2100      	movs	r1, #0
 80063a4:	2001      	movs	r0, #1
 80063a6:	f000 fad3 	bl	8006950 <xQueueGenericCreateStatic>
 80063aa:	6278      	str	r0, [r7, #36]	; 0x24
 80063ac:	e005      	b.n	80063ba <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80063ae:	2203      	movs	r2, #3
 80063b0:	2100      	movs	r1, #0
 80063b2:	2001      	movs	r0, #1
 80063b4:	f000 fb43 	bl	8006a3e <xQueueGenericCreate>
 80063b8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d022      	beq.n	8006406 <osSemaphoreNew+0x10a>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01f      	beq.n	8006406 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80063c6:	2300      	movs	r3, #0
 80063c8:	2200      	movs	r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063ce:	f000 fc01 	bl	8006bd4 <xQueueGenericSend>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d016      	beq.n	8006406 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80063d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063da:	f001 f88b 	bl	80074f4 <vQueueDelete>
            hSemaphore = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
 80063e2:	e010      	b.n	8006406 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d108      	bne.n	80063fc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	461a      	mov	r2, r3
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fb84 	bl	8006b00 <xQueueCreateCountingSemaphoreStatic>
 80063f8:	6278      	str	r0, [r7, #36]	; 0x24
 80063fa:	e004      	b.n	8006406 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fbb5 	bl	8006b6e <xQueueCreateCountingSemaphore>
 8006404:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00c      	beq.n	8006426 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <osSemaphoreNew+0x11e>
          name = attr->name;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	e001      	b.n	800641e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800641e:	69f9      	ldr	r1, [r7, #28]
 8006420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006422:	f001 f9b1 	bl	8007788 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006428:	4618      	mov	r0, r3
 800642a:	3728      	adds	r7, #40	; 0x28
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	2000022c 	.word	0x2000022c

08006434 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d103      	bne.n	8006454 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800644c:	f06f 0303 	mvn.w	r3, #3
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e04b      	b.n	80064ec <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006454:	f3ef 8305 	mrs	r3, IPSR
 8006458:	617b      	str	r3, [r7, #20]
  return(result);
 800645a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10f      	bne.n	8006480 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006460:	f3ef 8310 	mrs	r3, PRIMASK
 8006464:	613b      	str	r3, [r7, #16]
  return(result);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d109      	bne.n	8006480 <osSemaphoreAcquire+0x4c>
 800646c:	4b22      	ldr	r3, [pc, #136]	; (80064f8 <osSemaphoreAcquire+0xc4>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d128      	bne.n	80064c6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006474:	f3ef 8311 	mrs	r3, BASEPRI
 8006478:	60fb      	str	r3, [r7, #12]
  return(result);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d022      	beq.n	80064c6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006486:	f06f 0303 	mvn.w	r3, #3
 800648a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800648c:	e02d      	b.n	80064ea <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800648e:	2300      	movs	r3, #0
 8006490:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006492:	f107 0308 	add.w	r3, r7, #8
 8006496:	461a      	mov	r2, r3
 8006498:	2100      	movs	r1, #0
 800649a:	69b8      	ldr	r0, [r7, #24]
 800649c:	f000 ffaa 	bl	80073f4 <xQueueReceiveFromISR>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d003      	beq.n	80064ae <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80064a6:	f06f 0302 	mvn.w	r3, #2
 80064aa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80064ac:	e01d      	b.n	80064ea <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01a      	beq.n	80064ea <osSemaphoreAcquire+0xb6>
 80064b4:	4b11      	ldr	r3, [pc, #68]	; (80064fc <osSemaphoreAcquire+0xc8>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80064c4:	e011      	b.n	80064ea <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	69b8      	ldr	r0, [r7, #24]
 80064ca:	f000 fe87 	bl	80071dc <xQueueSemaphoreTake>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d00b      	beq.n	80064ec <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80064da:	f06f 0301 	mvn.w	r3, #1
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	e004      	b.n	80064ec <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80064e2:	f06f 0302 	mvn.w	r3, #2
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e000      	b.n	80064ec <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80064ea:	bf00      	nop
      }
    }
  }

  return (stat);
 80064ec:	69fb      	ldr	r3, [r7, #28]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	2000022c 	.word	0x2000022c
 80064fc:	e000ed04 	.word	0xe000ed04

08006500 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800650c:	2300      	movs	r3, #0
 800650e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006516:	f06f 0303 	mvn.w	r3, #3
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	e03e      	b.n	800659c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800651e:	f3ef 8305 	mrs	r3, IPSR
 8006522:	617b      	str	r3, [r7, #20]
  return(result);
 8006524:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10f      	bne.n	800654a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800652a:	f3ef 8310 	mrs	r3, PRIMASK
 800652e:	613b      	str	r3, [r7, #16]
  return(result);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <osSemaphoreRelease+0x4a>
 8006536:	4b1c      	ldr	r3, [pc, #112]	; (80065a8 <osSemaphoreRelease+0xa8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d120      	bne.n	8006580 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800653e:	f3ef 8311 	mrs	r3, BASEPRI
 8006542:	60fb      	str	r3, [r7, #12]
  return(result);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d01a      	beq.n	8006580 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800654a:	2300      	movs	r3, #0
 800654c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800654e:	f107 0308 	add.w	r3, r7, #8
 8006552:	4619      	mov	r1, r3
 8006554:	69b8      	ldr	r0, [r7, #24]
 8006556:	f000 fcd3 	bl	8006f00 <xQueueGiveFromISR>
 800655a:	4603      	mov	r3, r0
 800655c:	2b01      	cmp	r3, #1
 800655e:	d003      	beq.n	8006568 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006560:	f06f 0302 	mvn.w	r3, #2
 8006564:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006566:	e018      	b.n	800659a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d015      	beq.n	800659a <osSemaphoreRelease+0x9a>
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <osSemaphoreRelease+0xac>)
 8006570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800657e:	e00c      	b.n	800659a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006580:	2300      	movs	r3, #0
 8006582:	2200      	movs	r2, #0
 8006584:	2100      	movs	r1, #0
 8006586:	69b8      	ldr	r0, [r7, #24]
 8006588:	f000 fb24 	bl	8006bd4 <xQueueGenericSend>
 800658c:	4603      	mov	r3, r0
 800658e:	2b01      	cmp	r3, #1
 8006590:	d004      	beq.n	800659c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006592:	f06f 0302 	mvn.w	r3, #2
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e000      	b.n	800659c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800659a:	bf00      	nop
    }
  }

  return (stat);
 800659c:	69fb      	ldr	r3, [r7, #28]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	2000022c 	.word	0x2000022c
 80065ac:	e000ed04 	.word	0xe000ed04

080065b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c0:	f3ef 8305 	mrs	r3, IPSR
 80065c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80065c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d16f      	bne.n	80066ac <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065cc:	f3ef 8310 	mrs	r3, PRIMASK
 80065d0:	617b      	str	r3, [r7, #20]
  return(result);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d169      	bne.n	80066ac <osMessageQueueNew+0xfc>
 80065d8:	4b37      	ldr	r3, [pc, #220]	; (80066b8 <osMessageQueueNew+0x108>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d105      	bne.n	80065ec <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065e0:	f3ef 8311 	mrs	r3, BASEPRI
 80065e4:	613b      	str	r3, [r7, #16]
  return(result);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d15f      	bne.n	80066ac <osMessageQueueNew+0xfc>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d05c      	beq.n	80066ac <osMessageQueueNew+0xfc>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d059      	beq.n	80066ac <osMessageQueueNew+0xfc>
    mem = -1;
 80065f8:	f04f 33ff 	mov.w	r3, #4294967295
 80065fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d029      	beq.n	8006658 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d012      	beq.n	8006632 <osMessageQueueNew+0x82>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	2b4f      	cmp	r3, #79	; 0x4f
 8006612:	d90e      	bls.n	8006632 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	429a      	cmp	r2, r3
 800662a:	d302      	bcc.n	8006632 <osMessageQueueNew+0x82>
        mem = 1;
 800662c:	2301      	movs	r3, #1
 800662e:	623b      	str	r3, [r7, #32]
 8006630:	e014      	b.n	800665c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d110      	bne.n	800665c <osMessageQueueNew+0xac>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10c      	bne.n	800665c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006646:	2b00      	cmp	r3, #0
 8006648:	d108      	bne.n	800665c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d104      	bne.n	800665c <osMessageQueueNew+0xac>
          mem = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	623b      	str	r3, [r7, #32]
 8006656:	e001      	b.n	800665c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d10b      	bne.n	800667a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2100      	movs	r1, #0
 800666c:	9100      	str	r1, [sp, #0]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f96d 	bl	8006950 <xQueueGenericCreateStatic>
 8006676:	6278      	str	r0, [r7, #36]	; 0x24
 8006678:	e008      	b.n	800668c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006680:	2200      	movs	r2, #0
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f9da 	bl	8006a3e <xQueueGenericCreate>
 800668a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	e001      	b.n	80066a4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80066a4:	69f9      	ldr	r1, [r7, #28]
 80066a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066a8:	f001 f86e 	bl	8007788 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3728      	adds	r7, #40	; 0x28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	2000022c 	.word	0x2000022c

080066bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4a06      	ldr	r2, [pc, #24]	; (80066e4 <vApplicationGetIdleTaskMemory+0x28>)
 80066cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4a05      	ldr	r2, [pc, #20]	; (80066e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80066d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2280      	movs	r2, #128	; 0x80
 80066d8:	601a      	str	r2, [r3, #0]
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr
 80066e4:	20000230 	.word	0x20000230
 80066e8:	200002ec 	.word	0x200002ec

080066ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a07      	ldr	r2, [pc, #28]	; (8006718 <vApplicationGetTimerTaskMemory+0x2c>)
 80066fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4a06      	ldr	r2, [pc, #24]	; (800671c <vApplicationGetTimerTaskMemory+0x30>)
 8006702:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800670a:	601a      	str	r2, [r3, #0]
}
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	200004ec 	.word	0x200004ec
 800671c:	200005a8 	.word	0x200005a8

08006720 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f103 0208 	add.w	r2, r3, #8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f04f 32ff 	mov.w	r2, #4294967295
 8006738:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f103 0208 	add.w	r2, r3, #8
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f103 0208 	add.w	r2, r3, #8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr

0800675e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	601a      	str	r2, [r3, #0]
}
 80067b2:	bf00      	nop
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d103      	bne.n	80067dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e00c      	b.n	80067f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3308      	adds	r3, #8
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e002      	b.n	80067ea <vListInsert+0x2e>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d2f6      	bcs.n	80067e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6892      	ldr	r2, [r2, #8]
 8006842:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6852      	ldr	r2, [r2, #4]
 800684c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d103      	bne.n	8006860 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	1e5a      	subs	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr
	...

08006880 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068aa:	f002 fe4f 	bl	800954c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068ba:	fb01 f303 	mul.w	r3, r1, r3
 80068be:	441a      	add	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068da:	3b01      	subs	r3, #1
 80068dc:	68f9      	ldr	r1, [r7, #12]
 80068de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068e0:	fb01 f303 	mul.w	r3, r1, r3
 80068e4:	441a      	add	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	22ff      	movs	r2, #255	; 0xff
 80068ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	22ff      	movs	r2, #255	; 0xff
 80068f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d114      	bne.n	800692a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01a      	beq.n	800693e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3310      	adds	r3, #16
 800690c:	4618      	mov	r0, r3
 800690e:	f001 fc53 	bl	80081b8 <xTaskRemoveFromEventList>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d012      	beq.n	800693e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006918:	4b0c      	ldr	r3, [pc, #48]	; (800694c <xQueueGenericReset+0xcc>)
 800691a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	e009      	b.n	800693e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3310      	adds	r3, #16
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff fef6 	bl	8006720 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3324      	adds	r3, #36	; 0x24
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff fef1 	bl	8006720 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800693e:	f002 fe35 	bl	80095ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006942:	2301      	movs	r3, #1
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	e000ed04 	.word	0xe000ed04

08006950 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08e      	sub	sp, #56	; 0x38
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <xQueueGenericCreateStatic+0x52>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <xQueueGenericCreateStatic+0x56>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <xQueueGenericCreateStatic+0x58>
 80069a6:	2300      	movs	r3, #0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	623b      	str	r3, [r7, #32]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <xQueueGenericCreateStatic+0x7e>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <xQueueGenericCreateStatic+0x82>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <xQueueGenericCreateStatic+0x84>
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	61fb      	str	r3, [r7, #28]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069ee:	2350      	movs	r3, #80	; 0x50
 80069f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b50      	cmp	r3, #80	; 0x50
 80069f6:	d00a      	beq.n	8006a0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	61bb      	str	r3, [r7, #24]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00d      	beq.n	8006a34 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a20:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 f843 	bl	8006aba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3730      	adds	r7, #48	; 0x30
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b08a      	sub	sp, #40	; 0x28
 8006a42:	af02      	add	r7, sp, #8
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	613b      	str	r3, [r7, #16]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61fb      	str	r3, [r7, #28]
 8006a72:	e004      	b.n	8006a7e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	fb02 f303 	mul.w	r3, r2, r3
 8006a7c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	3350      	adds	r3, #80	; 0x50
 8006a82:	4618      	mov	r0, r3
 8006a84:	f002 fe62 	bl	800974c <pvPortMalloc>
 8006a88:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00f      	beq.n	8006ab0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	3350      	adds	r3, #80	; 0x50
 8006a94:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a9e:	79fa      	ldrb	r2, [r7, #7]
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f805 	bl	8006aba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
	}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3720      	adds	r7, #32
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d103      	bne.n	8006ad6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	e002      	b.n	8006adc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ae8:	2101      	movs	r1, #1
 8006aea:	69b8      	ldr	r0, [r7, #24]
 8006aec:	f7ff fec8 	bl	8006880 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	78fa      	ldrb	r2, [r7, #3]
 8006af4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	; 0x28
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	61bb      	str	r3, [r7, #24]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d90a      	bls.n	8006b46 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	617b      	str	r3, [r7, #20]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006b46:	2302      	movs	r3, #2
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2100      	movs	r1, #0
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f7ff fefd 	bl	8006950 <xQueueGenericCreateStatic>
 8006b56:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006b64:	69fb      	ldr	r3, [r7, #28]
	}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	613b      	str	r3, [r7, #16]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d90a      	bls.n	8006bb2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	60fb      	str	r3, [r7, #12]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff ff41 	bl	8006a3e <xQueueGenericCreate>
 8006bbc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006bca:	697b      	ldr	r3, [r7, #20]
	}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08e      	sub	sp, #56	; 0x38
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
 8006be0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006be2:	2300      	movs	r3, #0
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <xQueueGenericSend+0x32>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d103      	bne.n	8006c14 <xQueueGenericSend+0x40>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <xQueueGenericSend+0x44>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <xQueueGenericSend+0x46>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <xQueueGenericSend+0x60>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d103      	bne.n	8006c42 <xQueueGenericSend+0x6e>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <xQueueGenericSend+0x72>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <xQueueGenericSend+0x74>
 8006c46:	2300      	movs	r3, #0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <xQueueGenericSend+0x8e>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	623b      	str	r3, [r7, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c62:	f001 fc6f 	bl	8008544 <xTaskGetSchedulerState>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <xQueueGenericSend+0x9e>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <xQueueGenericSend+0xa2>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <xQueueGenericSend+0xa4>
 8006c76:	2300      	movs	r3, #0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <xQueueGenericSend+0xbe>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	61fb      	str	r3, [r7, #28]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c92:	f002 fc5b 	bl	800954c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d302      	bcc.n	8006ca8 <xQueueGenericSend+0xd4>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d129      	bne.n	8006cfc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cae:	f000 fc5b 	bl	8007568 <prvCopyDataToQueue>
 8006cb2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d010      	beq.n	8006cde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	3324      	adds	r3, #36	; 0x24
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f001 fa79 	bl	80081b8 <xTaskRemoveFromEventList>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d013      	beq.n	8006cf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ccc:	4b3f      	ldr	r3, [pc, #252]	; (8006dcc <xQueueGenericSend+0x1f8>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	e00a      	b.n	8006cf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ce4:	4b39      	ldr	r3, [pc, #228]	; (8006dcc <xQueueGenericSend+0x1f8>)
 8006ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006cf4:	f002 fc5a 	bl	80095ac <vPortExitCritical>
				return pdPASS;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e063      	b.n	8006dc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d103      	bne.n	8006d0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d02:	f002 fc53 	bl	80095ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	e05c      	b.n	8006dc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d106      	bne.n	8006d1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d10:	f107 0314 	add.w	r3, r7, #20
 8006d14:	4618      	mov	r0, r3
 8006d16:	f001 fab3 	bl	8008280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d1e:	f002 fc45 	bl	80095ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d22:	f001 f80b 	bl	8007d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d26:	f002 fc11 	bl	800954c <vPortEnterCritical>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d36:	d103      	bne.n	8006d40 <xQueueGenericSend+0x16c>
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d46:	b25b      	sxtb	r3, r3
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d103      	bne.n	8006d56 <xQueueGenericSend+0x182>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d56:	f002 fc29 	bl	80095ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d5a:	1d3a      	adds	r2, r7, #4
 8006d5c:	f107 0314 	add.w	r3, r7, #20
 8006d60:	4611      	mov	r1, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f001 faa2 	bl	80082ac <xTaskCheckForTimeOut>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d124      	bne.n	8006db8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d70:	f000 fcf2 	bl	8007758 <prvIsQueueFull>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d018      	beq.n	8006dac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	3310      	adds	r3, #16
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 f9c8 	bl	8008118 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d8a:	f000 fc7d 	bl	8007688 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d8e:	f000 ffe3 	bl	8007d58 <xTaskResumeAll>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f47f af7c 	bne.w	8006c92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d9a:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <xQueueGenericSend+0x1f8>)
 8006d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	e772      	b.n	8006c92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dae:	f000 fc6b 	bl	8007688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006db2:	f000 ffd1 	bl	8007d58 <xTaskResumeAll>
 8006db6:	e76c      	b.n	8006c92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dba:	f000 fc65 	bl	8007688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dbe:	f000 ffcb 	bl	8007d58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dc2:	2300      	movs	r3, #0
		}
	}
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3738      	adds	r7, #56	; 0x38
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	e000ed04 	.word	0xe000ed04

08006dd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08e      	sub	sp, #56	; 0x38
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d103      	bne.n	8006e0c <xQueueGenericSendFromISR+0x3c>
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <xQueueGenericSendFromISR+0x40>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <xQueueGenericSendFromISR+0x42>
 8006e10:	2300      	movs	r3, #0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10a      	bne.n	8006e2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	623b      	str	r3, [r7, #32]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d103      	bne.n	8006e3a <xQueueGenericSendFromISR+0x6a>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <xQueueGenericSendFromISR+0x6e>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <xQueueGenericSendFromISR+0x70>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	61fb      	str	r3, [r7, #28]
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e5a:	f002 fc39 	bl	80096d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e5e:	f3ef 8211 	mrs	r2, BASEPRI
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	61ba      	str	r2, [r7, #24]
 8006e74:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e76:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d302      	bcc.n	8006e8c <xQueueGenericSendFromISR+0xbc>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d12c      	bne.n	8006ee6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	68b9      	ldr	r1, [r7, #8]
 8006e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e9c:	f000 fb64 	bl	8007568 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ea0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea8:	d112      	bne.n	8006ed0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d016      	beq.n	8006ee0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	3324      	adds	r3, #36	; 0x24
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 f97e 	bl	80081b8 <xTaskRemoveFromEventList>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00e      	beq.n	8006ee0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	e007      	b.n	8006ee0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	b25a      	sxtb	r2, r3
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006ee4:	e001      	b.n	8006eea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ef4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3738      	adds	r7, #56	; 0x38
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08e      	sub	sp, #56	; 0x38
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10a      	bne.n	8006f2a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	623b      	str	r3, [r7, #32]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	61fb      	str	r3, [r7, #28]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d103      	bne.n	8006f58 <xQueueGiveFromISR+0x58>
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <xQueueGiveFromISR+0x5c>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e000      	b.n	8006f5e <xQueueGiveFromISR+0x5e>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	61bb      	str	r3, [r7, #24]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f78:	f002 fbaa 	bl	80096d0 <vPortValidateInterruptPriority>
	__asm volatile
 8006f7c:	f3ef 8211 	mrs	r2, BASEPRI
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	617a      	str	r2, [r7, #20]
 8006f92:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f94:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d22b      	bcs.n	8007000 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc2:	d112      	bne.n	8006fea <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d016      	beq.n	8006ffa <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	3324      	adds	r3, #36	; 0x24
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 f8f1 	bl	80081b8 <xTaskRemoveFromEventList>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00e      	beq.n	8006ffa <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00b      	beq.n	8006ffa <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e007      	b.n	8006ffa <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fee:	3301      	adds	r3, #1
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	b25a      	sxtb	r2, r3
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffe:	e001      	b.n	8007004 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007000:	2300      	movs	r3, #0
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f383 8811 	msr	BASEPRI, r3
}
 800700e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007012:	4618      	mov	r0, r3
 8007014:	3738      	adds	r7, #56	; 0x38
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08c      	sub	sp, #48	; 0x30
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007028:	2300      	movs	r3, #0
 800702a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <xQueueReceive+0x30>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	623b      	str	r3, [r7, #32]
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d103      	bne.n	800705a <xQueueReceive+0x3e>
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <xQueueReceive+0x42>
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <xQueueReceive+0x44>
 800705e:	2300      	movs	r3, #0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <xQueueReceive+0x5e>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	61fb      	str	r3, [r7, #28]
}
 8007076:	bf00      	nop
 8007078:	e7fe      	b.n	8007078 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800707a:	f001 fa63 	bl	8008544 <xTaskGetSchedulerState>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <xQueueReceive+0x6e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <xQueueReceive+0x72>
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <xQueueReceive+0x74>
 800708e:	2300      	movs	r3, #0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <xQueueReceive+0x8e>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	61bb      	str	r3, [r7, #24]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80070aa:	f002 fa4f 	bl	800954c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01f      	beq.n	80070fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070ba:	68b9      	ldr	r1, [r7, #8]
 80070bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070be:	f000 fabd 	bl	800763c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	1e5a      	subs	r2, r3, #1
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00f      	beq.n	80070f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	3310      	adds	r3, #16
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 f86e 	bl	80081b8 <xTaskRemoveFromEventList>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d007      	beq.n	80070f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070e2:	4b3d      	ldr	r3, [pc, #244]	; (80071d8 <xQueueReceive+0x1bc>)
 80070e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070f2:	f002 fa5b 	bl	80095ac <vPortExitCritical>
				return pdPASS;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e069      	b.n	80071ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d103      	bne.n	8007108 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007100:	f002 fa54 	bl	80095ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007104:	2300      	movs	r3, #0
 8007106:	e062      	b.n	80071ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800710e:	f107 0310 	add.w	r3, r7, #16
 8007112:	4618      	mov	r0, r3
 8007114:	f001 f8b4 	bl	8008280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007118:	2301      	movs	r3, #1
 800711a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800711c:	f002 fa46 	bl	80095ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007120:	f000 fe0c 	bl	8007d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007124:	f002 fa12 	bl	800954c <vPortEnterCritical>
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800712e:	b25b      	sxtb	r3, r3
 8007130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007134:	d103      	bne.n	800713e <xQueueReceive+0x122>
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007144:	b25b      	sxtb	r3, r3
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d103      	bne.n	8007154 <xQueueReceive+0x138>
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007154:	f002 fa2a 	bl	80095ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007158:	1d3a      	adds	r2, r7, #4
 800715a:	f107 0310 	add.w	r3, r7, #16
 800715e:	4611      	mov	r1, r2
 8007160:	4618      	mov	r0, r3
 8007162:	f001 f8a3 	bl	80082ac <xTaskCheckForTimeOut>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d123      	bne.n	80071b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800716c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800716e:	f000 fadd 	bl	800772c <prvIsQueueEmpty>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d017      	beq.n	80071a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	3324      	adds	r3, #36	; 0x24
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	4611      	mov	r1, r2
 8007180:	4618      	mov	r0, r3
 8007182:	f000 ffc9 	bl	8008118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007188:	f000 fa7e 	bl	8007688 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800718c:	f000 fde4 	bl	8007d58 <xTaskResumeAll>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d189      	bne.n	80070aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007196:	4b10      	ldr	r3, [pc, #64]	; (80071d8 <xQueueReceive+0x1bc>)
 8007198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	e780      	b.n	80070aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071aa:	f000 fa6d 	bl	8007688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071ae:	f000 fdd3 	bl	8007d58 <xTaskResumeAll>
 80071b2:	e77a      	b.n	80070aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071b6:	f000 fa67 	bl	8007688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071ba:	f000 fdcd 	bl	8007d58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071c0:	f000 fab4 	bl	800772c <prvIsQueueEmpty>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f43f af6f 	beq.w	80070aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3730      	adds	r7, #48	; 0x30
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	e000ed04 	.word	0xe000ed04

080071dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08e      	sub	sp, #56	; 0x38
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80071e6:	2300      	movs	r3, #0
 80071e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80071ee:	2300      	movs	r3, #0
 80071f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <xQueueSemaphoreTake+0x32>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	623b      	str	r3, [r7, #32]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	61fb      	str	r3, [r7, #28]
}
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800722c:	f001 f98a 	bl	8008544 <xTaskGetSchedulerState>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d102      	bne.n	800723c <xQueueSemaphoreTake+0x60>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <xQueueSemaphoreTake+0x64>
 800723c:	2301      	movs	r3, #1
 800723e:	e000      	b.n	8007242 <xQueueSemaphoreTake+0x66>
 8007240:	2300      	movs	r3, #0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10a      	bne.n	800725c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	61bb      	str	r3, [r7, #24]
}
 8007258:	bf00      	nop
 800725a:	e7fe      	b.n	800725a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800725c:	f002 f976 	bl	800954c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	2b00      	cmp	r3, #0
 800726a:	d024      	beq.n	80072b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726e:	1e5a      	subs	r2, r3, #1
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800727c:	f001 fae2 	bl	8008844 <pvTaskIncrementMutexHeldCount>
 8007280:	4602      	mov	r2, r0
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00f      	beq.n	80072ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007290:	3310      	adds	r3, #16
 8007292:	4618      	mov	r0, r3
 8007294:	f000 ff90 	bl	80081b8 <xTaskRemoveFromEventList>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d007      	beq.n	80072ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800729e:	4b54      	ldr	r3, [pc, #336]	; (80073f0 <xQueueSemaphoreTake+0x214>)
 80072a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072ae:	f002 f97d 	bl	80095ac <vPortExitCritical>
				return pdPASS;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e097      	b.n	80073e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d111      	bne.n	80072e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	617b      	str	r3, [r7, #20]
}
 80072d4:	bf00      	nop
 80072d6:	e7fe      	b.n	80072d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80072d8:	f002 f968 	bl	80095ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072dc:	2300      	movs	r3, #0
 80072de:	e082      	b.n	80073e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d106      	bne.n	80072f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072e6:	f107 030c 	add.w	r3, r7, #12
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 ffc8 	bl	8008280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072f0:	2301      	movs	r3, #1
 80072f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072f4:	f002 f95a 	bl	80095ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072f8:	f000 fd20 	bl	8007d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072fc:	f002 f926 	bl	800954c <vPortEnterCritical>
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007306:	b25b      	sxtb	r3, r3
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d103      	bne.n	8007316 <xQueueSemaphoreTake+0x13a>
 800730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800731c:	b25b      	sxtb	r3, r3
 800731e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007322:	d103      	bne.n	800732c <xQueueSemaphoreTake+0x150>
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800732c:	f002 f93e 	bl	80095ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007330:	463a      	mov	r2, r7
 8007332:	f107 030c 	add.w	r3, r7, #12
 8007336:	4611      	mov	r1, r2
 8007338:	4618      	mov	r0, r3
 800733a:	f000 ffb7 	bl	80082ac <xTaskCheckForTimeOut>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d132      	bne.n	80073aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007346:	f000 f9f1 	bl	800772c <prvIsQueueEmpty>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d026      	beq.n	800739e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d109      	bne.n	800736c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007358:	f002 f8f8 	bl	800954c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	4618      	mov	r0, r3
 8007362:	f001 f90d 	bl	8008580 <xTaskPriorityInherit>
 8007366:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007368:	f002 f920 	bl	80095ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	3324      	adds	r3, #36	; 0x24
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	4611      	mov	r1, r2
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fecf 	bl	8008118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800737a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800737c:	f000 f984 	bl	8007688 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007380:	f000 fcea 	bl	8007d58 <xTaskResumeAll>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	f47f af68 	bne.w	800725c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800738c:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <xQueueSemaphoreTake+0x214>)
 800738e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	e75e      	b.n	800725c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800739e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073a0:	f000 f972 	bl	8007688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073a4:	f000 fcd8 	bl	8007d58 <xTaskResumeAll>
 80073a8:	e758      	b.n	800725c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80073aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073ac:	f000 f96c 	bl	8007688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073b0:	f000 fcd2 	bl	8007d58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073b6:	f000 f9b9 	bl	800772c <prvIsQueueEmpty>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f43f af4d 	beq.w	800725c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00d      	beq.n	80073e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80073c8:	f002 f8c0 	bl	800954c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80073cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073ce:	f000 f8b4 	bl	800753a <prvGetDisinheritPriorityAfterTimeout>
 80073d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80073d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073da:	4618      	mov	r0, r3
 80073dc:	f001 f9ac 	bl	8008738 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80073e0:	f002 f8e4 	bl	80095ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3738      	adds	r7, #56	; 0x38
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08e      	sub	sp, #56	; 0x38
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	623b      	str	r3, [r7, #32]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d103      	bne.n	800742e <xQueueReceiveFromISR+0x3a>
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <xQueueReceiveFromISR+0x3e>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <xQueueReceiveFromISR+0x40>
 8007432:	2300      	movs	r3, #0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	61fb      	str	r3, [r7, #28]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800744e:	f002 f93f 	bl	80096d0 <vPortValidateInterruptPriority>
	__asm volatile
 8007452:	f3ef 8211 	mrs	r2, BASEPRI
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	61ba      	str	r2, [r7, #24]
 8007468:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800746a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800746c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	2b00      	cmp	r3, #0
 8007478:	d02f      	beq.n	80074da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007488:	f000 f8d8 	bl	800763c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	1e5a      	subs	r2, r3, #1
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007494:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d112      	bne.n	80074c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d016      	beq.n	80074d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	3310      	adds	r3, #16
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fe84 	bl	80081b8 <xTaskRemoveFromEventList>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00e      	beq.n	80074d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	e007      	b.n	80074d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80074c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c8:	3301      	adds	r3, #1
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	b25a      	sxtb	r2, r3
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80074d4:	2301      	movs	r3, #1
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
 80074d8:	e001      	b.n	80074de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80074da:	2300      	movs	r3, #0
 80074dc:	637b      	str	r3, [r7, #52]	; 0x34
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f383 8811 	msr	BASEPRI, r3
}
 80074e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3738      	adds	r7, #56	; 0x38
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10a      	bne.n	800751c <vQueueDelete+0x28>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60bb      	str	r3, [r7, #8]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 f95b 	bl	80077d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f002 f9d1 	bl	80098d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800753a:	b480      	push	{r7}
 800753c:	b085      	sub	sp, #20
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	d006      	beq.n	8007558 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	e001      	b.n	800755c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007558:	2300      	movs	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800755c:	68fb      	ldr	r3, [r7, #12]
	}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	bc80      	pop	{r7}
 8007566:	4770      	bx	lr

08007568 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10d      	bne.n	80075a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d14d      	bne.n	800762a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	4618      	mov	r0, r3
 8007594:	f001 f862 	bl	800865c <xTaskPriorityDisinherit>
 8007598:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	605a      	str	r2, [r3, #4]
 80075a0:	e043      	b.n	800762a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d119      	bne.n	80075dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6898      	ldr	r0, [r3, #8]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	461a      	mov	r2, r3
 80075b2:	68b9      	ldr	r1, [r7, #8]
 80075b4:	f002 fbc5 	bl	8009d42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c0:	441a      	add	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689a      	ldr	r2, [r3, #8]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d32b      	bcc.n	800762a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	609a      	str	r2, [r3, #8]
 80075da:	e026      	b.n	800762a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68d8      	ldr	r0, [r3, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	461a      	mov	r2, r3
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	f002 fbab 	bl	8009d42 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	425b      	negs	r3, r3
 80075f6:	441a      	add	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d207      	bcs.n	8007618 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	425b      	negs	r3, r3
 8007612:	441a      	add	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d105      	bne.n	800762a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3b01      	subs	r3, #1
 8007628:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007632:	697b      	ldr	r3, [r7, #20]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d018      	beq.n	8007680 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	441a      	add	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	429a      	cmp	r2, r3
 8007666:	d303      	bcc.n	8007670 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68d9      	ldr	r1, [r3, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	461a      	mov	r2, r3
 800767a:	6838      	ldr	r0, [r7, #0]
 800767c:	f002 fb61 	bl	8009d42 <memcpy>
	}
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007690:	f001 ff5c 	bl	800954c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800769a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800769c:	e011      	b.n	80076c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d012      	beq.n	80076cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3324      	adds	r3, #36	; 0x24
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fd84 	bl	80081b8 <xTaskRemoveFromEventList>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076b6:	f000 fe5b 	bl	8008370 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	3b01      	subs	r3, #1
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	dce9      	bgt.n	800769e <prvUnlockQueue+0x16>
 80076ca:	e000      	b.n	80076ce <prvUnlockQueue+0x46>
					break;
 80076cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	22ff      	movs	r2, #255	; 0xff
 80076d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076d6:	f001 ff69 	bl	80095ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076da:	f001 ff37 	bl	800954c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076e6:	e011      	b.n	800770c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d012      	beq.n	8007716 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3310      	adds	r3, #16
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fd5f 	bl	80081b8 <xTaskRemoveFromEventList>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007700:	f000 fe36 	bl	8008370 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	3b01      	subs	r3, #1
 8007708:	b2db      	uxtb	r3, r3
 800770a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800770c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007710:	2b00      	cmp	r3, #0
 8007712:	dce9      	bgt.n	80076e8 <prvUnlockQueue+0x60>
 8007714:	e000      	b.n	8007718 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007716:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	22ff      	movs	r2, #255	; 0xff
 800771c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007720:	f001 ff44 	bl	80095ac <vPortExitCritical>
}
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007734:	f001 ff0a 	bl	800954c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	2b00      	cmp	r3, #0
 800773e:	d102      	bne.n	8007746 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007740:	2301      	movs	r3, #1
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	e001      	b.n	800774a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800774a:	f001 ff2f 	bl	80095ac <vPortExitCritical>

	return xReturn;
 800774e:	68fb      	ldr	r3, [r7, #12]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007760:	f001 fef4 	bl	800954c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776c:	429a      	cmp	r2, r3
 800776e:	d102      	bne.n	8007776 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007770:	2301      	movs	r3, #1
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e001      	b.n	800777a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800777a:	f001 ff17 	bl	80095ac <vPortExitCritical>

	return xReturn;
 800777e:	68fb      	ldr	r3, [r7, #12]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	e014      	b.n	80077c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007798:	4a0e      	ldr	r2, [pc, #56]	; (80077d4 <vQueueAddToRegistry+0x4c>)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10b      	bne.n	80077bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077a4:	490b      	ldr	r1, [pc, #44]	; (80077d4 <vQueueAddToRegistry+0x4c>)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077ae:	4a09      	ldr	r2, [pc, #36]	; (80077d4 <vQueueAddToRegistry+0x4c>)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4413      	add	r3, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077ba:	e006      	b.n	80077ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b07      	cmp	r3, #7
 80077c6:	d9e7      	bls.n	8007798 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr
 80077d4:	20001e80 	.word	0x20001e80

080077d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e016      	b.n	8007814 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80077e6:	4a10      	ldr	r2, [pc, #64]	; (8007828 <vQueueUnregisterQueue+0x50>)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	4413      	add	r3, r2
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d10b      	bne.n	800780e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80077f6:	4a0c      	ldr	r2, [pc, #48]	; (8007828 <vQueueUnregisterQueue+0x50>)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2100      	movs	r1, #0
 80077fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007800:	4a09      	ldr	r2, [pc, #36]	; (8007828 <vQueueUnregisterQueue+0x50>)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	4413      	add	r3, r2
 8007808:	2200      	movs	r2, #0
 800780a:	605a      	str	r2, [r3, #4]
				break;
 800780c:	e006      	b.n	800781c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3301      	adds	r3, #1
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b07      	cmp	r3, #7
 8007818:	d9e5      	bls.n	80077e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800781a:	bf00      	nop
 800781c:	bf00      	nop
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	bc80      	pop	{r7}
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	20001e80 	.word	0x20001e80

0800782c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800783c:	f001 fe86 	bl	800954c <vPortEnterCritical>
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007846:	b25b      	sxtb	r3, r3
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784c:	d103      	bne.n	8007856 <vQueueWaitForMessageRestricted+0x2a>
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800785c:	b25b      	sxtb	r3, r3
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d103      	bne.n	800786c <vQueueWaitForMessageRestricted+0x40>
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800786c:	f001 fe9e 	bl	80095ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	3324      	adds	r3, #36	; 0x24
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fc6d 	bl	8008160 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007886:	6978      	ldr	r0, [r7, #20]
 8007888:	f7ff fefe 	bl	8007688 <prvUnlockQueue>
	}
 800788c:	bf00      	nop
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08e      	sub	sp, #56	; 0x38
 8007898:	af04      	add	r7, sp, #16
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10a      	bne.n	80078be <xTaskCreateStatic+0x2a>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	623b      	str	r3, [r7, #32]
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80078be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10a      	bne.n	80078da <xTaskCreateStatic+0x46>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	61fb      	str	r3, [r7, #28]
}
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078da:	23bc      	movs	r3, #188	; 0xbc
 80078dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2bbc      	cmp	r3, #188	; 0xbc
 80078e2:	d00a      	beq.n	80078fa <xTaskCreateStatic+0x66>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	61bb      	str	r3, [r7, #24]
}
 80078f6:	bf00      	nop
 80078f8:	e7fe      	b.n	80078f8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01e      	beq.n	800793e <xTaskCreateStatic+0xaa>
 8007900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01b      	beq.n	800793e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800790e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	2202      	movs	r2, #2
 8007914:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007918:	2300      	movs	r3, #0
 800791a:	9303      	str	r3, [sp, #12]
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	9302      	str	r3, [sp, #8]
 8007920:	f107 0314 	add.w	r3, r7, #20
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	68b9      	ldr	r1, [r7, #8]
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 f851 	bl	80079d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007938:	f000 f8ec 	bl	8007b14 <prvAddNewTaskToReadyList>
 800793c:	e001      	b.n	8007942 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800793e:	2300      	movs	r3, #0
 8007940:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007942:	697b      	ldr	r3, [r7, #20]
	}
 8007944:	4618      	mov	r0, r3
 8007946:	3728      	adds	r7, #40	; 0x28
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08c      	sub	sp, #48	; 0x30
 8007950:	af04      	add	r7, sp, #16
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	603b      	str	r3, [r7, #0]
 8007958:	4613      	mov	r3, r2
 800795a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4618      	mov	r0, r3
 8007962:	f001 fef3 	bl	800974c <pvPortMalloc>
 8007966:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00e      	beq.n	800798c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800796e:	20bc      	movs	r0, #188	; 0xbc
 8007970:	f001 feec 	bl	800974c <pvPortMalloc>
 8007974:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	631a      	str	r2, [r3, #48]	; 0x30
 8007982:	e005      	b.n	8007990 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007984:	6978      	ldr	r0, [r7, #20]
 8007986:	f001 ffa5 	bl	80098d4 <vPortFree>
 800798a:	e001      	b.n	8007990 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800798c:	2300      	movs	r3, #0
 800798e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d017      	beq.n	80079c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800799e:	88fa      	ldrh	r2, [r7, #6]
 80079a0:	2300      	movs	r3, #0
 80079a2:	9303      	str	r3, [sp, #12]
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	9302      	str	r3, [sp, #8]
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	68b9      	ldr	r1, [r7, #8]
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f80f 	bl	80079d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079ba:	69f8      	ldr	r0, [r7, #28]
 80079bc:	f000 f8aa 	bl	8007b14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079c0:	2301      	movs	r3, #1
 80079c2:	61bb      	str	r3, [r7, #24]
 80079c4:	e002      	b.n	80079cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079c6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079cc:	69bb      	ldr	r3, [r7, #24]
	}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3720      	adds	r7, #32
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	461a      	mov	r2, r3
 80079f0:	21a5      	movs	r1, #165	; 0xa5
 80079f2:	f002 f9b4 	bl	8009d5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a00:	3b01      	subs	r3, #1
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
 8007a0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	617b      	str	r3, [r7, #20]
}
 8007a2c:	bf00      	nop
 8007a2e:	e7fe      	b.n	8007a2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a30:	2300      	movs	r3, #0
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	e012      	b.n	8007a5c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	7819      	ldrb	r1, [r3, #0]
 8007a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	4413      	add	r3, r2
 8007a44:	3334      	adds	r3, #52	; 0x34
 8007a46:	460a      	mov	r2, r1
 8007a48:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	4413      	add	r3, r2
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d006      	beq.n	8007a64 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	61fb      	str	r3, [r7, #28]
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	2b0f      	cmp	r3, #15
 8007a60:	d9e9      	bls.n	8007a36 <prvInitialiseNewTask+0x5e>
 8007a62:	e000      	b.n	8007a66 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007a64:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	2b37      	cmp	r3, #55	; 0x37
 8007a72:	d901      	bls.n	8007a78 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a74:	2337      	movs	r3, #55	; 0x37
 8007a76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	2200      	movs	r2, #0
 8007a88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe fe65 	bl	800675e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	3318      	adds	r3, #24
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fe fe60 	bl	800675e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	3354      	adds	r3, #84	; 0x54
 8007ac8:	2260      	movs	r2, #96	; 0x60
 8007aca:	2100      	movs	r1, #0
 8007acc:	4618      	mov	r0, r3
 8007ace:	f002 f946 	bl	8009d5e <memset>
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	4a0c      	ldr	r2, [pc, #48]	; (8007b08 <prvInitialiseNewTask+0x130>)
 8007ad6:	659a      	str	r2, [r3, #88]	; 0x58
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	4a0c      	ldr	r2, [pc, #48]	; (8007b0c <prvInitialiseNewTask+0x134>)
 8007adc:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	4a0b      	ldr	r2, [pc, #44]	; (8007b10 <prvInitialiseNewTask+0x138>)
 8007ae2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	68f9      	ldr	r1, [r7, #12]
 8007ae8:	69b8      	ldr	r0, [r7, #24]
 8007aea:	f001 fc41 	bl	8009370 <pxPortInitialiseStack>
 8007aee:	4602      	mov	r2, r0
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007afe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b00:	bf00      	nop
 8007b02:	3720      	adds	r7, #32
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	0800c7dc 	.word	0x0800c7dc
 8007b0c:	0800c7fc 	.word	0x0800c7fc
 8007b10:	0800c7bc 	.word	0x0800c7bc

08007b14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b1c:	f001 fd16 	bl	800954c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b20:	4b2d      	ldr	r3, [pc, #180]	; (8007bd8 <prvAddNewTaskToReadyList+0xc4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3301      	adds	r3, #1
 8007b26:	4a2c      	ldr	r2, [pc, #176]	; (8007bd8 <prvAddNewTaskToReadyList+0xc4>)
 8007b28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b2a:	4b2c      	ldr	r3, [pc, #176]	; (8007bdc <prvAddNewTaskToReadyList+0xc8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b32:	4a2a      	ldr	r2, [pc, #168]	; (8007bdc <prvAddNewTaskToReadyList+0xc8>)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b38:	4b27      	ldr	r3, [pc, #156]	; (8007bd8 <prvAddNewTaskToReadyList+0xc4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d110      	bne.n	8007b62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b40:	f000 fc3a 	bl	80083b8 <prvInitialiseTaskLists>
 8007b44:	e00d      	b.n	8007b62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b46:	4b26      	ldr	r3, [pc, #152]	; (8007be0 <prvAddNewTaskToReadyList+0xcc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d109      	bne.n	8007b62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b4e:	4b23      	ldr	r3, [pc, #140]	; (8007bdc <prvAddNewTaskToReadyList+0xc8>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d802      	bhi.n	8007b62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b5c:	4a1f      	ldr	r2, [pc, #124]	; (8007bdc <prvAddNewTaskToReadyList+0xc8>)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b62:	4b20      	ldr	r3, [pc, #128]	; (8007be4 <prvAddNewTaskToReadyList+0xd0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3301      	adds	r3, #1
 8007b68:	4a1e      	ldr	r2, [pc, #120]	; (8007be4 <prvAddNewTaskToReadyList+0xd0>)
 8007b6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b6c:	4b1d      	ldr	r3, [pc, #116]	; (8007be4 <prvAddNewTaskToReadyList+0xd0>)
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	4b1b      	ldr	r3, [pc, #108]	; (8007be8 <prvAddNewTaskToReadyList+0xd4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d903      	bls.n	8007b88 <prvAddNewTaskToReadyList+0x74>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	4a18      	ldr	r2, [pc, #96]	; (8007be8 <prvAddNewTaskToReadyList+0xd4>)
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4a15      	ldr	r2, [pc, #84]	; (8007bec <prvAddNewTaskToReadyList+0xd8>)
 8007b96:	441a      	add	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7fe fde9 	bl	8006776 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ba4:	f001 fd02 	bl	80095ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ba8:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <prvAddNewTaskToReadyList+0xcc>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00e      	beq.n	8007bce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bb0:	4b0a      	ldr	r3, [pc, #40]	; (8007bdc <prvAddNewTaskToReadyList+0xc8>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d207      	bcs.n	8007bce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <prvAddNewTaskToReadyList+0xdc>)
 8007bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000e7c 	.word	0x20000e7c
 8007bdc:	200009a8 	.word	0x200009a8
 8007be0:	20000e88 	.word	0x20000e88
 8007be4:	20000e98 	.word	0x20000e98
 8007be8:	20000e84 	.word	0x20000e84
 8007bec:	200009ac 	.word	0x200009ac
 8007bf0:	e000ed04 	.word	0xe000ed04

08007bf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d017      	beq.n	8007c36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c06:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <vTaskDelay+0x60>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <vTaskDelay+0x30>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	60bb      	str	r3, [r7, #8]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c24:	f000 f88a 	bl	8007d3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c28:	2100      	movs	r1, #0
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 ffe6 	bl	8008bfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c30:	f000 f892 	bl	8007d58 <xTaskResumeAll>
 8007c34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d107      	bne.n	8007c4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <vTaskDelay+0x64>)
 8007c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c4c:	bf00      	nop
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20000ea4 	.word	0x20000ea4
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08a      	sub	sp, #40	; 0x28
 8007c60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c6a:	463a      	mov	r2, r7
 8007c6c:	1d39      	adds	r1, r7, #4
 8007c6e:	f107 0308 	add.w	r3, r7, #8
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fd22 	bl	80066bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	9202      	str	r2, [sp, #8]
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	2300      	movs	r3, #0
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	2300      	movs	r3, #0
 8007c88:	460a      	mov	r2, r1
 8007c8a:	4924      	ldr	r1, [pc, #144]	; (8007d1c <vTaskStartScheduler+0xc0>)
 8007c8c:	4824      	ldr	r0, [pc, #144]	; (8007d20 <vTaskStartScheduler+0xc4>)
 8007c8e:	f7ff fe01 	bl	8007894 <xTaskCreateStatic>
 8007c92:	4603      	mov	r3, r0
 8007c94:	4a23      	ldr	r2, [pc, #140]	; (8007d24 <vTaskStartScheduler+0xc8>)
 8007c96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c98:	4b22      	ldr	r3, [pc, #136]	; (8007d24 <vTaskStartScheduler+0xc8>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e001      	b.n	8007caa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d102      	bne.n	8007cb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007cb0:	f000 fff8 	bl	8008ca4 <xTimerCreateTimerTask>
 8007cb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d11b      	bne.n	8007cf4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	613b      	str	r3, [r7, #16]
}
 8007cce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cd0:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <vTaskStartScheduler+0xcc>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3354      	adds	r3, #84	; 0x54
 8007cd6:	4a15      	ldr	r2, [pc, #84]	; (8007d2c <vTaskStartScheduler+0xd0>)
 8007cd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cda:	4b15      	ldr	r3, [pc, #84]	; (8007d30 <vTaskStartScheduler+0xd4>)
 8007cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ce2:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <vTaskStartScheduler+0xd8>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007ce8:	4b13      	ldr	r3, [pc, #76]	; (8007d38 <vTaskStartScheduler+0xdc>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cee:	f001 fbbb 	bl	8009468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cf2:	e00e      	b.n	8007d12 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfa:	d10a      	bne.n	8007d12 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60fb      	str	r3, [r7, #12]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <vTaskStartScheduler+0xb4>
}
 8007d12:	bf00      	nop
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	0800c698 	.word	0x0800c698
 8007d20:	08008389 	.word	0x08008389
 8007d24:	20000ea0 	.word	0x20000ea0
 8007d28:	200009a8 	.word	0x200009a8
 8007d2c:	20000010 	.word	0x20000010
 8007d30:	20000e9c 	.word	0x20000e9c
 8007d34:	20000e88 	.word	0x20000e88
 8007d38:	20000e80 	.word	0x20000e80

08007d3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d40:	4b04      	ldr	r3, [pc, #16]	; (8007d54 <vTaskSuspendAll+0x18>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	4a03      	ldr	r2, [pc, #12]	; (8007d54 <vTaskSuspendAll+0x18>)
 8007d48:	6013      	str	r3, [r2, #0]
}
 8007d4a:	bf00      	nop
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20000ea4 	.word	0x20000ea4

08007d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d62:	2300      	movs	r3, #0
 8007d64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d66:	4b42      	ldr	r3, [pc, #264]	; (8007e70 <xTaskResumeAll+0x118>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	603b      	str	r3, [r7, #0]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d84:	f001 fbe2 	bl	800954c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d88:	4b39      	ldr	r3, [pc, #228]	; (8007e70 <xTaskResumeAll+0x118>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	4a38      	ldr	r2, [pc, #224]	; (8007e70 <xTaskResumeAll+0x118>)
 8007d90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d92:	4b37      	ldr	r3, [pc, #220]	; (8007e70 <xTaskResumeAll+0x118>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d162      	bne.n	8007e60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d9a:	4b36      	ldr	r3, [pc, #216]	; (8007e74 <xTaskResumeAll+0x11c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d05e      	beq.n	8007e60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007da2:	e02f      	b.n	8007e04 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007da4:	4b34      	ldr	r3, [pc, #208]	; (8007e78 <xTaskResumeAll+0x120>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3318      	adds	r3, #24
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe fd3b 	bl	800682c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3304      	adds	r3, #4
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe fd36 	bl	800682c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	4b2d      	ldr	r3, [pc, #180]	; (8007e7c <xTaskResumeAll+0x124>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d903      	bls.n	8007dd4 <xTaskResumeAll+0x7c>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	4a2a      	ldr	r2, [pc, #168]	; (8007e7c <xTaskResumeAll+0x124>)
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4a27      	ldr	r2, [pc, #156]	; (8007e80 <xTaskResumeAll+0x128>)
 8007de2:	441a      	add	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3304      	adds	r3, #4
 8007de8:	4619      	mov	r1, r3
 8007dea:	4610      	mov	r0, r2
 8007dec:	f7fe fcc3 	bl	8006776 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	4b23      	ldr	r3, [pc, #140]	; (8007e84 <xTaskResumeAll+0x12c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d302      	bcc.n	8007e04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007dfe:	4b22      	ldr	r3, [pc, #136]	; (8007e88 <xTaskResumeAll+0x130>)
 8007e00:	2201      	movs	r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e04:	4b1c      	ldr	r3, [pc, #112]	; (8007e78 <xTaskResumeAll+0x120>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1cb      	bne.n	8007da4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e12:	f000 fb73 	bl	80084fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e16:	4b1d      	ldr	r3, [pc, #116]	; (8007e8c <xTaskResumeAll+0x134>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d010      	beq.n	8007e44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e22:	f000 f857 	bl	8007ed4 <xTaskIncrementTick>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e2c:	4b16      	ldr	r3, [pc, #88]	; (8007e88 <xTaskResumeAll+0x130>)
 8007e2e:	2201      	movs	r2, #1
 8007e30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f1      	bne.n	8007e22 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007e3e:	4b13      	ldr	r3, [pc, #76]	; (8007e8c <xTaskResumeAll+0x134>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e44:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <xTaskResumeAll+0x130>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d009      	beq.n	8007e60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e50:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <xTaskResumeAll+0x138>)
 8007e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e60:	f001 fba4 	bl	80095ac <vPortExitCritical>

	return xAlreadyYielded;
 8007e64:	68bb      	ldr	r3, [r7, #8]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000ea4 	.word	0x20000ea4
 8007e74:	20000e7c 	.word	0x20000e7c
 8007e78:	20000e3c 	.word	0x20000e3c
 8007e7c:	20000e84 	.word	0x20000e84
 8007e80:	200009ac 	.word	0x200009ac
 8007e84:	200009a8 	.word	0x200009a8
 8007e88:	20000e90 	.word	0x20000e90
 8007e8c:	20000e8c 	.word	0x20000e8c
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e9a:	4b04      	ldr	r3, [pc, #16]	; (8007eac <xTaskGetTickCount+0x18>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ea0:	687b      	ldr	r3, [r7, #4]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr
 8007eac:	20000e80 	.word	0x20000e80

08007eb0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007eb6:	f001 fc0b 	bl	80096d0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007eba:	2300      	movs	r3, #0
 8007ebc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007ebe:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <xTaskGetTickCountFromISR+0x20>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ec4:	683b      	ldr	r3, [r7, #0]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000e80 	.word	0x20000e80

08007ed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ede:	4b51      	ldr	r3, [pc, #324]	; (8008024 <xTaskIncrementTick+0x150>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f040 808e 	bne.w	8008004 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ee8:	4b4f      	ldr	r3, [pc, #316]	; (8008028 <xTaskIncrementTick+0x154>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3301      	adds	r3, #1
 8007eee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ef0:	4a4d      	ldr	r2, [pc, #308]	; (8008028 <xTaskIncrementTick+0x154>)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d120      	bne.n	8007f3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007efc:	4b4b      	ldr	r3, [pc, #300]	; (800802c <xTaskIncrementTick+0x158>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <xTaskIncrementTick+0x48>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	603b      	str	r3, [r7, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <xTaskIncrementTick+0x46>
 8007f1c:	4b43      	ldr	r3, [pc, #268]	; (800802c <xTaskIncrementTick+0x158>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	4b43      	ldr	r3, [pc, #268]	; (8008030 <xTaskIncrementTick+0x15c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a41      	ldr	r2, [pc, #260]	; (800802c <xTaskIncrementTick+0x158>)
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	4a41      	ldr	r2, [pc, #260]	; (8008030 <xTaskIncrementTick+0x15c>)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	4b40      	ldr	r3, [pc, #256]	; (8008034 <xTaskIncrementTick+0x160>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3301      	adds	r3, #1
 8007f36:	4a3f      	ldr	r2, [pc, #252]	; (8008034 <xTaskIncrementTick+0x160>)
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	f000 fadf 	bl	80084fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f3e:	4b3e      	ldr	r3, [pc, #248]	; (8008038 <xTaskIncrementTick+0x164>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d34e      	bcc.n	8007fe6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f48:	4b38      	ldr	r3, [pc, #224]	; (800802c <xTaskIncrementTick+0x158>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <xTaskIncrementTick+0x82>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e000      	b.n	8007f58 <xTaskIncrementTick+0x84>
 8007f56:	2300      	movs	r3, #0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d004      	beq.n	8007f66 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f5c:	4b36      	ldr	r3, [pc, #216]	; (8008038 <xTaskIncrementTick+0x164>)
 8007f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f62:	601a      	str	r2, [r3, #0]
					break;
 8007f64:	e03f      	b.n	8007fe6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f66:	4b31      	ldr	r3, [pc, #196]	; (800802c <xTaskIncrementTick+0x158>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d203      	bcs.n	8007f86 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f7e:	4a2e      	ldr	r2, [pc, #184]	; (8008038 <xTaskIncrementTick+0x164>)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6013      	str	r3, [r2, #0]
						break;
 8007f84:	e02f      	b.n	8007fe6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fc4e 	bl	800682c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d004      	beq.n	8007fa2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	3318      	adds	r3, #24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fe fc45 	bl	800682c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa6:	4b25      	ldr	r3, [pc, #148]	; (800803c <xTaskIncrementTick+0x168>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d903      	bls.n	8007fb6 <xTaskIncrementTick+0xe2>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	4a22      	ldr	r2, [pc, #136]	; (800803c <xTaskIncrementTick+0x168>)
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4a1f      	ldr	r2, [pc, #124]	; (8008040 <xTaskIncrementTick+0x16c>)
 8007fc4:	441a      	add	r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4610      	mov	r0, r2
 8007fce:	f7fe fbd2 	bl	8006776 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd6:	4b1b      	ldr	r3, [pc, #108]	; (8008044 <xTaskIncrementTick+0x170>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d3b3      	bcc.n	8007f48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fe4:	e7b0      	b.n	8007f48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fe6:	4b17      	ldr	r3, [pc, #92]	; (8008044 <xTaskIncrementTick+0x170>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	4914      	ldr	r1, [pc, #80]	; (8008040 <xTaskIncrementTick+0x16c>)
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	440b      	add	r3, r1
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d907      	bls.n	800800e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007ffe:	2301      	movs	r3, #1
 8008000:	617b      	str	r3, [r7, #20]
 8008002:	e004      	b.n	800800e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008004:	4b10      	ldr	r3, [pc, #64]	; (8008048 <xTaskIncrementTick+0x174>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3301      	adds	r3, #1
 800800a:	4a0f      	ldr	r2, [pc, #60]	; (8008048 <xTaskIncrementTick+0x174>)
 800800c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800800e:	4b0f      	ldr	r3, [pc, #60]	; (800804c <xTaskIncrementTick+0x178>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008016:	2301      	movs	r3, #1
 8008018:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800801a:	697b      	ldr	r3, [r7, #20]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20000ea4 	.word	0x20000ea4
 8008028:	20000e80 	.word	0x20000e80
 800802c:	20000e34 	.word	0x20000e34
 8008030:	20000e38 	.word	0x20000e38
 8008034:	20000e94 	.word	0x20000e94
 8008038:	20000e9c 	.word	0x20000e9c
 800803c:	20000e84 	.word	0x20000e84
 8008040:	200009ac 	.word	0x200009ac
 8008044:	200009a8 	.word	0x200009a8
 8008048:	20000e8c 	.word	0x20000e8c
 800804c:	20000e90 	.word	0x20000e90

08008050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008056:	4b2a      	ldr	r3, [pc, #168]	; (8008100 <vTaskSwitchContext+0xb0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800805e:	4b29      	ldr	r3, [pc, #164]	; (8008104 <vTaskSwitchContext+0xb4>)
 8008060:	2201      	movs	r2, #1
 8008062:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008064:	e046      	b.n	80080f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008066:	4b27      	ldr	r3, [pc, #156]	; (8008104 <vTaskSwitchContext+0xb4>)
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800806c:	4b26      	ldr	r3, [pc, #152]	; (8008108 <vTaskSwitchContext+0xb8>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	e010      	b.n	8008096 <vTaskSwitchContext+0x46>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10a      	bne.n	8008090 <vTaskSwitchContext+0x40>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	607b      	str	r3, [r7, #4]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <vTaskSwitchContext+0x3e>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3b01      	subs	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	491d      	ldr	r1, [pc, #116]	; (800810c <vTaskSwitchContext+0xbc>)
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4613      	mov	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0e4      	beq.n	8008074 <vTaskSwitchContext+0x24>
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4a15      	ldr	r2, [pc, #84]	; (800810c <vTaskSwitchContext+0xbc>)
 80080b6:	4413      	add	r3, r2
 80080b8:	60bb      	str	r3, [r7, #8]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	605a      	str	r2, [r3, #4]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	3308      	adds	r3, #8
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d104      	bne.n	80080da <vTaskSwitchContext+0x8a>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	605a      	str	r2, [r3, #4]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	4a0b      	ldr	r2, [pc, #44]	; (8008110 <vTaskSwitchContext+0xc0>)
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	4a08      	ldr	r2, [pc, #32]	; (8008108 <vTaskSwitchContext+0xb8>)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080ea:	4b09      	ldr	r3, [pc, #36]	; (8008110 <vTaskSwitchContext+0xc0>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3354      	adds	r3, #84	; 0x54
 80080f0:	4a08      	ldr	r2, [pc, #32]	; (8008114 <vTaskSwitchContext+0xc4>)
 80080f2:	6013      	str	r3, [r2, #0]
}
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	20000ea4 	.word	0x20000ea4
 8008104:	20000e90 	.word	0x20000e90
 8008108:	20000e84 	.word	0x20000e84
 800810c:	200009ac 	.word	0x200009ac
 8008110:	200009a8 	.word	0x200009a8
 8008114:	20000010 	.word	0x20000010

08008118 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	60fb      	str	r3, [r7, #12]
}
 800813a:	bf00      	nop
 800813c:	e7fe      	b.n	800813c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800813e:	4b07      	ldr	r3, [pc, #28]	; (800815c <vTaskPlaceOnEventList+0x44>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3318      	adds	r3, #24
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fe fb38 	bl	80067bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800814c:	2101      	movs	r1, #1
 800814e:	6838      	ldr	r0, [r7, #0]
 8008150:	f000 fd54 	bl	8008bfc <prvAddCurrentTaskToDelayedList>
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	200009a8 	.word	0x200009a8

08008160 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	617b      	str	r3, [r7, #20]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008188:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3318      	adds	r3, #24
 800818e:	4619      	mov	r1, r3
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7fe faf0 	bl	8006776 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800819c:	f04f 33ff 	mov.w	r3, #4294967295
 80081a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	68b8      	ldr	r0, [r7, #8]
 80081a6:	f000 fd29 	bl	8008bfc <prvAddCurrentTaskToDelayedList>
	}
 80081aa:	bf00      	nop
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	200009a8 	.word	0x200009a8

080081b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	60fb      	str	r3, [r7, #12]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	3318      	adds	r3, #24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe fb1f 	bl	800682c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ee:	4b1e      	ldr	r3, [pc, #120]	; (8008268 <xTaskRemoveFromEventList+0xb0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d11d      	bne.n	8008232 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	3304      	adds	r3, #4
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fb16 	bl	800682c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008204:	4b19      	ldr	r3, [pc, #100]	; (800826c <xTaskRemoveFromEventList+0xb4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	429a      	cmp	r2, r3
 800820a:	d903      	bls.n	8008214 <xTaskRemoveFromEventList+0x5c>
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	4a16      	ldr	r2, [pc, #88]	; (800826c <xTaskRemoveFromEventList+0xb4>)
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008218:	4613      	mov	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4a13      	ldr	r2, [pc, #76]	; (8008270 <xTaskRemoveFromEventList+0xb8>)
 8008222:	441a      	add	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	3304      	adds	r3, #4
 8008228:	4619      	mov	r1, r3
 800822a:	4610      	mov	r0, r2
 800822c:	f7fe faa3 	bl	8006776 <vListInsertEnd>
 8008230:	e005      	b.n	800823e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	3318      	adds	r3, #24
 8008236:	4619      	mov	r1, r3
 8008238:	480e      	ldr	r0, [pc, #56]	; (8008274 <xTaskRemoveFromEventList+0xbc>)
 800823a:	f7fe fa9c 	bl	8006776 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008242:	4b0d      	ldr	r3, [pc, #52]	; (8008278 <xTaskRemoveFromEventList+0xc0>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	429a      	cmp	r2, r3
 800824a:	d905      	bls.n	8008258 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800824c:	2301      	movs	r3, #1
 800824e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008250:	4b0a      	ldr	r3, [pc, #40]	; (800827c <xTaskRemoveFromEventList+0xc4>)
 8008252:	2201      	movs	r2, #1
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	e001      	b.n	800825c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800825c:	697b      	ldr	r3, [r7, #20]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000ea4 	.word	0x20000ea4
 800826c:	20000e84 	.word	0x20000e84
 8008270:	200009ac 	.word	0x200009ac
 8008274:	20000e3c 	.word	0x20000e3c
 8008278:	200009a8 	.word	0x200009a8
 800827c:	20000e90 	.word	0x20000e90

08008280 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008288:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <vTaskInternalSetTimeOutState+0x24>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008290:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <vTaskInternalSetTimeOutState+0x28>)
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	605a      	str	r2, [r3, #4]
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	bc80      	pop	{r7}
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20000e94 	.word	0x20000e94
 80082a8:	20000e80 	.word	0x20000e80

080082ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	613b      	str	r3, [r7, #16]
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	60fb      	str	r3, [r7, #12]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80082ee:	f001 f92d 	bl	800954c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082f2:	4b1d      	ldr	r3, [pc, #116]	; (8008368 <xTaskCheckForTimeOut+0xbc>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d102      	bne.n	8008312 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800830c:	2300      	movs	r3, #0
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	e023      	b.n	800835a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4b15      	ldr	r3, [pc, #84]	; (800836c <xTaskCheckForTimeOut+0xc0>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d007      	beq.n	800832e <xTaskCheckForTimeOut+0x82>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	429a      	cmp	r2, r3
 8008326:	d302      	bcc.n	800832e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008328:	2301      	movs	r3, #1
 800832a:	61fb      	str	r3, [r7, #28]
 800832c:	e015      	b.n	800835a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	429a      	cmp	r2, r3
 8008336:	d20b      	bcs.n	8008350 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff9b 	bl	8008280 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	e004      	b.n	800835a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008356:	2301      	movs	r3, #1
 8008358:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800835a:	f001 f927 	bl	80095ac <vPortExitCritical>

	return xReturn;
 800835e:	69fb      	ldr	r3, [r7, #28]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3720      	adds	r7, #32
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	20000e80 	.word	0x20000e80
 800836c:	20000e94 	.word	0x20000e94

08008370 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008374:	4b03      	ldr	r3, [pc, #12]	; (8008384 <vTaskMissedYield+0x14>)
 8008376:	2201      	movs	r2, #1
 8008378:	601a      	str	r2, [r3, #0]
}
 800837a:	bf00      	nop
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000e90 	.word	0x20000e90

08008388 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008390:	f000 f852 	bl	8008438 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008394:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <prvIdleTask+0x28>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d9f9      	bls.n	8008390 <prvIdleTask+0x8>
			{
				taskYIELD();
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <prvIdleTask+0x2c>)
 800839e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083ac:	e7f0      	b.n	8008390 <prvIdleTask+0x8>
 80083ae:	bf00      	nop
 80083b0:	200009ac 	.word	0x200009ac
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083be:	2300      	movs	r3, #0
 80083c0:	607b      	str	r3, [r7, #4]
 80083c2:	e00c      	b.n	80083de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4a12      	ldr	r2, [pc, #72]	; (8008418 <prvInitialiseTaskLists+0x60>)
 80083d0:	4413      	add	r3, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe f9a4 	bl	8006720 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3301      	adds	r3, #1
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b37      	cmp	r3, #55	; 0x37
 80083e2:	d9ef      	bls.n	80083c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083e4:	480d      	ldr	r0, [pc, #52]	; (800841c <prvInitialiseTaskLists+0x64>)
 80083e6:	f7fe f99b 	bl	8006720 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083ea:	480d      	ldr	r0, [pc, #52]	; (8008420 <prvInitialiseTaskLists+0x68>)
 80083ec:	f7fe f998 	bl	8006720 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083f0:	480c      	ldr	r0, [pc, #48]	; (8008424 <prvInitialiseTaskLists+0x6c>)
 80083f2:	f7fe f995 	bl	8006720 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083f6:	480c      	ldr	r0, [pc, #48]	; (8008428 <prvInitialiseTaskLists+0x70>)
 80083f8:	f7fe f992 	bl	8006720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083fc:	480b      	ldr	r0, [pc, #44]	; (800842c <prvInitialiseTaskLists+0x74>)
 80083fe:	f7fe f98f 	bl	8006720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008402:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <prvInitialiseTaskLists+0x78>)
 8008404:	4a05      	ldr	r2, [pc, #20]	; (800841c <prvInitialiseTaskLists+0x64>)
 8008406:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008408:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <prvInitialiseTaskLists+0x7c>)
 800840a:	4a05      	ldr	r2, [pc, #20]	; (8008420 <prvInitialiseTaskLists+0x68>)
 800840c:	601a      	str	r2, [r3, #0]
}
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	200009ac 	.word	0x200009ac
 800841c:	20000e0c 	.word	0x20000e0c
 8008420:	20000e20 	.word	0x20000e20
 8008424:	20000e3c 	.word	0x20000e3c
 8008428:	20000e50 	.word	0x20000e50
 800842c:	20000e68 	.word	0x20000e68
 8008430:	20000e34 	.word	0x20000e34
 8008434:	20000e38 	.word	0x20000e38

08008438 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800843e:	e019      	b.n	8008474 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008440:	f001 f884 	bl	800954c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008444:	4b10      	ldr	r3, [pc, #64]	; (8008488 <prvCheckTasksWaitingTermination+0x50>)
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3304      	adds	r3, #4
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe f9eb 	bl	800682c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008456:	4b0d      	ldr	r3, [pc, #52]	; (800848c <prvCheckTasksWaitingTermination+0x54>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3b01      	subs	r3, #1
 800845c:	4a0b      	ldr	r2, [pc, #44]	; (800848c <prvCheckTasksWaitingTermination+0x54>)
 800845e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <prvCheckTasksWaitingTermination+0x58>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3b01      	subs	r3, #1
 8008466:	4a0a      	ldr	r2, [pc, #40]	; (8008490 <prvCheckTasksWaitingTermination+0x58>)
 8008468:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800846a:	f001 f89f 	bl	80095ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f810 	bl	8008494 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008474:	4b06      	ldr	r3, [pc, #24]	; (8008490 <prvCheckTasksWaitingTermination+0x58>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e1      	bne.n	8008440 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000e50 	.word	0x20000e50
 800848c:	20000e7c 	.word	0x20000e7c
 8008490:	20000e64 	.word	0x20000e64

08008494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3354      	adds	r3, #84	; 0x54
 80084a0:	4618      	mov	r0, r3
 80084a2:	f002 f92d 	bl	800a700 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d108      	bne.n	80084c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 fa0d 	bl	80098d4 <vPortFree>
				vPortFree( pxTCB );
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 fa0a 	bl	80098d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084c0:	e018      	b.n	80084f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d103      	bne.n	80084d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 fa01 	bl	80098d4 <vPortFree>
	}
 80084d2:	e00f      	b.n	80084f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d00a      	beq.n	80084f4 <prvDeleteTCB+0x60>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	60fb      	str	r3, [r7, #12]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <prvDeleteTCB+0x5e>
	}
 80084f4:	bf00      	nop
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008502:	4b0e      	ldr	r3, [pc, #56]	; (800853c <prvResetNextTaskUnblockTime+0x40>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <prvResetNextTaskUnblockTime+0x14>
 800850c:	2301      	movs	r3, #1
 800850e:	e000      	b.n	8008512 <prvResetNextTaskUnblockTime+0x16>
 8008510:	2300      	movs	r3, #0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d004      	beq.n	8008520 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008516:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <prvResetNextTaskUnblockTime+0x44>)
 8008518:	f04f 32ff 	mov.w	r2, #4294967295
 800851c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800851e:	e008      	b.n	8008532 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008520:	4b06      	ldr	r3, [pc, #24]	; (800853c <prvResetNextTaskUnblockTime+0x40>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	4a04      	ldr	r2, [pc, #16]	; (8008540 <prvResetNextTaskUnblockTime+0x44>)
 8008530:	6013      	str	r3, [r2, #0]
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr
 800853c:	20000e34 	.word	0x20000e34
 8008540:	20000e9c 	.word	0x20000e9c

08008544 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800854a:	4b0b      	ldr	r3, [pc, #44]	; (8008578 <xTaskGetSchedulerState+0x34>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d102      	bne.n	8008558 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008552:	2301      	movs	r3, #1
 8008554:	607b      	str	r3, [r7, #4]
 8008556:	e008      	b.n	800856a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008558:	4b08      	ldr	r3, [pc, #32]	; (800857c <xTaskGetSchedulerState+0x38>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d102      	bne.n	8008566 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008560:	2302      	movs	r3, #2
 8008562:	607b      	str	r3, [r7, #4]
 8008564:	e001      	b.n	800856a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008566:	2300      	movs	r3, #0
 8008568:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800856a:	687b      	ldr	r3, [r7, #4]
	}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	bc80      	pop	{r7}
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	20000e88 	.word	0x20000e88
 800857c:	20000ea4 	.word	0x20000ea4

08008580 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d056      	beq.n	8008644 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859a:	4b2d      	ldr	r3, [pc, #180]	; (8008650 <xTaskPriorityInherit+0xd0>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d246      	bcs.n	8008632 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	db06      	blt.n	80085ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ac:	4b28      	ldr	r3, [pc, #160]	; (8008650 <xTaskPriorityInherit+0xd0>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6959      	ldr	r1, [r3, #20]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4a22      	ldr	r2, [pc, #136]	; (8008654 <xTaskPriorityInherit+0xd4>)
 80085cc:	4413      	add	r3, r2
 80085ce:	4299      	cmp	r1, r3
 80085d0:	d101      	bne.n	80085d6 <xTaskPriorityInherit+0x56>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e000      	b.n	80085d8 <xTaskPriorityInherit+0x58>
 80085d6:	2300      	movs	r3, #0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d022      	beq.n	8008622 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3304      	adds	r3, #4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe f923 	bl	800682c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085e6:	4b1a      	ldr	r3, [pc, #104]	; (8008650 <xTaskPriorityInherit+0xd0>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f4:	4b18      	ldr	r3, [pc, #96]	; (8008658 <xTaskPriorityInherit+0xd8>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d903      	bls.n	8008604 <xTaskPriorityInherit+0x84>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	4a15      	ldr	r2, [pc, #84]	; (8008658 <xTaskPriorityInherit+0xd8>)
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008608:	4613      	mov	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4a10      	ldr	r2, [pc, #64]	; (8008654 <xTaskPriorityInherit+0xd4>)
 8008612:	441a      	add	r2, r3
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	3304      	adds	r3, #4
 8008618:	4619      	mov	r1, r3
 800861a:	4610      	mov	r0, r2
 800861c:	f7fe f8ab 	bl	8006776 <vListInsertEnd>
 8008620:	e004      	b.n	800862c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008622:	4b0b      	ldr	r3, [pc, #44]	; (8008650 <xTaskPriorityInherit+0xd0>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800862c:	2301      	movs	r3, #1
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	e008      	b.n	8008644 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008636:	4b06      	ldr	r3, [pc, #24]	; (8008650 <xTaskPriorityInherit+0xd0>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863c:	429a      	cmp	r2, r3
 800863e:	d201      	bcs.n	8008644 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008640:	2301      	movs	r3, #1
 8008642:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008644:	68fb      	ldr	r3, [r7, #12]
	}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	200009a8 	.word	0x200009a8
 8008654:	200009ac 	.word	0x200009ac
 8008658:	20000e84 	.word	0x20000e84

0800865c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008668:	2300      	movs	r3, #0
 800866a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d056      	beq.n	8008720 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008672:	4b2e      	ldr	r3, [pc, #184]	; (800872c <xTaskPriorityDisinherit+0xd0>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	429a      	cmp	r2, r3
 800867a:	d00a      	beq.n	8008692 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	60fb      	str	r3, [r7, #12]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	60bb      	str	r3, [r7, #8]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b4:	1e5a      	subs	r2, r3, #1
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d02c      	beq.n	8008720 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d128      	bne.n	8008720 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	3304      	adds	r3, #4
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe f8aa 	bl	800682c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f0:	4b0f      	ldr	r3, [pc, #60]	; (8008730 <xTaskPriorityDisinherit+0xd4>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d903      	bls.n	8008700 <xTaskPriorityDisinherit+0xa4>
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fc:	4a0c      	ldr	r2, [pc, #48]	; (8008730 <xTaskPriorityDisinherit+0xd4>)
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4a09      	ldr	r2, [pc, #36]	; (8008734 <xTaskPriorityDisinherit+0xd8>)
 800870e:	441a      	add	r2, r3
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	3304      	adds	r3, #4
 8008714:	4619      	mov	r1, r3
 8008716:	4610      	mov	r0, r2
 8008718:	f7fe f82d 	bl	8006776 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800871c:	2301      	movs	r3, #1
 800871e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008720:	697b      	ldr	r3, [r7, #20]
	}
 8008722:	4618      	mov	r0, r3
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	200009a8 	.word	0x200009a8
 8008730:	20000e84 	.word	0x20000e84
 8008734:	200009ac 	.word	0x200009ac

08008738 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008746:	2301      	movs	r3, #1
 8008748:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d06f      	beq.n	8008830 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	60fb      	str	r3, [r7, #12]
}
 800876a:	bf00      	nop
 800876c:	e7fe      	b.n	800876c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d902      	bls.n	800877e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	61fb      	str	r3, [r7, #28]
 800877c:	e002      	b.n	8008784 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008782:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	429a      	cmp	r2, r3
 800878c:	d050      	beq.n	8008830 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	429a      	cmp	r2, r3
 8008796:	d14b      	bne.n	8008830 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008798:	4b27      	ldr	r3, [pc, #156]	; (8008838 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d10a      	bne.n	80087b8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	60bb      	str	r3, [r7, #8]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	db04      	blt.n	80087d6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	6959      	ldr	r1, [r3, #20]
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4a15      	ldr	r2, [pc, #84]	; (800883c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80087e6:	4413      	add	r3, r2
 80087e8:	4299      	cmp	r1, r3
 80087ea:	d101      	bne.n	80087f0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80087ec:	2301      	movs	r3, #1
 80087ee:	e000      	b.n	80087f2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80087f0:	2300      	movs	r3, #0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d01c      	beq.n	8008830 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	3304      	adds	r3, #4
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe f816 	bl	800682c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008804:	4b0e      	ldr	r3, [pc, #56]	; (8008840 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	d903      	bls.n	8008814 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	4a0b      	ldr	r2, [pc, #44]	; (8008840 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4a06      	ldr	r2, [pc, #24]	; (800883c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008822:	441a      	add	r2, r3
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	3304      	adds	r3, #4
 8008828:	4619      	mov	r1, r3
 800882a:	4610      	mov	r0, r2
 800882c:	f7fd ffa3 	bl	8006776 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008830:	bf00      	nop
 8008832:	3720      	adds	r7, #32
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	200009a8 	.word	0x200009a8
 800883c:	200009ac 	.word	0x200009ac
 8008840:	20000e84 	.word	0x20000e84

08008844 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008844:	b480      	push	{r7}
 8008846:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008848:	4b07      	ldr	r3, [pc, #28]	; (8008868 <pvTaskIncrementMutexHeldCount+0x24>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d004      	beq.n	800885a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008850:	4b05      	ldr	r3, [pc, #20]	; (8008868 <pvTaskIncrementMutexHeldCount+0x24>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008856:	3201      	adds	r2, #1
 8008858:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800885a:	4b03      	ldr	r3, [pc, #12]	; (8008868 <pvTaskIncrementMutexHeldCount+0x24>)
 800885c:	681b      	ldr	r3, [r3, #0]
	}
 800885e:	4618      	mov	r0, r3
 8008860:	46bd      	mov	sp, r7
 8008862:	bc80      	pop	{r7}
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	200009a8 	.word	0x200009a8

0800886c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008876:	f000 fe69 	bl	800954c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800887a:	4b20      	ldr	r3, [pc, #128]	; (80088fc <ulTaskNotifyTake+0x90>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d113      	bne.n	80088ae <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008886:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <ulTaskNotifyTake+0x90>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00b      	beq.n	80088ae <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008896:	2101      	movs	r1, #1
 8008898:	6838      	ldr	r0, [r7, #0]
 800889a:	f000 f9af 	bl	8008bfc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800889e:	4b18      	ldr	r3, [pc, #96]	; (8008900 <ulTaskNotifyTake+0x94>)
 80088a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80088ae:	f000 fe7d 	bl	80095ac <vPortExitCritical>

		taskENTER_CRITICAL();
 80088b2:	f000 fe4b 	bl	800954c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80088b6:	4b11      	ldr	r3, [pc, #68]	; (80088fc <ulTaskNotifyTake+0x90>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088be:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00e      	beq.n	80088e4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80088cc:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <ulTaskNotifyTake+0x90>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80088d6:	e005      	b.n	80088e4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80088d8:	4b08      	ldr	r3, [pc, #32]	; (80088fc <ulTaskNotifyTake+0x90>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	3a01      	subs	r2, #1
 80088e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <ulTaskNotifyTake+0x90>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80088ee:	f000 fe5d 	bl	80095ac <vPortExitCritical>

		return ulReturn;
 80088f2:	68fb      	ldr	r3, [r7, #12]
	}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	200009a8 	.word	0x200009a8
 8008900:	e000ed04 	.word	0xe000ed04

08008904 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	4613      	mov	r3, r2
 8008912:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008914:	2301      	movs	r3, #1
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <xTaskGenericNotify+0x30>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	61bb      	str	r3, [r7, #24]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008938:	f000 fe08 	bl	800954c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d004      	beq.n	800894c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008952:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	2b04      	cmp	r3, #4
 8008960:	d82d      	bhi.n	80089be <xTaskGenericNotify+0xba>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <xTaskGenericNotify+0x64>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	080089bf 	.word	0x080089bf
 800896c:	0800897d 	.word	0x0800897d
 8008970:	0800898f 	.word	0x0800898f
 8008974:	0800899f 	.word	0x0800899f
 8008978:	080089a9 	.word	0x080089a9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	431a      	orrs	r2, r3
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800898c:	e017      	b.n	80089be <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800899c:	e00f      	b.n	80089be <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80089a6:	e00a      	b.n	80089be <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80089a8:	7ffb      	ldrb	r3, [r7, #31]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d004      	beq.n	80089b8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80089b6:	e001      	b.n	80089bc <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80089bc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80089be:	7ffb      	ldrb	r3, [r7, #31]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d13a      	bne.n	8008a3a <xTaskGenericNotify+0x136>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	3304      	adds	r3, #4
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fd ff2f 	bl	800682c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d2:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <xTaskGenericNotify+0x144>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d903      	bls.n	80089e2 <xTaskGenericNotify+0xde>
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	4a1a      	ldr	r2, [pc, #104]	; (8008a48 <xTaskGenericNotify+0x144>)
 80089e0:	6013      	str	r3, [r2, #0]
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4a17      	ldr	r2, [pc, #92]	; (8008a4c <xTaskGenericNotify+0x148>)
 80089f0:	441a      	add	r2, r3
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4619      	mov	r1, r3
 80089f8:	4610      	mov	r0, r2
 80089fa:	f7fd febc 	bl	8006776 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <xTaskGenericNotify+0x118>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	617b      	str	r3, [r7, #20]
}
 8008a18:	bf00      	nop
 8008a1a:	e7fe      	b.n	8008a1a <xTaskGenericNotify+0x116>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a20:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <xTaskGenericNotify+0x14c>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d907      	bls.n	8008a3a <xTaskGenericNotify+0x136>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008a2a:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <xTaskGenericNotify+0x150>)
 8008a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008a3a:	f000 fdb7 	bl	80095ac <vPortExitCritical>

		return xReturn;
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3728      	adds	r7, #40	; 0x28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	20000e84 	.word	0x20000e84
 8008a4c:	200009ac 	.word	0x200009ac
 8008a50:	200009a8 	.word	0x200009a8
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08e      	sub	sp, #56	; 0x38
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	4613      	mov	r3, r2
 8008a66:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a84:	bf00      	nop
 8008a86:	e7fe      	b.n	8008a86 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a88:	f000 fe22 	bl	80096d0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008a90:	f3ef 8211 	mrs	r2, BASEPRI
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	623a      	str	r2, [r7, #32]
 8008aa6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008aa8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	2202      	movs	r2, #2
 8008aca:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d82f      	bhi.n	8008b34 <xTaskGenericNotifyFromISR+0xdc>
 8008ad4:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <xTaskGenericNotifyFromISR+0x84>)
 8008ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ada:	bf00      	nop
 8008adc:	08008b35 	.word	0x08008b35
 8008ae0:	08008af1 	.word	0x08008af1
 8008ae4:	08008b03 	.word	0x08008b03
 8008ae8:	08008b13 	.word	0x08008b13
 8008aec:	08008b1d 	.word	0x08008b1d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	431a      	orrs	r2, r3
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008b00:	e018      	b.n	8008b34 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008b10:	e010      	b.n	8008b34 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008b1a:	e00b      	b.n	8008b34 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008b1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d004      	beq.n	8008b2e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008b2c:	e001      	b.n	8008b32 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008b32:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008b34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d147      	bne.n	8008bcc <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	61bb      	str	r3, [r7, #24]
}
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b5a:	4b22      	ldr	r3, [pc, #136]	; (8008be4 <xTaskGenericNotifyFromISR+0x18c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d11d      	bne.n	8008b9e <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	3304      	adds	r3, #4
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fd fe60 	bl	800682c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b70:	4b1d      	ldr	r3, [pc, #116]	; (8008be8 <xTaskGenericNotifyFromISR+0x190>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d903      	bls.n	8008b80 <xTaskGenericNotifyFromISR+0x128>
 8008b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	4a1a      	ldr	r2, [pc, #104]	; (8008be8 <xTaskGenericNotifyFromISR+0x190>)
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4a17      	ldr	r2, [pc, #92]	; (8008bec <xTaskGenericNotifyFromISR+0x194>)
 8008b8e:	441a      	add	r2, r3
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	3304      	adds	r3, #4
 8008b94:	4619      	mov	r1, r3
 8008b96:	4610      	mov	r0, r2
 8008b98:	f7fd fded 	bl	8006776 <vListInsertEnd>
 8008b9c:	e005      	b.n	8008baa <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	3318      	adds	r3, #24
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	4812      	ldr	r0, [pc, #72]	; (8008bf0 <xTaskGenericNotifyFromISR+0x198>)
 8008ba6:	f7fd fde6 	bl	8006776 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bae:	4b11      	ldr	r3, [pc, #68]	; (8008bf4 <xTaskGenericNotifyFromISR+0x19c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d909      	bls.n	8008bcc <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	e002      	b.n	8008bcc <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8008bc6:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <xTaskGenericNotifyFromISR+0x1a0>)
 8008bc8:	2201      	movs	r2, #1
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bce:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f383 8811 	msr	BASEPRI, r3
}
 8008bd6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3738      	adds	r7, #56	; 0x38
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000ea4 	.word	0x20000ea4
 8008be8:	20000e84 	.word	0x20000e84
 8008bec:	200009ac 	.word	0x200009ac
 8008bf0:	20000e3c 	.word	0x20000e3c
 8008bf4:	200009a8 	.word	0x200009a8
 8008bf8:	20000e90 	.word	0x20000e90

08008bfc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c06:	4b21      	ldr	r3, [pc, #132]	; (8008c8c <prvAddCurrentTaskToDelayedList+0x90>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c0c:	4b20      	ldr	r3, [pc, #128]	; (8008c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3304      	adds	r3, #4
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fd fe0a 	bl	800682c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1e:	d10a      	bne.n	8008c36 <prvAddCurrentTaskToDelayedList+0x3a>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d007      	beq.n	8008c36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c26:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4819      	ldr	r0, [pc, #100]	; (8008c94 <prvAddCurrentTaskToDelayedList+0x98>)
 8008c30:	f7fd fda1 	bl	8006776 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c34:	e026      	b.n	8008c84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c3e:	4b14      	ldr	r3, [pc, #80]	; (8008c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d209      	bcs.n	8008c62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c4e:	4b12      	ldr	r3, [pc, #72]	; (8008c98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b0f      	ldr	r3, [pc, #60]	; (8008c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3304      	adds	r3, #4
 8008c58:	4619      	mov	r1, r3
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	f7fd fdae 	bl	80067bc <vListInsert>
}
 8008c60:	e010      	b.n	8008c84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c62:	4b0e      	ldr	r3, [pc, #56]	; (8008c9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	4b0a      	ldr	r3, [pc, #40]	; (8008c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f7fd fda4 	bl	80067bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c74:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d202      	bcs.n	8008c84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c7e:	4a08      	ldr	r2, [pc, #32]	; (8008ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	6013      	str	r3, [r2, #0]
}
 8008c84:	bf00      	nop
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20000e80 	.word	0x20000e80
 8008c90:	200009a8 	.word	0x200009a8
 8008c94:	20000e68 	.word	0x20000e68
 8008c98:	20000e38 	.word	0x20000e38
 8008c9c:	20000e34 	.word	0x20000e34
 8008ca0:	20000e9c 	.word	0x20000e9c

08008ca4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08a      	sub	sp, #40	; 0x28
 8008ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008cae:	f000 fb1f 	bl	80092f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008cb2:	4b1c      	ldr	r3, [pc, #112]	; (8008d24 <xTimerCreateTimerTask+0x80>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d021      	beq.n	8008cfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008cc2:	1d3a      	adds	r2, r7, #4
 8008cc4:	f107 0108 	add.w	r1, r7, #8
 8008cc8:	f107 030c 	add.w	r3, r7, #12
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fd fd0d 	bl	80066ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	9202      	str	r2, [sp, #8]
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	2302      	movs	r3, #2
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	460a      	mov	r2, r1
 8008ce4:	4910      	ldr	r1, [pc, #64]	; (8008d28 <xTimerCreateTimerTask+0x84>)
 8008ce6:	4811      	ldr	r0, [pc, #68]	; (8008d2c <xTimerCreateTimerTask+0x88>)
 8008ce8:	f7fe fdd4 	bl	8007894 <xTaskCreateStatic>
 8008cec:	4603      	mov	r3, r0
 8008cee:	4a10      	ldr	r2, [pc, #64]	; (8008d30 <xTimerCreateTimerTask+0x8c>)
 8008cf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008cf2:	4b0f      	ldr	r3, [pc, #60]	; (8008d30 <xTimerCreateTimerTask+0x8c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10a      	bne.n	8008d1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	613b      	str	r3, [r7, #16]
}
 8008d16:	bf00      	nop
 8008d18:	e7fe      	b.n	8008d18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008d1a:	697b      	ldr	r3, [r7, #20]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20000ed8 	.word	0x20000ed8
 8008d28:	0800c6a0 	.word	0x0800c6a0
 8008d2c:	08008ef9 	.word	0x08008ef9
 8008d30:	20000edc 	.word	0x20000edc

08008d34 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af02      	add	r7, sp, #8
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008d42:	2030      	movs	r0, #48	; 0x30
 8008d44:	f000 fd02 	bl	800974c <pvPortMalloc>
 8008d48:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00d      	beq.n	8008d6c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	68b9      	ldr	r1, [r7, #8]
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 f809 	bl	8008d76 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008d6c:	697b      	ldr	r3, [r7, #20]
	}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b086      	sub	sp, #24
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	607a      	str	r2, [r7, #4]
 8008d82:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	617b      	str	r3, [r7, #20]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d015      	beq.n	8008dd2 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008da6:	f000 faa3 	bl	80092f0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	6a3a      	ldr	r2, [r7, #32]
 8008dc6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fd fcc6 	bl	800675e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008dd2:	bf00      	nop
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	; 0x28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10a      	bne.n	8008e0a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	623b      	str	r3, [r7, #32]
}
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e0a:	4b1a      	ldr	r3, [pc, #104]	; (8008e74 <xTimerGenericCommand+0x98>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d02a      	beq.n	8008e68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b05      	cmp	r3, #5
 8008e22:	dc18      	bgt.n	8008e56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e24:	f7ff fb8e 	bl	8008544 <xTaskGetSchedulerState>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d109      	bne.n	8008e42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e2e:	4b11      	ldr	r3, [pc, #68]	; (8008e74 <xTimerGenericCommand+0x98>)
 8008e30:	6818      	ldr	r0, [r3, #0]
 8008e32:	f107 0110 	add.w	r1, r7, #16
 8008e36:	2300      	movs	r3, #0
 8008e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e3a:	f7fd fecb 	bl	8006bd4 <xQueueGenericSend>
 8008e3e:	6278      	str	r0, [r7, #36]	; 0x24
 8008e40:	e012      	b.n	8008e68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e42:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <xTimerGenericCommand+0x98>)
 8008e44:	6818      	ldr	r0, [r3, #0]
 8008e46:	f107 0110 	add.w	r1, r7, #16
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f7fd fec1 	bl	8006bd4 <xQueueGenericSend>
 8008e52:	6278      	str	r0, [r7, #36]	; 0x24
 8008e54:	e008      	b.n	8008e68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e56:	4b07      	ldr	r3, [pc, #28]	; (8008e74 <xTimerGenericCommand+0x98>)
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f107 0110 	add.w	r1, r7, #16
 8008e5e:	2300      	movs	r3, #0
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	f7fd ffb5 	bl	8006dd0 <xQueueGenericSendFromISR>
 8008e66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3728      	adds	r7, #40	; 0x28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20000ed8 	.word	0x20000ed8

08008e78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af02      	add	r7, sp, #8
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e82:	4b1c      	ldr	r3, [pc, #112]	; (8008ef4 <prvProcessExpiredTimer+0x7c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fd fccb 	bl	800682c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d122      	bne.n	8008ee4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	699a      	ldr	r2, [r3, #24]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	18d1      	adds	r1, r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	6978      	ldr	r0, [r7, #20]
 8008eac:	f000 f8c8 	bl	8009040 <prvInsertTimerInActiveList>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d016      	beq.n	8008ee4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	6978      	ldr	r0, [r7, #20]
 8008ec2:	f7ff ff8b 	bl	8008ddc <xTimerGenericCommand>
 8008ec6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	60fb      	str	r3, [r7, #12]
}
 8008ee0:	bf00      	nop
 8008ee2:	e7fe      	b.n	8008ee2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	6978      	ldr	r0, [r7, #20]
 8008eea:	4798      	blx	r3
}
 8008eec:	bf00      	nop
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	20000ed0 	.word	0x20000ed0

08008ef8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f00:	f107 0308 	add.w	r3, r7, #8
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 f857 	bl	8008fb8 <prvGetNextExpireTime>
 8008f0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 f803 	bl	8008f1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f16:	f000 f8d5 	bl	80090c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f1a:	e7f1      	b.n	8008f00 <prvTimerTask+0x8>

08008f1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f26:	f7fe ff09 	bl	8007d3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f2a:	f107 0308 	add.w	r3, r7, #8
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f866 	bl	8009000 <prvSampleTimeNow>
 8008f34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d130      	bne.n	8008f9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10a      	bne.n	8008f58 <prvProcessTimerOrBlockTask+0x3c>
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d806      	bhi.n	8008f58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f4a:	f7fe ff05 	bl	8007d58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f4e:	68f9      	ldr	r1, [r7, #12]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff ff91 	bl	8008e78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f56:	e024      	b.n	8008fa2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d008      	beq.n	8008f70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f5e:	4b13      	ldr	r3, [pc, #76]	; (8008fac <prvProcessTimerOrBlockTask+0x90>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	bf0c      	ite	eq
 8008f68:	2301      	moveq	r3, #1
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f70:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <prvProcessTimerOrBlockTask+0x94>)
 8008f72:	6818      	ldr	r0, [r3, #0]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	f7fe fc55 	bl	800782c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f82:	f7fe fee9 	bl	8007d58 <xTaskResumeAll>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f8c:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <prvProcessTimerOrBlockTask+0x98>)
 8008f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	f3bf 8f6f 	isb	sy
}
 8008f9c:	e001      	b.n	8008fa2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008f9e:	f7fe fedb 	bl	8007d58 <xTaskResumeAll>
}
 8008fa2:	bf00      	nop
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20000ed4 	.word	0x20000ed4
 8008fb0:	20000ed8 	.word	0x20000ed8
 8008fb4:	e000ed04 	.word	0xe000ed04

08008fb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fc0:	4b0e      	ldr	r3, [pc, #56]	; (8008ffc <prvGetNextExpireTime+0x44>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bf0c      	ite	eq
 8008fca:	2301      	moveq	r3, #1
 8008fcc:	2300      	movne	r3, #0
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d105      	bne.n	8008fea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fde:	4b07      	ldr	r3, [pc, #28]	; (8008ffc <prvGetNextExpireTime+0x44>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	e001      	b.n	8008fee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008fee:	68fb      	ldr	r3, [r7, #12]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bc80      	pop	{r7}
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	20000ed0 	.word	0x20000ed0

08009000 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009008:	f7fe ff44 	bl	8007e94 <xTaskGetTickCount>
 800900c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800900e:	4b0b      	ldr	r3, [pc, #44]	; (800903c <prvSampleTimeNow+0x3c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	429a      	cmp	r2, r3
 8009016:	d205      	bcs.n	8009024 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009018:	f000 f908 	bl	800922c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	e002      	b.n	800902a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800902a:	4a04      	ldr	r2, [pc, #16]	; (800903c <prvSampleTimeNow+0x3c>)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009030:	68fb      	ldr	r3, [r7, #12]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000ee0 	.word	0x20000ee0

08009040 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800904e:	2300      	movs	r3, #0
 8009050:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	429a      	cmp	r2, r3
 8009064:	d812      	bhi.n	800908c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	1ad2      	subs	r2, r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	429a      	cmp	r2, r3
 8009072:	d302      	bcc.n	800907a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009074:	2301      	movs	r3, #1
 8009076:	617b      	str	r3, [r7, #20]
 8009078:	e01b      	b.n	80090b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800907a:	4b10      	ldr	r3, [pc, #64]	; (80090bc <prvInsertTimerInActiveList+0x7c>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3304      	adds	r3, #4
 8009082:	4619      	mov	r1, r3
 8009084:	4610      	mov	r0, r2
 8009086:	f7fd fb99 	bl	80067bc <vListInsert>
 800908a:	e012      	b.n	80090b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	429a      	cmp	r2, r3
 8009092:	d206      	bcs.n	80090a2 <prvInsertTimerInActiveList+0x62>
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	429a      	cmp	r2, r3
 800909a:	d302      	bcc.n	80090a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800909c:	2301      	movs	r3, #1
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	e007      	b.n	80090b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090a2:	4b07      	ldr	r3, [pc, #28]	; (80090c0 <prvInsertTimerInActiveList+0x80>)
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3304      	adds	r3, #4
 80090aa:	4619      	mov	r1, r3
 80090ac:	4610      	mov	r0, r2
 80090ae:	f7fd fb85 	bl	80067bc <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090b2:	697b      	ldr	r3, [r7, #20]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	20000ed4 	.word	0x20000ed4
 80090c0:	20000ed0 	.word	0x20000ed0

080090c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08e      	sub	sp, #56	; 0x38
 80090c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090ca:	e09d      	b.n	8009208 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	da18      	bge.n	8009104 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090d2:	1d3b      	adds	r3, r7, #4
 80090d4:	3304      	adds	r3, #4
 80090d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	61fb      	str	r3, [r7, #28]
}
 80090f0:	bf00      	nop
 80090f2:	e7fe      	b.n	80090f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80090f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090fa:	6850      	ldr	r0, [r2, #4]
 80090fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090fe:	6892      	ldr	r2, [r2, #8]
 8009100:	4611      	mov	r1, r2
 8009102:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	db7d      	blt.n	8009206 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d004      	beq.n	8009120 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	3304      	adds	r3, #4
 800911a:	4618      	mov	r0, r3
 800911c:	f7fd fb86 	bl	800682c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009120:	463b      	mov	r3, r7
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff ff6c 	bl	8009000 <prvSampleTimeNow>
 8009128:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b09      	cmp	r3, #9
 800912e:	d86b      	bhi.n	8009208 <prvProcessReceivedCommands+0x144>
 8009130:	a201      	add	r2, pc, #4	; (adr r2, 8009138 <prvProcessReceivedCommands+0x74>)
 8009132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009136:	bf00      	nop
 8009138:	08009161 	.word	0x08009161
 800913c:	08009161 	.word	0x08009161
 8009140:	08009161 	.word	0x08009161
 8009144:	08009209 	.word	0x08009209
 8009148:	080091bd 	.word	0x080091bd
 800914c:	080091f5 	.word	0x080091f5
 8009150:	08009161 	.word	0x08009161
 8009154:	08009161 	.word	0x08009161
 8009158:	08009209 	.word	0x08009209
 800915c:	080091bd 	.word	0x080091bd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	18d1      	adds	r1, r2, r3
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800916e:	f7ff ff67 	bl	8009040 <prvInsertTimerInActiveList>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d047      	beq.n	8009208 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800917e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d13f      	bne.n	8009208 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	441a      	add	r2, r3
 8009190:	2300      	movs	r3, #0
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	2300      	movs	r3, #0
 8009196:	2100      	movs	r1, #0
 8009198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800919a:	f7ff fe1f 	bl	8008ddc <xTimerGenericCommand>
 800919e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091a0:	6a3b      	ldr	r3, [r7, #32]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d130      	bne.n	8009208 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	61bb      	str	r3, [r7, #24]
}
 80091b8:	bf00      	nop
 80091ba:	e7fe      	b.n	80091ba <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10a      	bne.n	80091e0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	617b      	str	r3, [r7, #20]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e2:	699a      	ldr	r2, [r3, #24]
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	18d1      	adds	r1, r2, r3
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ee:	f7ff ff27 	bl	8009040 <prvInsertTimerInActiveList>
					break;
 80091f2:	e009      	b.n	8009208 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d104      	bne.n	8009208 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80091fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009200:	f000 fb68 	bl	80098d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009204:	e000      	b.n	8009208 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009206:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009208:	4b07      	ldr	r3, [pc, #28]	; (8009228 <prvProcessReceivedCommands+0x164>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	1d39      	adds	r1, r7, #4
 800920e:	2200      	movs	r2, #0
 8009210:	4618      	mov	r0, r3
 8009212:	f7fd ff03 	bl	800701c <xQueueReceive>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	f47f af57 	bne.w	80090cc <prvProcessReceivedCommands+0x8>
	}
}
 800921e:	bf00      	nop
 8009220:	bf00      	nop
 8009222:	3730      	adds	r7, #48	; 0x30
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	20000ed8 	.word	0x20000ed8

0800922c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009232:	e045      	b.n	80092c0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009234:	4b2c      	ldr	r3, [pc, #176]	; (80092e8 <prvSwitchTimerLists+0xbc>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800923e:	4b2a      	ldr	r3, [pc, #168]	; (80092e8 <prvSwitchTimerLists+0xbc>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	3304      	adds	r3, #4
 800924c:	4618      	mov	r0, r3
 800924e:	f7fd faed 	bl	800682c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d12e      	bne.n	80092c0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	4413      	add	r3, r2
 800926a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	429a      	cmp	r2, r3
 8009272:	d90e      	bls.n	8009292 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009280:	4b19      	ldr	r3, [pc, #100]	; (80092e8 <prvSwitchTimerLists+0xbc>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3304      	adds	r3, #4
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f7fd fa96 	bl	80067bc <vListInsert>
 8009290:	e016      	b.n	80092c0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009292:	2300      	movs	r3, #0
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	2300      	movs	r3, #0
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	2100      	movs	r1, #0
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f7ff fd9d 	bl	8008ddc <xTimerGenericCommand>
 80092a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10a      	bne.n	80092c0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	603b      	str	r3, [r7, #0]
}
 80092bc:	bf00      	nop
 80092be:	e7fe      	b.n	80092be <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092c0:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <prvSwitchTimerLists+0xbc>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1b4      	bne.n	8009234 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80092ca:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <prvSwitchTimerLists+0xbc>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80092d0:	4b06      	ldr	r3, [pc, #24]	; (80092ec <prvSwitchTimerLists+0xc0>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a04      	ldr	r2, [pc, #16]	; (80092e8 <prvSwitchTimerLists+0xbc>)
 80092d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80092d8:	4a04      	ldr	r2, [pc, #16]	; (80092ec <prvSwitchTimerLists+0xc0>)
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	6013      	str	r3, [r2, #0]
}
 80092de:	bf00      	nop
 80092e0:	3718      	adds	r7, #24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000ed0 	.word	0x20000ed0
 80092ec:	20000ed4 	.word	0x20000ed4

080092f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80092f6:	f000 f929 	bl	800954c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80092fa:	4b15      	ldr	r3, [pc, #84]	; (8009350 <prvCheckForValidListAndQueue+0x60>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d120      	bne.n	8009344 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009302:	4814      	ldr	r0, [pc, #80]	; (8009354 <prvCheckForValidListAndQueue+0x64>)
 8009304:	f7fd fa0c 	bl	8006720 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009308:	4813      	ldr	r0, [pc, #76]	; (8009358 <prvCheckForValidListAndQueue+0x68>)
 800930a:	f7fd fa09 	bl	8006720 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800930e:	4b13      	ldr	r3, [pc, #76]	; (800935c <prvCheckForValidListAndQueue+0x6c>)
 8009310:	4a10      	ldr	r2, [pc, #64]	; (8009354 <prvCheckForValidListAndQueue+0x64>)
 8009312:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009314:	4b12      	ldr	r3, [pc, #72]	; (8009360 <prvCheckForValidListAndQueue+0x70>)
 8009316:	4a10      	ldr	r2, [pc, #64]	; (8009358 <prvCheckForValidListAndQueue+0x68>)
 8009318:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800931a:	2300      	movs	r3, #0
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	4b11      	ldr	r3, [pc, #68]	; (8009364 <prvCheckForValidListAndQueue+0x74>)
 8009320:	4a11      	ldr	r2, [pc, #68]	; (8009368 <prvCheckForValidListAndQueue+0x78>)
 8009322:	2110      	movs	r1, #16
 8009324:	200a      	movs	r0, #10
 8009326:	f7fd fb13 	bl	8006950 <xQueueGenericCreateStatic>
 800932a:	4603      	mov	r3, r0
 800932c:	4a08      	ldr	r2, [pc, #32]	; (8009350 <prvCheckForValidListAndQueue+0x60>)
 800932e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009330:	4b07      	ldr	r3, [pc, #28]	; (8009350 <prvCheckForValidListAndQueue+0x60>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009338:	4b05      	ldr	r3, [pc, #20]	; (8009350 <prvCheckForValidListAndQueue+0x60>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	490b      	ldr	r1, [pc, #44]	; (800936c <prvCheckForValidListAndQueue+0x7c>)
 800933e:	4618      	mov	r0, r3
 8009340:	f7fe fa22 	bl	8007788 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009344:	f000 f932 	bl	80095ac <vPortExitCritical>
}
 8009348:	bf00      	nop
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20000ed8 	.word	0x20000ed8
 8009354:	20000ea8 	.word	0x20000ea8
 8009358:	20000ebc 	.word	0x20000ebc
 800935c:	20000ed0 	.word	0x20000ed0
 8009360:	20000ed4 	.word	0x20000ed4
 8009364:	20000f84 	.word	0x20000f84
 8009368:	20000ee4 	.word	0x20000ee4
 800936c:	0800c6a8 	.word	0x0800c6a8

08009370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3b04      	subs	r3, #4
 8009380:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	3b04      	subs	r3, #4
 800938e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	f023 0201 	bic.w	r2, r3, #1
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3b04      	subs	r3, #4
 800939e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093a0:	4a08      	ldr	r2, [pc, #32]	; (80093c4 <pxPortInitialiseStack+0x54>)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3b14      	subs	r3, #20
 80093aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3b20      	subs	r3, #32
 80093b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80093b8:	68fb      	ldr	r3, [r7, #12]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	bc80      	pop	{r7}
 80093c2:	4770      	bx	lr
 80093c4:	080093c9 	.word	0x080093c9

080093c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80093d2:	4b12      	ldr	r3, [pc, #72]	; (800941c <prvTaskExitError+0x54>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093da:	d00a      	beq.n	80093f2 <prvTaskExitError+0x2a>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	60fb      	str	r3, [r7, #12]
}
 80093ee:	bf00      	nop
 80093f0:	e7fe      	b.n	80093f0 <prvTaskExitError+0x28>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	60bb      	str	r3, [r7, #8]
}
 8009404:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009406:	bf00      	nop
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0fc      	beq.n	8009408 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800940e:	bf00      	nop
 8009410:	bf00      	nop
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	bc80      	pop	{r7}
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	2000000c 	.word	0x2000000c

08009420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009420:	4b07      	ldr	r3, [pc, #28]	; (8009440 <pxCurrentTCBConst2>)
 8009422:	6819      	ldr	r1, [r3, #0]
 8009424:	6808      	ldr	r0, [r1, #0]
 8009426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800942a:	f380 8809 	msr	PSP, r0
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f04f 0000 	mov.w	r0, #0
 8009436:	f380 8811 	msr	BASEPRI, r0
 800943a:	f04e 0e0d 	orr.w	lr, lr, #13
 800943e:	4770      	bx	lr

08009440 <pxCurrentTCBConst2>:
 8009440:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009444:	bf00      	nop
 8009446:	bf00      	nop

08009448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009448:	4806      	ldr	r0, [pc, #24]	; (8009464 <prvPortStartFirstTask+0x1c>)
 800944a:	6800      	ldr	r0, [r0, #0]
 800944c:	6800      	ldr	r0, [r0, #0]
 800944e:	f380 8808 	msr	MSP, r0
 8009452:	b662      	cpsie	i
 8009454:	b661      	cpsie	f
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	df00      	svc	0
 8009460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009462:	bf00      	nop
 8009464:	e000ed08 	.word	0xe000ed08

08009468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800946e:	4b32      	ldr	r3, [pc, #200]	; (8009538 <xPortStartScheduler+0xd0>)
 8009470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	b2db      	uxtb	r3, r3
 8009478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	22ff      	movs	r2, #255	; 0xff
 800947e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	b2db      	uxtb	r3, r3
 8009486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009488:	78fb      	ldrb	r3, [r7, #3]
 800948a:	b2db      	uxtb	r3, r3
 800948c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009490:	b2da      	uxtb	r2, r3
 8009492:	4b2a      	ldr	r3, [pc, #168]	; (800953c <xPortStartScheduler+0xd4>)
 8009494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009496:	4b2a      	ldr	r3, [pc, #168]	; (8009540 <xPortStartScheduler+0xd8>)
 8009498:	2207      	movs	r2, #7
 800949a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800949c:	e009      	b.n	80094b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800949e:	4b28      	ldr	r3, [pc, #160]	; (8009540 <xPortStartScheduler+0xd8>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	4a26      	ldr	r2, [pc, #152]	; (8009540 <xPortStartScheduler+0xd8>)
 80094a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ba:	2b80      	cmp	r3, #128	; 0x80
 80094bc:	d0ef      	beq.n	800949e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094be:	4b20      	ldr	r3, [pc, #128]	; (8009540 <xPortStartScheduler+0xd8>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f1c3 0307 	rsb	r3, r3, #7
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d00a      	beq.n	80094e0 <xPortStartScheduler+0x78>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	60bb      	str	r3, [r7, #8]
}
 80094dc:	bf00      	nop
 80094de:	e7fe      	b.n	80094de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094e0:	4b17      	ldr	r3, [pc, #92]	; (8009540 <xPortStartScheduler+0xd8>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	021b      	lsls	r3, r3, #8
 80094e6:	4a16      	ldr	r2, [pc, #88]	; (8009540 <xPortStartScheduler+0xd8>)
 80094e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094ea:	4b15      	ldr	r3, [pc, #84]	; (8009540 <xPortStartScheduler+0xd8>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094f2:	4a13      	ldr	r2, [pc, #76]	; (8009540 <xPortStartScheduler+0xd8>)
 80094f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094fe:	4b11      	ldr	r3, [pc, #68]	; (8009544 <xPortStartScheduler+0xdc>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a10      	ldr	r2, [pc, #64]	; (8009544 <xPortStartScheduler+0xdc>)
 8009504:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
 8009508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800950a:	4b0e      	ldr	r3, [pc, #56]	; (8009544 <xPortStartScheduler+0xdc>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a0d      	ldr	r2, [pc, #52]	; (8009544 <xPortStartScheduler+0xdc>)
 8009510:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 8009514:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009516:	f000 f8b9 	bl	800968c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800951a:	4b0b      	ldr	r3, [pc, #44]	; (8009548 <xPortStartScheduler+0xe0>)
 800951c:	2200      	movs	r2, #0
 800951e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009520:	f7ff ff92 	bl	8009448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009524:	f7fe fd94 	bl	8008050 <vTaskSwitchContext>
	prvTaskExitError();
 8009528:	f7ff ff4e 	bl	80093c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	e000e400 	.word	0xe000e400
 800953c:	20000fd4 	.word	0x20000fd4
 8009540:	20000fd8 	.word	0x20000fd8
 8009544:	e000ed20 	.word	0xe000ed20
 8009548:	2000000c 	.word	0x2000000c

0800954c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	607b      	str	r3, [r7, #4]
}
 8009564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009566:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <vPortEnterCritical+0x58>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3301      	adds	r3, #1
 800956c:	4a0d      	ldr	r2, [pc, #52]	; (80095a4 <vPortEnterCritical+0x58>)
 800956e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009570:	4b0c      	ldr	r3, [pc, #48]	; (80095a4 <vPortEnterCritical+0x58>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d10f      	bne.n	8009598 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009578:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <vPortEnterCritical+0x5c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00a      	beq.n	8009598 <vPortEnterCritical+0x4c>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	603b      	str	r3, [r7, #0]
}
 8009594:	bf00      	nop
 8009596:	e7fe      	b.n	8009596 <vPortEnterCritical+0x4a>
	}
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	bc80      	pop	{r7}
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	2000000c 	.word	0x2000000c
 80095a8:	e000ed04 	.word	0xe000ed04

080095ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095b2:	4b11      	ldr	r3, [pc, #68]	; (80095f8 <vPortExitCritical+0x4c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10a      	bne.n	80095d0 <vPortExitCritical+0x24>
	__asm volatile
 80095ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	607b      	str	r3, [r7, #4]
}
 80095cc:	bf00      	nop
 80095ce:	e7fe      	b.n	80095ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095d0:	4b09      	ldr	r3, [pc, #36]	; (80095f8 <vPortExitCritical+0x4c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	4a08      	ldr	r2, [pc, #32]	; (80095f8 <vPortExitCritical+0x4c>)
 80095d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095da:	4b07      	ldr	r3, [pc, #28]	; (80095f8 <vPortExitCritical+0x4c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d105      	bne.n	80095ee <vPortExitCritical+0x42>
 80095e2:	2300      	movs	r3, #0
 80095e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	f383 8811 	msr	BASEPRI, r3
}
 80095ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bc80      	pop	{r7}
 80095f6:	4770      	bx	lr
 80095f8:	2000000c 	.word	0x2000000c
 80095fc:	00000000 	.word	0x00000000

08009600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009600:	f3ef 8009 	mrs	r0, PSP
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	4b0d      	ldr	r3, [pc, #52]	; (8009640 <pxCurrentTCBConst>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009610:	6010      	str	r0, [r2, #0]
 8009612:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800961a:	f380 8811 	msr	BASEPRI, r0
 800961e:	f7fe fd17 	bl	8008050 <vTaskSwitchContext>
 8009622:	f04f 0000 	mov.w	r0, #0
 8009626:	f380 8811 	msr	BASEPRI, r0
 800962a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800962e:	6819      	ldr	r1, [r3, #0]
 8009630:	6808      	ldr	r0, [r1, #0]
 8009632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009636:	f380 8809 	msr	PSP, r0
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	4770      	bx	lr

08009640 <pxCurrentTCBConst>:
 8009640:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009644:	bf00      	nop
 8009646:	bf00      	nop

08009648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	607b      	str	r3, [r7, #4]
}
 8009660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009662:	f7fe fc37 	bl	8007ed4 <xTaskIncrementTick>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800966c:	4b06      	ldr	r3, [pc, #24]	; (8009688 <SysTick_Handler+0x40>)
 800966e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	f383 8811 	msr	BASEPRI, r3
}
 800967e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	e000ed04 	.word	0xe000ed04

0800968c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009690:	4b0a      	ldr	r3, [pc, #40]	; (80096bc <vPortSetupTimerInterrupt+0x30>)
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009696:	4b0a      	ldr	r3, [pc, #40]	; (80096c0 <vPortSetupTimerInterrupt+0x34>)
 8009698:	2200      	movs	r2, #0
 800969a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800969c:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <vPortSetupTimerInterrupt+0x38>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a09      	ldr	r2, [pc, #36]	; (80096c8 <vPortSetupTimerInterrupt+0x3c>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	099b      	lsrs	r3, r3, #6
 80096a8:	4a08      	ldr	r2, [pc, #32]	; (80096cc <vPortSetupTimerInterrupt+0x40>)
 80096aa:	3b01      	subs	r3, #1
 80096ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096ae:	4b03      	ldr	r3, [pc, #12]	; (80096bc <vPortSetupTimerInterrupt+0x30>)
 80096b0:	2207      	movs	r2, #7
 80096b2:	601a      	str	r2, [r3, #0]
}
 80096b4:	bf00      	nop
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bc80      	pop	{r7}
 80096ba:	4770      	bx	lr
 80096bc:	e000e010 	.word	0xe000e010
 80096c0:	e000e018 	.word	0xe000e018
 80096c4:	20000000 	.word	0x20000000
 80096c8:	10624dd3 	.word	0x10624dd3
 80096cc:	e000e014 	.word	0xe000e014

080096d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096d6:	f3ef 8305 	mrs	r3, IPSR
 80096da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b0f      	cmp	r3, #15
 80096e0:	d914      	bls.n	800970c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096e2:	4a16      	ldr	r2, [pc, #88]	; (800973c <vPortValidateInterruptPriority+0x6c>)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4413      	add	r3, r2
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096ec:	4b14      	ldr	r3, [pc, #80]	; (8009740 <vPortValidateInterruptPriority+0x70>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	7afa      	ldrb	r2, [r7, #11]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d20a      	bcs.n	800970c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	607b      	str	r3, [r7, #4]
}
 8009708:	bf00      	nop
 800970a:	e7fe      	b.n	800970a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800970c:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <vPortValidateInterruptPriority+0x74>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009714:	4b0c      	ldr	r3, [pc, #48]	; (8009748 <vPortValidateInterruptPriority+0x78>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	429a      	cmp	r2, r3
 800971a:	d90a      	bls.n	8009732 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	603b      	str	r3, [r7, #0]
}
 800972e:	bf00      	nop
 8009730:	e7fe      	b.n	8009730 <vPortValidateInterruptPriority+0x60>
	}
 8009732:	bf00      	nop
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	bc80      	pop	{r7}
 800973a:	4770      	bx	lr
 800973c:	e000e3f0 	.word	0xe000e3f0
 8009740:	20000fd4 	.word	0x20000fd4
 8009744:	e000ed0c 	.word	0xe000ed0c
 8009748:	20000fd8 	.word	0x20000fd8

0800974c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08a      	sub	sp, #40	; 0x28
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009754:	2300      	movs	r3, #0
 8009756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009758:	f7fe faf0 	bl	8007d3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800975c:	4b58      	ldr	r3, [pc, #352]	; (80098c0 <pvPortMalloc+0x174>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009764:	f000 f910 	bl	8009988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009768:	4b56      	ldr	r3, [pc, #344]	; (80098c4 <pvPortMalloc+0x178>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4013      	ands	r3, r2
 8009770:	2b00      	cmp	r3, #0
 8009772:	f040 808e 	bne.w	8009892 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01d      	beq.n	80097b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800977c:	2208      	movs	r2, #8
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4413      	add	r3, r2
 8009782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	2b00      	cmp	r3, #0
 800978c:	d014      	beq.n	80097b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f023 0307 	bic.w	r3, r3, #7
 8009794:	3308      	adds	r3, #8
 8009796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f003 0307 	and.w	r3, r3, #7
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00a      	beq.n	80097b8 <pvPortMalloc+0x6c>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	617b      	str	r3, [r7, #20]
}
 80097b4:	bf00      	nop
 80097b6:	e7fe      	b.n	80097b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d069      	beq.n	8009892 <pvPortMalloc+0x146>
 80097be:	4b42      	ldr	r3, [pc, #264]	; (80098c8 <pvPortMalloc+0x17c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d864      	bhi.n	8009892 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097c8:	4b40      	ldr	r3, [pc, #256]	; (80098cc <pvPortMalloc+0x180>)
 80097ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097cc:	4b3f      	ldr	r3, [pc, #252]	; (80098cc <pvPortMalloc+0x180>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097d2:	e004      	b.n	80097de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d903      	bls.n	80097f0 <pvPortMalloc+0xa4>
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1f1      	bne.n	80097d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097f0:	4b33      	ldr	r3, [pc, #204]	; (80098c0 <pvPortMalloc+0x174>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d04b      	beq.n	8009892 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2208      	movs	r2, #8
 8009800:	4413      	add	r3, r2
 8009802:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	1ad2      	subs	r2, r2, r3
 8009814:	2308      	movs	r3, #8
 8009816:	005b      	lsls	r3, r3, #1
 8009818:	429a      	cmp	r2, r3
 800981a:	d91f      	bls.n	800985c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800981c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4413      	add	r3, r2
 8009822:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	f003 0307 	and.w	r3, r3, #7
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <pvPortMalloc+0xf8>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	613b      	str	r3, [r7, #16]
}
 8009840:	bf00      	nop
 8009842:	e7fe      	b.n	8009842 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	1ad2      	subs	r2, r2, r3
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009856:	69b8      	ldr	r0, [r7, #24]
 8009858:	f000 f8f8 	bl	8009a4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800985c:	4b1a      	ldr	r3, [pc, #104]	; (80098c8 <pvPortMalloc+0x17c>)
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	4a18      	ldr	r2, [pc, #96]	; (80098c8 <pvPortMalloc+0x17c>)
 8009868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800986a:	4b17      	ldr	r3, [pc, #92]	; (80098c8 <pvPortMalloc+0x17c>)
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	4b18      	ldr	r3, [pc, #96]	; (80098d0 <pvPortMalloc+0x184>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	429a      	cmp	r2, r3
 8009874:	d203      	bcs.n	800987e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009876:	4b14      	ldr	r3, [pc, #80]	; (80098c8 <pvPortMalloc+0x17c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a15      	ldr	r2, [pc, #84]	; (80098d0 <pvPortMalloc+0x184>)
 800987c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	4b10      	ldr	r3, [pc, #64]	; (80098c4 <pvPortMalloc+0x178>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	431a      	orrs	r2, r3
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009892:	f7fe fa61 	bl	8007d58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	f003 0307 	and.w	r3, r3, #7
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00a      	beq.n	80098b6 <pvPortMalloc+0x16a>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	60fb      	str	r3, [r7, #12]
}
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <pvPortMalloc+0x168>
	return pvReturn;
 80098b6:	69fb      	ldr	r3, [r7, #28]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3728      	adds	r7, #40	; 0x28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20001be4 	.word	0x20001be4
 80098c4:	20001bf0 	.word	0x20001bf0
 80098c8:	20001be8 	.word	0x20001be8
 80098cc:	20001bdc 	.word	0x20001bdc
 80098d0:	20001bec 	.word	0x20001bec

080098d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d048      	beq.n	8009978 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098e6:	2308      	movs	r3, #8
 80098e8:	425b      	negs	r3, r3
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	4413      	add	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	4b21      	ldr	r3, [pc, #132]	; (8009980 <vPortFree+0xac>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4013      	ands	r3, r2
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10a      	bne.n	8009918 <vPortFree+0x44>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	60fb      	str	r3, [r7, #12]
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00a      	beq.n	8009936 <vPortFree+0x62>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	60bb      	str	r3, [r7, #8]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	4b11      	ldr	r3, [pc, #68]	; (8009980 <vPortFree+0xac>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4013      	ands	r3, r2
 8009940:	2b00      	cmp	r3, #0
 8009942:	d019      	beq.n	8009978 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d115      	bne.n	8009978 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	4b0b      	ldr	r3, [pc, #44]	; (8009980 <vPortFree+0xac>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	43db      	mvns	r3, r3
 8009956:	401a      	ands	r2, r3
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800995c:	f7fe f9ee 	bl	8007d3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	4b07      	ldr	r3, [pc, #28]	; (8009984 <vPortFree+0xb0>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4413      	add	r3, r2
 800996a:	4a06      	ldr	r2, [pc, #24]	; (8009984 <vPortFree+0xb0>)
 800996c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800996e:	6938      	ldr	r0, [r7, #16]
 8009970:	f000 f86c 	bl	8009a4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009974:	f7fe f9f0 	bl	8007d58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009978:	bf00      	nop
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	20001bf0 	.word	0x20001bf0
 8009984:	20001be8 	.word	0x20001be8

08009988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800998e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009994:	4b27      	ldr	r3, [pc, #156]	; (8009a34 <prvHeapInit+0xac>)
 8009996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f003 0307 	and.w	r3, r3, #7
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00c      	beq.n	80099bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3307      	adds	r3, #7
 80099a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f023 0307 	bic.w	r3, r3, #7
 80099ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	4a1f      	ldr	r2, [pc, #124]	; (8009a34 <prvHeapInit+0xac>)
 80099b8:	4413      	add	r3, r2
 80099ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099c0:	4a1d      	ldr	r2, [pc, #116]	; (8009a38 <prvHeapInit+0xb0>)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099c6:	4b1c      	ldr	r3, [pc, #112]	; (8009a38 <prvHeapInit+0xb0>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	4413      	add	r3, r2
 80099d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099d4:	2208      	movs	r2, #8
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	1a9b      	subs	r3, r3, r2
 80099da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 0307 	bic.w	r3, r3, #7
 80099e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4a15      	ldr	r2, [pc, #84]	; (8009a3c <prvHeapInit+0xb4>)
 80099e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099ea:	4b14      	ldr	r3, [pc, #80]	; (8009a3c <prvHeapInit+0xb4>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2200      	movs	r2, #0
 80099f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099f2:	4b12      	ldr	r3, [pc, #72]	; (8009a3c <prvHeapInit+0xb4>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	1ad2      	subs	r2, r2, r3
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a08:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <prvHeapInit+0xb4>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	4a0a      	ldr	r2, [pc, #40]	; (8009a40 <prvHeapInit+0xb8>)
 8009a16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	4a09      	ldr	r2, [pc, #36]	; (8009a44 <prvHeapInit+0xbc>)
 8009a1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a20:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <prvHeapInit+0xc0>)
 8009a22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a26:	601a      	str	r2, [r3, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bc80      	pop	{r7}
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	20000fdc 	.word	0x20000fdc
 8009a38:	20001bdc 	.word	0x20001bdc
 8009a3c:	20001be4 	.word	0x20001be4
 8009a40:	20001bec 	.word	0x20001bec
 8009a44:	20001be8 	.word	0x20001be8
 8009a48:	20001bf0 	.word	0x20001bf0

08009a4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a54:	4b27      	ldr	r3, [pc, #156]	; (8009af4 <prvInsertBlockIntoFreeList+0xa8>)
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	e002      	b.n	8009a60 <prvInsertBlockIntoFreeList+0x14>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	60fb      	str	r3, [r7, #12]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d8f7      	bhi.n	8009a5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	4413      	add	r3, r2
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d108      	bne.n	8009a8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	441a      	add	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	441a      	add	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d118      	bne.n	8009ad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	4b14      	ldr	r3, [pc, #80]	; (8009af8 <prvInsertBlockIntoFreeList+0xac>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d00d      	beq.n	8009aca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	441a      	add	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	e008      	b.n	8009adc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009aca:	4b0b      	ldr	r3, [pc, #44]	; (8009af8 <prvInsertBlockIntoFreeList+0xac>)
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	e003      	b.n	8009adc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d002      	beq.n	8009aea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aea:	bf00      	nop
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bc80      	pop	{r7}
 8009af2:	4770      	bx	lr
 8009af4:	20001bdc 	.word	0x20001bdc
 8009af8:	20001be4 	.word	0x20001be4

08009afc <__errno>:
 8009afc:	4b01      	ldr	r3, [pc, #4]	; (8009b04 <__errno+0x8>)
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	20000010 	.word	0x20000010

08009b08 <std>:
 8009b08:	2300      	movs	r3, #0
 8009b0a:	b510      	push	{r4, lr}
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b16:	6083      	str	r3, [r0, #8]
 8009b18:	8181      	strh	r1, [r0, #12]
 8009b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b1c:	81c2      	strh	r2, [r0, #14]
 8009b1e:	6183      	str	r3, [r0, #24]
 8009b20:	4619      	mov	r1, r3
 8009b22:	2208      	movs	r2, #8
 8009b24:	305c      	adds	r0, #92	; 0x5c
 8009b26:	f000 f91a 	bl	8009d5e <memset>
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <std+0x38>)
 8009b2c:	6224      	str	r4, [r4, #32]
 8009b2e:	6263      	str	r3, [r4, #36]	; 0x24
 8009b30:	4b04      	ldr	r3, [pc, #16]	; (8009b44 <std+0x3c>)
 8009b32:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b34:	4b04      	ldr	r3, [pc, #16]	; (8009b48 <std+0x40>)
 8009b36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b38:	4b04      	ldr	r3, [pc, #16]	; (8009b4c <std+0x44>)
 8009b3a:	6323      	str	r3, [r4, #48]	; 0x30
 8009b3c:	bd10      	pop	{r4, pc}
 8009b3e:	bf00      	nop
 8009b40:	0800a7d9 	.word	0x0800a7d9
 8009b44:	0800a7fb 	.word	0x0800a7fb
 8009b48:	0800a833 	.word	0x0800a833
 8009b4c:	0800a857 	.word	0x0800a857

08009b50 <_cleanup_r>:
 8009b50:	4901      	ldr	r1, [pc, #4]	; (8009b58 <_cleanup_r+0x8>)
 8009b52:	f000 b8af 	b.w	8009cb4 <_fwalk_reent>
 8009b56:	bf00      	nop
 8009b58:	0800b6a9 	.word	0x0800b6a9

08009b5c <__sfmoreglue>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	2568      	movs	r5, #104	; 0x68
 8009b60:	1e4a      	subs	r2, r1, #1
 8009b62:	4355      	muls	r5, r2
 8009b64:	460e      	mov	r6, r1
 8009b66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b6a:	f000 f901 	bl	8009d70 <_malloc_r>
 8009b6e:	4604      	mov	r4, r0
 8009b70:	b140      	cbz	r0, 8009b84 <__sfmoreglue+0x28>
 8009b72:	2100      	movs	r1, #0
 8009b74:	e9c0 1600 	strd	r1, r6, [r0]
 8009b78:	300c      	adds	r0, #12
 8009b7a:	60a0      	str	r0, [r4, #8]
 8009b7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b80:	f000 f8ed 	bl	8009d5e <memset>
 8009b84:	4620      	mov	r0, r4
 8009b86:	bd70      	pop	{r4, r5, r6, pc}

08009b88 <__sfp_lock_acquire>:
 8009b88:	4801      	ldr	r0, [pc, #4]	; (8009b90 <__sfp_lock_acquire+0x8>)
 8009b8a:	f000 b8d8 	b.w	8009d3e <__retarget_lock_acquire_recursive>
 8009b8e:	bf00      	nop
 8009b90:	20001ec8 	.word	0x20001ec8

08009b94 <__sfp_lock_release>:
 8009b94:	4801      	ldr	r0, [pc, #4]	; (8009b9c <__sfp_lock_release+0x8>)
 8009b96:	f000 b8d3 	b.w	8009d40 <__retarget_lock_release_recursive>
 8009b9a:	bf00      	nop
 8009b9c:	20001ec8 	.word	0x20001ec8

08009ba0 <__sinit_lock_acquire>:
 8009ba0:	4801      	ldr	r0, [pc, #4]	; (8009ba8 <__sinit_lock_acquire+0x8>)
 8009ba2:	f000 b8cc 	b.w	8009d3e <__retarget_lock_acquire_recursive>
 8009ba6:	bf00      	nop
 8009ba8:	20001ec3 	.word	0x20001ec3

08009bac <__sinit_lock_release>:
 8009bac:	4801      	ldr	r0, [pc, #4]	; (8009bb4 <__sinit_lock_release+0x8>)
 8009bae:	f000 b8c7 	b.w	8009d40 <__retarget_lock_release_recursive>
 8009bb2:	bf00      	nop
 8009bb4:	20001ec3 	.word	0x20001ec3

08009bb8 <__sinit>:
 8009bb8:	b510      	push	{r4, lr}
 8009bba:	4604      	mov	r4, r0
 8009bbc:	f7ff fff0 	bl	8009ba0 <__sinit_lock_acquire>
 8009bc0:	69a3      	ldr	r3, [r4, #24]
 8009bc2:	b11b      	cbz	r3, 8009bcc <__sinit+0x14>
 8009bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc8:	f7ff bff0 	b.w	8009bac <__sinit_lock_release>
 8009bcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bd0:	6523      	str	r3, [r4, #80]	; 0x50
 8009bd2:	4b13      	ldr	r3, [pc, #76]	; (8009c20 <__sinit+0x68>)
 8009bd4:	4a13      	ldr	r2, [pc, #76]	; (8009c24 <__sinit+0x6c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bda:	42a3      	cmp	r3, r4
 8009bdc:	bf08      	it	eq
 8009bde:	2301      	moveq	r3, #1
 8009be0:	4620      	mov	r0, r4
 8009be2:	bf08      	it	eq
 8009be4:	61a3      	streq	r3, [r4, #24]
 8009be6:	f000 f81f 	bl	8009c28 <__sfp>
 8009bea:	6060      	str	r0, [r4, #4]
 8009bec:	4620      	mov	r0, r4
 8009bee:	f000 f81b 	bl	8009c28 <__sfp>
 8009bf2:	60a0      	str	r0, [r4, #8]
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f000 f817 	bl	8009c28 <__sfp>
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2104      	movs	r1, #4
 8009bfe:	60e0      	str	r0, [r4, #12]
 8009c00:	6860      	ldr	r0, [r4, #4]
 8009c02:	f7ff ff81 	bl	8009b08 <std>
 8009c06:	2201      	movs	r2, #1
 8009c08:	2109      	movs	r1, #9
 8009c0a:	68a0      	ldr	r0, [r4, #8]
 8009c0c:	f7ff ff7c 	bl	8009b08 <std>
 8009c10:	2202      	movs	r2, #2
 8009c12:	2112      	movs	r1, #18
 8009c14:	68e0      	ldr	r0, [r4, #12]
 8009c16:	f7ff ff77 	bl	8009b08 <std>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	61a3      	str	r3, [r4, #24]
 8009c1e:	e7d1      	b.n	8009bc4 <__sinit+0xc>
 8009c20:	0800c81c 	.word	0x0800c81c
 8009c24:	08009b51 	.word	0x08009b51

08009c28 <__sfp>:
 8009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2a:	4607      	mov	r7, r0
 8009c2c:	f7ff ffac 	bl	8009b88 <__sfp_lock_acquire>
 8009c30:	4b1e      	ldr	r3, [pc, #120]	; (8009cac <__sfp+0x84>)
 8009c32:	681e      	ldr	r6, [r3, #0]
 8009c34:	69b3      	ldr	r3, [r6, #24]
 8009c36:	b913      	cbnz	r3, 8009c3e <__sfp+0x16>
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f7ff ffbd 	bl	8009bb8 <__sinit>
 8009c3e:	3648      	adds	r6, #72	; 0x48
 8009c40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	d503      	bpl.n	8009c50 <__sfp+0x28>
 8009c48:	6833      	ldr	r3, [r6, #0]
 8009c4a:	b30b      	cbz	r3, 8009c90 <__sfp+0x68>
 8009c4c:	6836      	ldr	r6, [r6, #0]
 8009c4e:	e7f7      	b.n	8009c40 <__sfp+0x18>
 8009c50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c54:	b9d5      	cbnz	r5, 8009c8c <__sfp+0x64>
 8009c56:	4b16      	ldr	r3, [pc, #88]	; (8009cb0 <__sfp+0x88>)
 8009c58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c5c:	60e3      	str	r3, [r4, #12]
 8009c5e:	6665      	str	r5, [r4, #100]	; 0x64
 8009c60:	f000 f86c 	bl	8009d3c <__retarget_lock_init_recursive>
 8009c64:	f7ff ff96 	bl	8009b94 <__sfp_lock_release>
 8009c68:	2208      	movs	r2, #8
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c74:	6025      	str	r5, [r4, #0]
 8009c76:	61a5      	str	r5, [r4, #24]
 8009c78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c7c:	f000 f86f 	bl	8009d5e <memset>
 8009c80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c88:	4620      	mov	r0, r4
 8009c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c8c:	3468      	adds	r4, #104	; 0x68
 8009c8e:	e7d9      	b.n	8009c44 <__sfp+0x1c>
 8009c90:	2104      	movs	r1, #4
 8009c92:	4638      	mov	r0, r7
 8009c94:	f7ff ff62 	bl	8009b5c <__sfmoreglue>
 8009c98:	4604      	mov	r4, r0
 8009c9a:	6030      	str	r0, [r6, #0]
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d1d5      	bne.n	8009c4c <__sfp+0x24>
 8009ca0:	f7ff ff78 	bl	8009b94 <__sfp_lock_release>
 8009ca4:	230c      	movs	r3, #12
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	e7ee      	b.n	8009c88 <__sfp+0x60>
 8009caa:	bf00      	nop
 8009cac:	0800c81c 	.word	0x0800c81c
 8009cb0:	ffff0001 	.word	0xffff0001

08009cb4 <_fwalk_reent>:
 8009cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb8:	4606      	mov	r6, r0
 8009cba:	4688      	mov	r8, r1
 8009cbc:	2700      	movs	r7, #0
 8009cbe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cc6:	f1b9 0901 	subs.w	r9, r9, #1
 8009cca:	d505      	bpl.n	8009cd8 <_fwalk_reent+0x24>
 8009ccc:	6824      	ldr	r4, [r4, #0]
 8009cce:	2c00      	cmp	r4, #0
 8009cd0:	d1f7      	bne.n	8009cc2 <_fwalk_reent+0xe>
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd8:	89ab      	ldrh	r3, [r5, #12]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d907      	bls.n	8009cee <_fwalk_reent+0x3a>
 8009cde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	d003      	beq.n	8009cee <_fwalk_reent+0x3a>
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	4630      	mov	r0, r6
 8009cea:	47c0      	blx	r8
 8009cec:	4307      	orrs	r7, r0
 8009cee:	3568      	adds	r5, #104	; 0x68
 8009cf0:	e7e9      	b.n	8009cc6 <_fwalk_reent+0x12>
	...

08009cf4 <__libc_init_array>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	2600      	movs	r6, #0
 8009cf8:	4d0c      	ldr	r5, [pc, #48]	; (8009d2c <__libc_init_array+0x38>)
 8009cfa:	4c0d      	ldr	r4, [pc, #52]	; (8009d30 <__libc_init_array+0x3c>)
 8009cfc:	1b64      	subs	r4, r4, r5
 8009cfe:	10a4      	asrs	r4, r4, #2
 8009d00:	42a6      	cmp	r6, r4
 8009d02:	d109      	bne.n	8009d18 <__libc_init_array+0x24>
 8009d04:	f002 fc6c 	bl	800c5e0 <_init>
 8009d08:	2600      	movs	r6, #0
 8009d0a:	4d0a      	ldr	r5, [pc, #40]	; (8009d34 <__libc_init_array+0x40>)
 8009d0c:	4c0a      	ldr	r4, [pc, #40]	; (8009d38 <__libc_init_array+0x44>)
 8009d0e:	1b64      	subs	r4, r4, r5
 8009d10:	10a4      	asrs	r4, r4, #2
 8009d12:	42a6      	cmp	r6, r4
 8009d14:	d105      	bne.n	8009d22 <__libc_init_array+0x2e>
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1c:	4798      	blx	r3
 8009d1e:	3601      	adds	r6, #1
 8009d20:	e7ee      	b.n	8009d00 <__libc_init_array+0xc>
 8009d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d26:	4798      	blx	r3
 8009d28:	3601      	adds	r6, #1
 8009d2a:	e7f2      	b.n	8009d12 <__libc_init_array+0x1e>
 8009d2c:	0800cb9c 	.word	0x0800cb9c
 8009d30:	0800cb9c 	.word	0x0800cb9c
 8009d34:	0800cb9c 	.word	0x0800cb9c
 8009d38:	0800cba0 	.word	0x0800cba0

08009d3c <__retarget_lock_init_recursive>:
 8009d3c:	4770      	bx	lr

08009d3e <__retarget_lock_acquire_recursive>:
 8009d3e:	4770      	bx	lr

08009d40 <__retarget_lock_release_recursive>:
 8009d40:	4770      	bx	lr

08009d42 <memcpy>:
 8009d42:	440a      	add	r2, r1
 8009d44:	4291      	cmp	r1, r2
 8009d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d4a:	d100      	bne.n	8009d4e <memcpy+0xc>
 8009d4c:	4770      	bx	lr
 8009d4e:	b510      	push	{r4, lr}
 8009d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d54:	4291      	cmp	r1, r2
 8009d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d5a:	d1f9      	bne.n	8009d50 <memcpy+0xe>
 8009d5c:	bd10      	pop	{r4, pc}

08009d5e <memset>:
 8009d5e:	4603      	mov	r3, r0
 8009d60:	4402      	add	r2, r0
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d100      	bne.n	8009d68 <memset+0xa>
 8009d66:	4770      	bx	lr
 8009d68:	f803 1b01 	strb.w	r1, [r3], #1
 8009d6c:	e7f9      	b.n	8009d62 <memset+0x4>
	...

08009d70 <_malloc_r>:
 8009d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d72:	1ccd      	adds	r5, r1, #3
 8009d74:	f025 0503 	bic.w	r5, r5, #3
 8009d78:	3508      	adds	r5, #8
 8009d7a:	2d0c      	cmp	r5, #12
 8009d7c:	bf38      	it	cc
 8009d7e:	250c      	movcc	r5, #12
 8009d80:	2d00      	cmp	r5, #0
 8009d82:	4606      	mov	r6, r0
 8009d84:	db01      	blt.n	8009d8a <_malloc_r+0x1a>
 8009d86:	42a9      	cmp	r1, r5
 8009d88:	d903      	bls.n	8009d92 <_malloc_r+0x22>
 8009d8a:	230c      	movs	r3, #12
 8009d8c:	6033      	str	r3, [r6, #0]
 8009d8e:	2000      	movs	r0, #0
 8009d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d92:	f001 fcf1 	bl	800b778 <__malloc_lock>
 8009d96:	4921      	ldr	r1, [pc, #132]	; (8009e1c <_malloc_r+0xac>)
 8009d98:	680a      	ldr	r2, [r1, #0]
 8009d9a:	4614      	mov	r4, r2
 8009d9c:	b99c      	cbnz	r4, 8009dc6 <_malloc_r+0x56>
 8009d9e:	4f20      	ldr	r7, [pc, #128]	; (8009e20 <_malloc_r+0xb0>)
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	b923      	cbnz	r3, 8009dae <_malloc_r+0x3e>
 8009da4:	4621      	mov	r1, r4
 8009da6:	4630      	mov	r0, r6
 8009da8:	f000 fd06 	bl	800a7b8 <_sbrk_r>
 8009dac:	6038      	str	r0, [r7, #0]
 8009dae:	4629      	mov	r1, r5
 8009db0:	4630      	mov	r0, r6
 8009db2:	f000 fd01 	bl	800a7b8 <_sbrk_r>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	d123      	bne.n	8009e02 <_malloc_r+0x92>
 8009dba:	230c      	movs	r3, #12
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	6033      	str	r3, [r6, #0]
 8009dc0:	f001 fce0 	bl	800b784 <__malloc_unlock>
 8009dc4:	e7e3      	b.n	8009d8e <_malloc_r+0x1e>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	1b5b      	subs	r3, r3, r5
 8009dca:	d417      	bmi.n	8009dfc <_malloc_r+0x8c>
 8009dcc:	2b0b      	cmp	r3, #11
 8009dce:	d903      	bls.n	8009dd8 <_malloc_r+0x68>
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	441c      	add	r4, r3
 8009dd4:	6025      	str	r5, [r4, #0]
 8009dd6:	e004      	b.n	8009de2 <_malloc_r+0x72>
 8009dd8:	6863      	ldr	r3, [r4, #4]
 8009dda:	42a2      	cmp	r2, r4
 8009ddc:	bf0c      	ite	eq
 8009dde:	600b      	streq	r3, [r1, #0]
 8009de0:	6053      	strne	r3, [r2, #4]
 8009de2:	4630      	mov	r0, r6
 8009de4:	f001 fcce 	bl	800b784 <__malloc_unlock>
 8009de8:	f104 000b 	add.w	r0, r4, #11
 8009dec:	1d23      	adds	r3, r4, #4
 8009dee:	f020 0007 	bic.w	r0, r0, #7
 8009df2:	1ac2      	subs	r2, r0, r3
 8009df4:	d0cc      	beq.n	8009d90 <_malloc_r+0x20>
 8009df6:	1a1b      	subs	r3, r3, r0
 8009df8:	50a3      	str	r3, [r4, r2]
 8009dfa:	e7c9      	b.n	8009d90 <_malloc_r+0x20>
 8009dfc:	4622      	mov	r2, r4
 8009dfe:	6864      	ldr	r4, [r4, #4]
 8009e00:	e7cc      	b.n	8009d9c <_malloc_r+0x2c>
 8009e02:	1cc4      	adds	r4, r0, #3
 8009e04:	f024 0403 	bic.w	r4, r4, #3
 8009e08:	42a0      	cmp	r0, r4
 8009e0a:	d0e3      	beq.n	8009dd4 <_malloc_r+0x64>
 8009e0c:	1a21      	subs	r1, r4, r0
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f000 fcd2 	bl	800a7b8 <_sbrk_r>
 8009e14:	3001      	adds	r0, #1
 8009e16:	d1dd      	bne.n	8009dd4 <_malloc_r+0x64>
 8009e18:	e7cf      	b.n	8009dba <_malloc_r+0x4a>
 8009e1a:	bf00      	nop
 8009e1c:	20001bf4 	.word	0x20001bf4
 8009e20:	20001bf8 	.word	0x20001bf8

08009e24 <__cvt>:
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e2a:	461f      	mov	r7, r3
 8009e2c:	bfbb      	ittet	lt
 8009e2e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009e32:	461f      	movlt	r7, r3
 8009e34:	2300      	movge	r3, #0
 8009e36:	232d      	movlt	r3, #45	; 0x2d
 8009e38:	b088      	sub	sp, #32
 8009e3a:	4614      	mov	r4, r2
 8009e3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009e40:	7013      	strb	r3, [r2, #0]
 8009e42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e44:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009e48:	f023 0820 	bic.w	r8, r3, #32
 8009e4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e50:	d005      	beq.n	8009e5e <__cvt+0x3a>
 8009e52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009e56:	d100      	bne.n	8009e5a <__cvt+0x36>
 8009e58:	3501      	adds	r5, #1
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	e000      	b.n	8009e60 <__cvt+0x3c>
 8009e5e:	2303      	movs	r3, #3
 8009e60:	aa07      	add	r2, sp, #28
 8009e62:	9204      	str	r2, [sp, #16]
 8009e64:	aa06      	add	r2, sp, #24
 8009e66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009e6a:	e9cd 3500 	strd	r3, r5, [sp]
 8009e6e:	4622      	mov	r2, r4
 8009e70:	463b      	mov	r3, r7
 8009e72:	f000 fda5 	bl	800a9c0 <_dtoa_r>
 8009e76:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	d102      	bne.n	8009e84 <__cvt+0x60>
 8009e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e80:	07db      	lsls	r3, r3, #31
 8009e82:	d522      	bpl.n	8009eca <__cvt+0xa6>
 8009e84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e88:	eb06 0905 	add.w	r9, r6, r5
 8009e8c:	d110      	bne.n	8009eb0 <__cvt+0x8c>
 8009e8e:	7833      	ldrb	r3, [r6, #0]
 8009e90:	2b30      	cmp	r3, #48	; 0x30
 8009e92:	d10a      	bne.n	8009eaa <__cvt+0x86>
 8009e94:	2200      	movs	r2, #0
 8009e96:	2300      	movs	r3, #0
 8009e98:	4620      	mov	r0, r4
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f7f6 fd84 	bl	80009a8 <__aeabi_dcmpeq>
 8009ea0:	b918      	cbnz	r0, 8009eaa <__cvt+0x86>
 8009ea2:	f1c5 0501 	rsb	r5, r5, #1
 8009ea6:	f8ca 5000 	str.w	r5, [sl]
 8009eaa:	f8da 3000 	ldr.w	r3, [sl]
 8009eae:	4499      	add	r9, r3
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	f7f6 fd76 	bl	80009a8 <__aeabi_dcmpeq>
 8009ebc:	b108      	cbz	r0, 8009ec2 <__cvt+0x9e>
 8009ebe:	f8cd 901c 	str.w	r9, [sp, #28]
 8009ec2:	2230      	movs	r2, #48	; 0x30
 8009ec4:	9b07      	ldr	r3, [sp, #28]
 8009ec6:	454b      	cmp	r3, r9
 8009ec8:	d307      	bcc.n	8009eda <__cvt+0xb6>
 8009eca:	4630      	mov	r0, r6
 8009ecc:	9b07      	ldr	r3, [sp, #28]
 8009ece:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ed0:	1b9b      	subs	r3, r3, r6
 8009ed2:	6013      	str	r3, [r2, #0]
 8009ed4:	b008      	add	sp, #32
 8009ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eda:	1c59      	adds	r1, r3, #1
 8009edc:	9107      	str	r1, [sp, #28]
 8009ede:	701a      	strb	r2, [r3, #0]
 8009ee0:	e7f0      	b.n	8009ec4 <__cvt+0xa0>

08009ee2 <__exponent>:
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ee6:	2900      	cmp	r1, #0
 8009ee8:	f803 2b02 	strb.w	r2, [r3], #2
 8009eec:	bfb6      	itet	lt
 8009eee:	222d      	movlt	r2, #45	; 0x2d
 8009ef0:	222b      	movge	r2, #43	; 0x2b
 8009ef2:	4249      	neglt	r1, r1
 8009ef4:	2909      	cmp	r1, #9
 8009ef6:	7042      	strb	r2, [r0, #1]
 8009ef8:	dd2b      	ble.n	8009f52 <__exponent+0x70>
 8009efa:	f10d 0407 	add.w	r4, sp, #7
 8009efe:	46a4      	mov	ip, r4
 8009f00:	270a      	movs	r7, #10
 8009f02:	fb91 f6f7 	sdiv	r6, r1, r7
 8009f06:	460a      	mov	r2, r1
 8009f08:	46a6      	mov	lr, r4
 8009f0a:	fb07 1516 	mls	r5, r7, r6, r1
 8009f0e:	2a63      	cmp	r2, #99	; 0x63
 8009f10:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009f14:	4631      	mov	r1, r6
 8009f16:	f104 34ff 	add.w	r4, r4, #4294967295
 8009f1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009f1e:	dcf0      	bgt.n	8009f02 <__exponent+0x20>
 8009f20:	3130      	adds	r1, #48	; 0x30
 8009f22:	f1ae 0502 	sub.w	r5, lr, #2
 8009f26:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	1c44      	adds	r4, r0, #1
 8009f2e:	4561      	cmp	r1, ip
 8009f30:	d30a      	bcc.n	8009f48 <__exponent+0x66>
 8009f32:	f10d 0209 	add.w	r2, sp, #9
 8009f36:	eba2 020e 	sub.w	r2, r2, lr
 8009f3a:	4565      	cmp	r5, ip
 8009f3c:	bf88      	it	hi
 8009f3e:	2200      	movhi	r2, #0
 8009f40:	4413      	add	r3, r2
 8009f42:	1a18      	subs	r0, r3, r0
 8009f44:	b003      	add	sp, #12
 8009f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f4c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009f50:	e7ed      	b.n	8009f2e <__exponent+0x4c>
 8009f52:	2330      	movs	r3, #48	; 0x30
 8009f54:	3130      	adds	r1, #48	; 0x30
 8009f56:	7083      	strb	r3, [r0, #2]
 8009f58:	70c1      	strb	r1, [r0, #3]
 8009f5a:	1d03      	adds	r3, r0, #4
 8009f5c:	e7f1      	b.n	8009f42 <__exponent+0x60>
	...

08009f60 <_printf_float>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	b091      	sub	sp, #68	; 0x44
 8009f66:	460c      	mov	r4, r1
 8009f68:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009f6c:	4616      	mov	r6, r2
 8009f6e:	461f      	mov	r7, r3
 8009f70:	4605      	mov	r5, r0
 8009f72:	f001 fbd5 	bl	800b720 <_localeconv_r>
 8009f76:	6803      	ldr	r3, [r0, #0]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f7c:	f7f6 f8e8 	bl	8000150 <strlen>
 8009f80:	2300      	movs	r3, #0
 8009f82:	930e      	str	r3, [sp, #56]	; 0x38
 8009f84:	f8d8 3000 	ldr.w	r3, [r8]
 8009f88:	900a      	str	r0, [sp, #40]	; 0x28
 8009f8a:	3307      	adds	r3, #7
 8009f8c:	f023 0307 	bic.w	r3, r3, #7
 8009f90:	f103 0208 	add.w	r2, r3, #8
 8009f94:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009f98:	f8d4 b000 	ldr.w	fp, [r4]
 8009f9c:	f8c8 2000 	str.w	r2, [r8]
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009fa8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009fac:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	4b9c      	ldr	r3, [pc, #624]	; (800a22c <_printf_float+0x2cc>)
 8009fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fbc:	f7f6 fd26 	bl	8000a0c <__aeabi_dcmpun>
 8009fc0:	bb70      	cbnz	r0, 800a020 <_printf_float+0xc0>
 8009fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	4b98      	ldr	r3, [pc, #608]	; (800a22c <_printf_float+0x2cc>)
 8009fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fcc:	f7f6 fd00 	bl	80009d0 <__aeabi_dcmple>
 8009fd0:	bb30      	cbnz	r0, 800a020 <_printf_float+0xc0>
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	4651      	mov	r1, sl
 8009fda:	f7f6 fcef 	bl	80009bc <__aeabi_dcmplt>
 8009fde:	b110      	cbz	r0, 8009fe6 <_printf_float+0x86>
 8009fe0:	232d      	movs	r3, #45	; 0x2d
 8009fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fe6:	4b92      	ldr	r3, [pc, #584]	; (800a230 <_printf_float+0x2d0>)
 8009fe8:	4892      	ldr	r0, [pc, #584]	; (800a234 <_printf_float+0x2d4>)
 8009fea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009fee:	bf94      	ite	ls
 8009ff0:	4698      	movls	r8, r3
 8009ff2:	4680      	movhi	r8, r0
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	f04f 0a00 	mov.w	sl, #0
 8009ffa:	6123      	str	r3, [r4, #16]
 8009ffc:	f02b 0304 	bic.w	r3, fp, #4
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	4633      	mov	r3, r6
 800a004:	4621      	mov	r1, r4
 800a006:	4628      	mov	r0, r5
 800a008:	9700      	str	r7, [sp, #0]
 800a00a:	aa0f      	add	r2, sp, #60	; 0x3c
 800a00c:	f000 f9d4 	bl	800a3b8 <_printf_common>
 800a010:	3001      	adds	r0, #1
 800a012:	f040 8090 	bne.w	800a136 <_printf_float+0x1d6>
 800a016:	f04f 30ff 	mov.w	r0, #4294967295
 800a01a:	b011      	add	sp, #68	; 0x44
 800a01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a020:	4642      	mov	r2, r8
 800a022:	4653      	mov	r3, sl
 800a024:	4640      	mov	r0, r8
 800a026:	4651      	mov	r1, sl
 800a028:	f7f6 fcf0 	bl	8000a0c <__aeabi_dcmpun>
 800a02c:	b148      	cbz	r0, 800a042 <_printf_float+0xe2>
 800a02e:	f1ba 0f00 	cmp.w	sl, #0
 800a032:	bfb8      	it	lt
 800a034:	232d      	movlt	r3, #45	; 0x2d
 800a036:	4880      	ldr	r0, [pc, #512]	; (800a238 <_printf_float+0x2d8>)
 800a038:	bfb8      	it	lt
 800a03a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a03e:	4b7f      	ldr	r3, [pc, #508]	; (800a23c <_printf_float+0x2dc>)
 800a040:	e7d3      	b.n	8009fea <_printf_float+0x8a>
 800a042:	6863      	ldr	r3, [r4, #4]
 800a044:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	d142      	bne.n	800a0d2 <_printf_float+0x172>
 800a04c:	2306      	movs	r3, #6
 800a04e:	6063      	str	r3, [r4, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	9206      	str	r2, [sp, #24]
 800a054:	aa0e      	add	r2, sp, #56	; 0x38
 800a056:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a05a:	aa0d      	add	r2, sp, #52	; 0x34
 800a05c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a060:	9203      	str	r2, [sp, #12]
 800a062:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a066:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a06a:	6023      	str	r3, [r4, #0]
 800a06c:	6863      	ldr	r3, [r4, #4]
 800a06e:	4642      	mov	r2, r8
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	4628      	mov	r0, r5
 800a074:	4653      	mov	r3, sl
 800a076:	910b      	str	r1, [sp, #44]	; 0x2c
 800a078:	f7ff fed4 	bl	8009e24 <__cvt>
 800a07c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a07e:	4680      	mov	r8, r0
 800a080:	2947      	cmp	r1, #71	; 0x47
 800a082:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a084:	d108      	bne.n	800a098 <_printf_float+0x138>
 800a086:	1cc8      	adds	r0, r1, #3
 800a088:	db02      	blt.n	800a090 <_printf_float+0x130>
 800a08a:	6863      	ldr	r3, [r4, #4]
 800a08c:	4299      	cmp	r1, r3
 800a08e:	dd40      	ble.n	800a112 <_printf_float+0x1b2>
 800a090:	f1a9 0902 	sub.w	r9, r9, #2
 800a094:	fa5f f989 	uxtb.w	r9, r9
 800a098:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a09c:	d81f      	bhi.n	800a0de <_printf_float+0x17e>
 800a09e:	464a      	mov	r2, r9
 800a0a0:	3901      	subs	r1, #1
 800a0a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a0a6:	910d      	str	r1, [sp, #52]	; 0x34
 800a0a8:	f7ff ff1b 	bl	8009ee2 <__exponent>
 800a0ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0ae:	4682      	mov	sl, r0
 800a0b0:	1813      	adds	r3, r2, r0
 800a0b2:	2a01      	cmp	r2, #1
 800a0b4:	6123      	str	r3, [r4, #16]
 800a0b6:	dc02      	bgt.n	800a0be <_printf_float+0x15e>
 800a0b8:	6822      	ldr	r2, [r4, #0]
 800a0ba:	07d2      	lsls	r2, r2, #31
 800a0bc:	d501      	bpl.n	800a0c2 <_printf_float+0x162>
 800a0be:	3301      	adds	r3, #1
 800a0c0:	6123      	str	r3, [r4, #16]
 800a0c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d09b      	beq.n	800a002 <_printf_float+0xa2>
 800a0ca:	232d      	movs	r3, #45	; 0x2d
 800a0cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0d0:	e797      	b.n	800a002 <_printf_float+0xa2>
 800a0d2:	2947      	cmp	r1, #71	; 0x47
 800a0d4:	d1bc      	bne.n	800a050 <_printf_float+0xf0>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1ba      	bne.n	800a050 <_printf_float+0xf0>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e7b7      	b.n	800a04e <_printf_float+0xee>
 800a0de:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a0e2:	d118      	bne.n	800a116 <_printf_float+0x1b6>
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	6863      	ldr	r3, [r4, #4]
 800a0e8:	dd0b      	ble.n	800a102 <_printf_float+0x1a2>
 800a0ea:	6121      	str	r1, [r4, #16]
 800a0ec:	b913      	cbnz	r3, 800a0f4 <_printf_float+0x194>
 800a0ee:	6822      	ldr	r2, [r4, #0]
 800a0f0:	07d0      	lsls	r0, r2, #31
 800a0f2:	d502      	bpl.n	800a0fa <_printf_float+0x19a>
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	440b      	add	r3, r1
 800a0f8:	6123      	str	r3, [r4, #16]
 800a0fa:	f04f 0a00 	mov.w	sl, #0
 800a0fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a100:	e7df      	b.n	800a0c2 <_printf_float+0x162>
 800a102:	b913      	cbnz	r3, 800a10a <_printf_float+0x1aa>
 800a104:	6822      	ldr	r2, [r4, #0]
 800a106:	07d2      	lsls	r2, r2, #31
 800a108:	d501      	bpl.n	800a10e <_printf_float+0x1ae>
 800a10a:	3302      	adds	r3, #2
 800a10c:	e7f4      	b.n	800a0f8 <_printf_float+0x198>
 800a10e:	2301      	movs	r3, #1
 800a110:	e7f2      	b.n	800a0f8 <_printf_float+0x198>
 800a112:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a118:	4299      	cmp	r1, r3
 800a11a:	db05      	blt.n	800a128 <_printf_float+0x1c8>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	6121      	str	r1, [r4, #16]
 800a120:	07d8      	lsls	r0, r3, #31
 800a122:	d5ea      	bpl.n	800a0fa <_printf_float+0x19a>
 800a124:	1c4b      	adds	r3, r1, #1
 800a126:	e7e7      	b.n	800a0f8 <_printf_float+0x198>
 800a128:	2900      	cmp	r1, #0
 800a12a:	bfcc      	ite	gt
 800a12c:	2201      	movgt	r2, #1
 800a12e:	f1c1 0202 	rsble	r2, r1, #2
 800a132:	4413      	add	r3, r2
 800a134:	e7e0      	b.n	800a0f8 <_printf_float+0x198>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	055a      	lsls	r2, r3, #21
 800a13a:	d407      	bmi.n	800a14c <_printf_float+0x1ec>
 800a13c:	6923      	ldr	r3, [r4, #16]
 800a13e:	4642      	mov	r2, r8
 800a140:	4631      	mov	r1, r6
 800a142:	4628      	mov	r0, r5
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	d12b      	bne.n	800a1a2 <_printf_float+0x242>
 800a14a:	e764      	b.n	800a016 <_printf_float+0xb6>
 800a14c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a150:	f240 80dd 	bls.w	800a30e <_printf_float+0x3ae>
 800a154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a158:	2200      	movs	r2, #0
 800a15a:	2300      	movs	r3, #0
 800a15c:	f7f6 fc24 	bl	80009a8 <__aeabi_dcmpeq>
 800a160:	2800      	cmp	r0, #0
 800a162:	d033      	beq.n	800a1cc <_printf_float+0x26c>
 800a164:	2301      	movs	r3, #1
 800a166:	4631      	mov	r1, r6
 800a168:	4628      	mov	r0, r5
 800a16a:	4a35      	ldr	r2, [pc, #212]	; (800a240 <_printf_float+0x2e0>)
 800a16c:	47b8      	blx	r7
 800a16e:	3001      	adds	r0, #1
 800a170:	f43f af51 	beq.w	800a016 <_printf_float+0xb6>
 800a174:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a178:	429a      	cmp	r2, r3
 800a17a:	db02      	blt.n	800a182 <_printf_float+0x222>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	07d8      	lsls	r0, r3, #31
 800a180:	d50f      	bpl.n	800a1a2 <_printf_float+0x242>
 800a182:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a186:	4631      	mov	r1, r6
 800a188:	4628      	mov	r0, r5
 800a18a:	47b8      	blx	r7
 800a18c:	3001      	adds	r0, #1
 800a18e:	f43f af42 	beq.w	800a016 <_printf_float+0xb6>
 800a192:	f04f 0800 	mov.w	r8, #0
 800a196:	f104 091a 	add.w	r9, r4, #26
 800a19a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a19c:	3b01      	subs	r3, #1
 800a19e:	4543      	cmp	r3, r8
 800a1a0:	dc09      	bgt.n	800a1b6 <_printf_float+0x256>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	079b      	lsls	r3, r3, #30
 800a1a6:	f100 8102 	bmi.w	800a3ae <_printf_float+0x44e>
 800a1aa:	68e0      	ldr	r0, [r4, #12]
 800a1ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1ae:	4298      	cmp	r0, r3
 800a1b0:	bfb8      	it	lt
 800a1b2:	4618      	movlt	r0, r3
 800a1b4:	e731      	b.n	800a01a <_printf_float+0xba>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	464a      	mov	r2, r9
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	f43f af28 	beq.w	800a016 <_printf_float+0xb6>
 800a1c6:	f108 0801 	add.w	r8, r8, #1
 800a1ca:	e7e6      	b.n	800a19a <_printf_float+0x23a>
 800a1cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	dc38      	bgt.n	800a244 <_printf_float+0x2e4>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	4a19      	ldr	r2, [pc, #100]	; (800a240 <_printf_float+0x2e0>)
 800a1da:	47b8      	blx	r7
 800a1dc:	3001      	adds	r0, #1
 800a1de:	f43f af1a 	beq.w	800a016 <_printf_float+0xb6>
 800a1e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	d102      	bne.n	800a1f0 <_printf_float+0x290>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	07d9      	lsls	r1, r3, #31
 800a1ee:	d5d8      	bpl.n	800a1a2 <_printf_float+0x242>
 800a1f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1f4:	4631      	mov	r1, r6
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	47b8      	blx	r7
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	f43f af0b 	beq.w	800a016 <_printf_float+0xb6>
 800a200:	f04f 0900 	mov.w	r9, #0
 800a204:	f104 0a1a 	add.w	sl, r4, #26
 800a208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a20a:	425b      	negs	r3, r3
 800a20c:	454b      	cmp	r3, r9
 800a20e:	dc01      	bgt.n	800a214 <_printf_float+0x2b4>
 800a210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a212:	e794      	b.n	800a13e <_printf_float+0x1de>
 800a214:	2301      	movs	r3, #1
 800a216:	4652      	mov	r2, sl
 800a218:	4631      	mov	r1, r6
 800a21a:	4628      	mov	r0, r5
 800a21c:	47b8      	blx	r7
 800a21e:	3001      	adds	r0, #1
 800a220:	f43f aef9 	beq.w	800a016 <_printf_float+0xb6>
 800a224:	f109 0901 	add.w	r9, r9, #1
 800a228:	e7ee      	b.n	800a208 <_printf_float+0x2a8>
 800a22a:	bf00      	nop
 800a22c:	7fefffff 	.word	0x7fefffff
 800a230:	0800c820 	.word	0x0800c820
 800a234:	0800c824 	.word	0x0800c824
 800a238:	0800c82c 	.word	0x0800c82c
 800a23c:	0800c828 	.word	0x0800c828
 800a240:	0800c830 	.word	0x0800c830
 800a244:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a248:	429a      	cmp	r2, r3
 800a24a:	bfa8      	it	ge
 800a24c:	461a      	movge	r2, r3
 800a24e:	2a00      	cmp	r2, #0
 800a250:	4691      	mov	r9, r2
 800a252:	dc37      	bgt.n	800a2c4 <_printf_float+0x364>
 800a254:	f04f 0b00 	mov.w	fp, #0
 800a258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a25c:	f104 021a 	add.w	r2, r4, #26
 800a260:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a264:	ebaa 0309 	sub.w	r3, sl, r9
 800a268:	455b      	cmp	r3, fp
 800a26a:	dc33      	bgt.n	800a2d4 <_printf_float+0x374>
 800a26c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a270:	429a      	cmp	r2, r3
 800a272:	db3b      	blt.n	800a2ec <_printf_float+0x38c>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	07da      	lsls	r2, r3, #31
 800a278:	d438      	bmi.n	800a2ec <_printf_float+0x38c>
 800a27a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a27c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a27e:	eba2 030a 	sub.w	r3, r2, sl
 800a282:	eba2 0901 	sub.w	r9, r2, r1
 800a286:	4599      	cmp	r9, r3
 800a288:	bfa8      	it	ge
 800a28a:	4699      	movge	r9, r3
 800a28c:	f1b9 0f00 	cmp.w	r9, #0
 800a290:	dc34      	bgt.n	800a2fc <_printf_float+0x39c>
 800a292:	f04f 0800 	mov.w	r8, #0
 800a296:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a29a:	f104 0a1a 	add.w	sl, r4, #26
 800a29e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a2a2:	1a9b      	subs	r3, r3, r2
 800a2a4:	eba3 0309 	sub.w	r3, r3, r9
 800a2a8:	4543      	cmp	r3, r8
 800a2aa:	f77f af7a 	ble.w	800a1a2 <_printf_float+0x242>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4652      	mov	r2, sl
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	47b8      	blx	r7
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	f43f aeac 	beq.w	800a016 <_printf_float+0xb6>
 800a2be:	f108 0801 	add.w	r8, r8, #1
 800a2c2:	e7ec      	b.n	800a29e <_printf_float+0x33e>
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4642      	mov	r2, r8
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	47b8      	blx	r7
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d1c0      	bne.n	800a254 <_printf_float+0x2f4>
 800a2d2:	e6a0      	b.n	800a016 <_printf_float+0xb6>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4628      	mov	r0, r5
 800a2da:	920b      	str	r2, [sp, #44]	; 0x2c
 800a2dc:	47b8      	blx	r7
 800a2de:	3001      	adds	r0, #1
 800a2e0:	f43f ae99 	beq.w	800a016 <_printf_float+0xb6>
 800a2e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2e6:	f10b 0b01 	add.w	fp, fp, #1
 800a2ea:	e7b9      	b.n	800a260 <_printf_float+0x300>
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	47b8      	blx	r7
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	d1bf      	bne.n	800a27a <_printf_float+0x31a>
 800a2fa:	e68c      	b.n	800a016 <_printf_float+0xb6>
 800a2fc:	464b      	mov	r3, r9
 800a2fe:	4631      	mov	r1, r6
 800a300:	4628      	mov	r0, r5
 800a302:	eb08 020a 	add.w	r2, r8, sl
 800a306:	47b8      	blx	r7
 800a308:	3001      	adds	r0, #1
 800a30a:	d1c2      	bne.n	800a292 <_printf_float+0x332>
 800a30c:	e683      	b.n	800a016 <_printf_float+0xb6>
 800a30e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a310:	2a01      	cmp	r2, #1
 800a312:	dc01      	bgt.n	800a318 <_printf_float+0x3b8>
 800a314:	07db      	lsls	r3, r3, #31
 800a316:	d537      	bpl.n	800a388 <_printf_float+0x428>
 800a318:	2301      	movs	r3, #1
 800a31a:	4642      	mov	r2, r8
 800a31c:	4631      	mov	r1, r6
 800a31e:	4628      	mov	r0, r5
 800a320:	47b8      	blx	r7
 800a322:	3001      	adds	r0, #1
 800a324:	f43f ae77 	beq.w	800a016 <_printf_float+0xb6>
 800a328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a32c:	4631      	mov	r1, r6
 800a32e:	4628      	mov	r0, r5
 800a330:	47b8      	blx	r7
 800a332:	3001      	adds	r0, #1
 800a334:	f43f ae6f 	beq.w	800a016 <_printf_float+0xb6>
 800a338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a33c:	2200      	movs	r2, #0
 800a33e:	2300      	movs	r3, #0
 800a340:	f7f6 fb32 	bl	80009a8 <__aeabi_dcmpeq>
 800a344:	b9d8      	cbnz	r0, 800a37e <_printf_float+0x41e>
 800a346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a348:	f108 0201 	add.w	r2, r8, #1
 800a34c:	3b01      	subs	r3, #1
 800a34e:	4631      	mov	r1, r6
 800a350:	4628      	mov	r0, r5
 800a352:	47b8      	blx	r7
 800a354:	3001      	adds	r0, #1
 800a356:	d10e      	bne.n	800a376 <_printf_float+0x416>
 800a358:	e65d      	b.n	800a016 <_printf_float+0xb6>
 800a35a:	2301      	movs	r3, #1
 800a35c:	464a      	mov	r2, r9
 800a35e:	4631      	mov	r1, r6
 800a360:	4628      	mov	r0, r5
 800a362:	47b8      	blx	r7
 800a364:	3001      	adds	r0, #1
 800a366:	f43f ae56 	beq.w	800a016 <_printf_float+0xb6>
 800a36a:	f108 0801 	add.w	r8, r8, #1
 800a36e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a370:	3b01      	subs	r3, #1
 800a372:	4543      	cmp	r3, r8
 800a374:	dcf1      	bgt.n	800a35a <_printf_float+0x3fa>
 800a376:	4653      	mov	r3, sl
 800a378:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a37c:	e6e0      	b.n	800a140 <_printf_float+0x1e0>
 800a37e:	f04f 0800 	mov.w	r8, #0
 800a382:	f104 091a 	add.w	r9, r4, #26
 800a386:	e7f2      	b.n	800a36e <_printf_float+0x40e>
 800a388:	2301      	movs	r3, #1
 800a38a:	4642      	mov	r2, r8
 800a38c:	e7df      	b.n	800a34e <_printf_float+0x3ee>
 800a38e:	2301      	movs	r3, #1
 800a390:	464a      	mov	r2, r9
 800a392:	4631      	mov	r1, r6
 800a394:	4628      	mov	r0, r5
 800a396:	47b8      	blx	r7
 800a398:	3001      	adds	r0, #1
 800a39a:	f43f ae3c 	beq.w	800a016 <_printf_float+0xb6>
 800a39e:	f108 0801 	add.w	r8, r8, #1
 800a3a2:	68e3      	ldr	r3, [r4, #12]
 800a3a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a3a6:	1a5b      	subs	r3, r3, r1
 800a3a8:	4543      	cmp	r3, r8
 800a3aa:	dcf0      	bgt.n	800a38e <_printf_float+0x42e>
 800a3ac:	e6fd      	b.n	800a1aa <_printf_float+0x24a>
 800a3ae:	f04f 0800 	mov.w	r8, #0
 800a3b2:	f104 0919 	add.w	r9, r4, #25
 800a3b6:	e7f4      	b.n	800a3a2 <_printf_float+0x442>

0800a3b8 <_printf_common>:
 800a3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3bc:	4616      	mov	r6, r2
 800a3be:	4699      	mov	r9, r3
 800a3c0:	688a      	ldr	r2, [r1, #8]
 800a3c2:	690b      	ldr	r3, [r1, #16]
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	bfb8      	it	lt
 800a3ca:	4613      	movlt	r3, r2
 800a3cc:	6033      	str	r3, [r6, #0]
 800a3ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3d8:	b10a      	cbz	r2, 800a3de <_printf_common+0x26>
 800a3da:	3301      	adds	r3, #1
 800a3dc:	6033      	str	r3, [r6, #0]
 800a3de:	6823      	ldr	r3, [r4, #0]
 800a3e0:	0699      	lsls	r1, r3, #26
 800a3e2:	bf42      	ittt	mi
 800a3e4:	6833      	ldrmi	r3, [r6, #0]
 800a3e6:	3302      	addmi	r3, #2
 800a3e8:	6033      	strmi	r3, [r6, #0]
 800a3ea:	6825      	ldr	r5, [r4, #0]
 800a3ec:	f015 0506 	ands.w	r5, r5, #6
 800a3f0:	d106      	bne.n	800a400 <_printf_common+0x48>
 800a3f2:	f104 0a19 	add.w	sl, r4, #25
 800a3f6:	68e3      	ldr	r3, [r4, #12]
 800a3f8:	6832      	ldr	r2, [r6, #0]
 800a3fa:	1a9b      	subs	r3, r3, r2
 800a3fc:	42ab      	cmp	r3, r5
 800a3fe:	dc28      	bgt.n	800a452 <_printf_common+0x9a>
 800a400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a404:	1e13      	subs	r3, r2, #0
 800a406:	6822      	ldr	r2, [r4, #0]
 800a408:	bf18      	it	ne
 800a40a:	2301      	movne	r3, #1
 800a40c:	0692      	lsls	r2, r2, #26
 800a40e:	d42d      	bmi.n	800a46c <_printf_common+0xb4>
 800a410:	4649      	mov	r1, r9
 800a412:	4638      	mov	r0, r7
 800a414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a418:	47c0      	blx	r8
 800a41a:	3001      	adds	r0, #1
 800a41c:	d020      	beq.n	800a460 <_printf_common+0xa8>
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	68e5      	ldr	r5, [r4, #12]
 800a422:	f003 0306 	and.w	r3, r3, #6
 800a426:	2b04      	cmp	r3, #4
 800a428:	bf18      	it	ne
 800a42a:	2500      	movne	r5, #0
 800a42c:	6832      	ldr	r2, [r6, #0]
 800a42e:	f04f 0600 	mov.w	r6, #0
 800a432:	68a3      	ldr	r3, [r4, #8]
 800a434:	bf08      	it	eq
 800a436:	1aad      	subeq	r5, r5, r2
 800a438:	6922      	ldr	r2, [r4, #16]
 800a43a:	bf08      	it	eq
 800a43c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a440:	4293      	cmp	r3, r2
 800a442:	bfc4      	itt	gt
 800a444:	1a9b      	subgt	r3, r3, r2
 800a446:	18ed      	addgt	r5, r5, r3
 800a448:	341a      	adds	r4, #26
 800a44a:	42b5      	cmp	r5, r6
 800a44c:	d11a      	bne.n	800a484 <_printf_common+0xcc>
 800a44e:	2000      	movs	r0, #0
 800a450:	e008      	b.n	800a464 <_printf_common+0xac>
 800a452:	2301      	movs	r3, #1
 800a454:	4652      	mov	r2, sl
 800a456:	4649      	mov	r1, r9
 800a458:	4638      	mov	r0, r7
 800a45a:	47c0      	blx	r8
 800a45c:	3001      	adds	r0, #1
 800a45e:	d103      	bne.n	800a468 <_printf_common+0xb0>
 800a460:	f04f 30ff 	mov.w	r0, #4294967295
 800a464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a468:	3501      	adds	r5, #1
 800a46a:	e7c4      	b.n	800a3f6 <_printf_common+0x3e>
 800a46c:	2030      	movs	r0, #48	; 0x30
 800a46e:	18e1      	adds	r1, r4, r3
 800a470:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a47a:	4422      	add	r2, r4
 800a47c:	3302      	adds	r3, #2
 800a47e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a482:	e7c5      	b.n	800a410 <_printf_common+0x58>
 800a484:	2301      	movs	r3, #1
 800a486:	4622      	mov	r2, r4
 800a488:	4649      	mov	r1, r9
 800a48a:	4638      	mov	r0, r7
 800a48c:	47c0      	blx	r8
 800a48e:	3001      	adds	r0, #1
 800a490:	d0e6      	beq.n	800a460 <_printf_common+0xa8>
 800a492:	3601      	adds	r6, #1
 800a494:	e7d9      	b.n	800a44a <_printf_common+0x92>
	...

0800a498 <_printf_i>:
 800a498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a49c:	460c      	mov	r4, r1
 800a49e:	7e27      	ldrb	r7, [r4, #24]
 800a4a0:	4691      	mov	r9, r2
 800a4a2:	2f78      	cmp	r7, #120	; 0x78
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	469a      	mov	sl, r3
 800a4a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a4aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4ae:	d807      	bhi.n	800a4c0 <_printf_i+0x28>
 800a4b0:	2f62      	cmp	r7, #98	; 0x62
 800a4b2:	d80a      	bhi.n	800a4ca <_printf_i+0x32>
 800a4b4:	2f00      	cmp	r7, #0
 800a4b6:	f000 80d9 	beq.w	800a66c <_printf_i+0x1d4>
 800a4ba:	2f58      	cmp	r7, #88	; 0x58
 800a4bc:	f000 80a4 	beq.w	800a608 <_printf_i+0x170>
 800a4c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4c8:	e03a      	b.n	800a540 <_printf_i+0xa8>
 800a4ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4ce:	2b15      	cmp	r3, #21
 800a4d0:	d8f6      	bhi.n	800a4c0 <_printf_i+0x28>
 800a4d2:	a001      	add	r0, pc, #4	; (adr r0, 800a4d8 <_printf_i+0x40>)
 800a4d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a4d8:	0800a531 	.word	0x0800a531
 800a4dc:	0800a545 	.word	0x0800a545
 800a4e0:	0800a4c1 	.word	0x0800a4c1
 800a4e4:	0800a4c1 	.word	0x0800a4c1
 800a4e8:	0800a4c1 	.word	0x0800a4c1
 800a4ec:	0800a4c1 	.word	0x0800a4c1
 800a4f0:	0800a545 	.word	0x0800a545
 800a4f4:	0800a4c1 	.word	0x0800a4c1
 800a4f8:	0800a4c1 	.word	0x0800a4c1
 800a4fc:	0800a4c1 	.word	0x0800a4c1
 800a500:	0800a4c1 	.word	0x0800a4c1
 800a504:	0800a653 	.word	0x0800a653
 800a508:	0800a575 	.word	0x0800a575
 800a50c:	0800a635 	.word	0x0800a635
 800a510:	0800a4c1 	.word	0x0800a4c1
 800a514:	0800a4c1 	.word	0x0800a4c1
 800a518:	0800a675 	.word	0x0800a675
 800a51c:	0800a4c1 	.word	0x0800a4c1
 800a520:	0800a575 	.word	0x0800a575
 800a524:	0800a4c1 	.word	0x0800a4c1
 800a528:	0800a4c1 	.word	0x0800a4c1
 800a52c:	0800a63d 	.word	0x0800a63d
 800a530:	680b      	ldr	r3, [r1, #0]
 800a532:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a536:	1d1a      	adds	r2, r3, #4
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	600a      	str	r2, [r1, #0]
 800a53c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a540:	2301      	movs	r3, #1
 800a542:	e0a4      	b.n	800a68e <_printf_i+0x1f6>
 800a544:	6825      	ldr	r5, [r4, #0]
 800a546:	6808      	ldr	r0, [r1, #0]
 800a548:	062e      	lsls	r6, r5, #24
 800a54a:	f100 0304 	add.w	r3, r0, #4
 800a54e:	d50a      	bpl.n	800a566 <_printf_i+0xce>
 800a550:	6805      	ldr	r5, [r0, #0]
 800a552:	600b      	str	r3, [r1, #0]
 800a554:	2d00      	cmp	r5, #0
 800a556:	da03      	bge.n	800a560 <_printf_i+0xc8>
 800a558:	232d      	movs	r3, #45	; 0x2d
 800a55a:	426d      	negs	r5, r5
 800a55c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a560:	230a      	movs	r3, #10
 800a562:	485e      	ldr	r0, [pc, #376]	; (800a6dc <_printf_i+0x244>)
 800a564:	e019      	b.n	800a59a <_printf_i+0x102>
 800a566:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a56a:	6805      	ldr	r5, [r0, #0]
 800a56c:	600b      	str	r3, [r1, #0]
 800a56e:	bf18      	it	ne
 800a570:	b22d      	sxthne	r5, r5
 800a572:	e7ef      	b.n	800a554 <_printf_i+0xbc>
 800a574:	680b      	ldr	r3, [r1, #0]
 800a576:	6825      	ldr	r5, [r4, #0]
 800a578:	1d18      	adds	r0, r3, #4
 800a57a:	6008      	str	r0, [r1, #0]
 800a57c:	0628      	lsls	r0, r5, #24
 800a57e:	d501      	bpl.n	800a584 <_printf_i+0xec>
 800a580:	681d      	ldr	r5, [r3, #0]
 800a582:	e002      	b.n	800a58a <_printf_i+0xf2>
 800a584:	0669      	lsls	r1, r5, #25
 800a586:	d5fb      	bpl.n	800a580 <_printf_i+0xe8>
 800a588:	881d      	ldrh	r5, [r3, #0]
 800a58a:	2f6f      	cmp	r7, #111	; 0x6f
 800a58c:	bf0c      	ite	eq
 800a58e:	2308      	moveq	r3, #8
 800a590:	230a      	movne	r3, #10
 800a592:	4852      	ldr	r0, [pc, #328]	; (800a6dc <_printf_i+0x244>)
 800a594:	2100      	movs	r1, #0
 800a596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a59a:	6866      	ldr	r6, [r4, #4]
 800a59c:	2e00      	cmp	r6, #0
 800a59e:	bfa8      	it	ge
 800a5a0:	6821      	ldrge	r1, [r4, #0]
 800a5a2:	60a6      	str	r6, [r4, #8]
 800a5a4:	bfa4      	itt	ge
 800a5a6:	f021 0104 	bicge.w	r1, r1, #4
 800a5aa:	6021      	strge	r1, [r4, #0]
 800a5ac:	b90d      	cbnz	r5, 800a5b2 <_printf_i+0x11a>
 800a5ae:	2e00      	cmp	r6, #0
 800a5b0:	d04d      	beq.n	800a64e <_printf_i+0x1b6>
 800a5b2:	4616      	mov	r6, r2
 800a5b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5b8:	fb03 5711 	mls	r7, r3, r1, r5
 800a5bc:	5dc7      	ldrb	r7, [r0, r7]
 800a5be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5c2:	462f      	mov	r7, r5
 800a5c4:	42bb      	cmp	r3, r7
 800a5c6:	460d      	mov	r5, r1
 800a5c8:	d9f4      	bls.n	800a5b4 <_printf_i+0x11c>
 800a5ca:	2b08      	cmp	r3, #8
 800a5cc:	d10b      	bne.n	800a5e6 <_printf_i+0x14e>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	07df      	lsls	r7, r3, #31
 800a5d2:	d508      	bpl.n	800a5e6 <_printf_i+0x14e>
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	6861      	ldr	r1, [r4, #4]
 800a5d8:	4299      	cmp	r1, r3
 800a5da:	bfde      	ittt	le
 800a5dc:	2330      	movle	r3, #48	; 0x30
 800a5de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5e6:	1b92      	subs	r2, r2, r6
 800a5e8:	6122      	str	r2, [r4, #16]
 800a5ea:	464b      	mov	r3, r9
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4640      	mov	r0, r8
 800a5f0:	f8cd a000 	str.w	sl, [sp]
 800a5f4:	aa03      	add	r2, sp, #12
 800a5f6:	f7ff fedf 	bl	800a3b8 <_printf_common>
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	d14c      	bne.n	800a698 <_printf_i+0x200>
 800a5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a602:	b004      	add	sp, #16
 800a604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a608:	4834      	ldr	r0, [pc, #208]	; (800a6dc <_printf_i+0x244>)
 800a60a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a60e:	680e      	ldr	r6, [r1, #0]
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	f856 5b04 	ldr.w	r5, [r6], #4
 800a616:	061f      	lsls	r7, r3, #24
 800a618:	600e      	str	r6, [r1, #0]
 800a61a:	d514      	bpl.n	800a646 <_printf_i+0x1ae>
 800a61c:	07d9      	lsls	r1, r3, #31
 800a61e:	bf44      	itt	mi
 800a620:	f043 0320 	orrmi.w	r3, r3, #32
 800a624:	6023      	strmi	r3, [r4, #0]
 800a626:	b91d      	cbnz	r5, 800a630 <_printf_i+0x198>
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	f023 0320 	bic.w	r3, r3, #32
 800a62e:	6023      	str	r3, [r4, #0]
 800a630:	2310      	movs	r3, #16
 800a632:	e7af      	b.n	800a594 <_printf_i+0xfc>
 800a634:	6823      	ldr	r3, [r4, #0]
 800a636:	f043 0320 	orr.w	r3, r3, #32
 800a63a:	6023      	str	r3, [r4, #0]
 800a63c:	2378      	movs	r3, #120	; 0x78
 800a63e:	4828      	ldr	r0, [pc, #160]	; (800a6e0 <_printf_i+0x248>)
 800a640:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a644:	e7e3      	b.n	800a60e <_printf_i+0x176>
 800a646:	065e      	lsls	r6, r3, #25
 800a648:	bf48      	it	mi
 800a64a:	b2ad      	uxthmi	r5, r5
 800a64c:	e7e6      	b.n	800a61c <_printf_i+0x184>
 800a64e:	4616      	mov	r6, r2
 800a650:	e7bb      	b.n	800a5ca <_printf_i+0x132>
 800a652:	680b      	ldr	r3, [r1, #0]
 800a654:	6826      	ldr	r6, [r4, #0]
 800a656:	1d1d      	adds	r5, r3, #4
 800a658:	6960      	ldr	r0, [r4, #20]
 800a65a:	600d      	str	r5, [r1, #0]
 800a65c:	0635      	lsls	r5, r6, #24
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	d501      	bpl.n	800a666 <_printf_i+0x1ce>
 800a662:	6018      	str	r0, [r3, #0]
 800a664:	e002      	b.n	800a66c <_printf_i+0x1d4>
 800a666:	0671      	lsls	r1, r6, #25
 800a668:	d5fb      	bpl.n	800a662 <_printf_i+0x1ca>
 800a66a:	8018      	strh	r0, [r3, #0]
 800a66c:	2300      	movs	r3, #0
 800a66e:	4616      	mov	r6, r2
 800a670:	6123      	str	r3, [r4, #16]
 800a672:	e7ba      	b.n	800a5ea <_printf_i+0x152>
 800a674:	680b      	ldr	r3, [r1, #0]
 800a676:	1d1a      	adds	r2, r3, #4
 800a678:	600a      	str	r2, [r1, #0]
 800a67a:	681e      	ldr	r6, [r3, #0]
 800a67c:	2100      	movs	r1, #0
 800a67e:	4630      	mov	r0, r6
 800a680:	6862      	ldr	r2, [r4, #4]
 800a682:	f001 f86b 	bl	800b75c <memchr>
 800a686:	b108      	cbz	r0, 800a68c <_printf_i+0x1f4>
 800a688:	1b80      	subs	r0, r0, r6
 800a68a:	6060      	str	r0, [r4, #4]
 800a68c:	6863      	ldr	r3, [r4, #4]
 800a68e:	6123      	str	r3, [r4, #16]
 800a690:	2300      	movs	r3, #0
 800a692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a696:	e7a8      	b.n	800a5ea <_printf_i+0x152>
 800a698:	4632      	mov	r2, r6
 800a69a:	4649      	mov	r1, r9
 800a69c:	4640      	mov	r0, r8
 800a69e:	6923      	ldr	r3, [r4, #16]
 800a6a0:	47d0      	blx	sl
 800a6a2:	3001      	adds	r0, #1
 800a6a4:	d0ab      	beq.n	800a5fe <_printf_i+0x166>
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	079b      	lsls	r3, r3, #30
 800a6aa:	d413      	bmi.n	800a6d4 <_printf_i+0x23c>
 800a6ac:	68e0      	ldr	r0, [r4, #12]
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	4298      	cmp	r0, r3
 800a6b2:	bfb8      	it	lt
 800a6b4:	4618      	movlt	r0, r3
 800a6b6:	e7a4      	b.n	800a602 <_printf_i+0x16a>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	4632      	mov	r2, r6
 800a6bc:	4649      	mov	r1, r9
 800a6be:	4640      	mov	r0, r8
 800a6c0:	47d0      	blx	sl
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	d09b      	beq.n	800a5fe <_printf_i+0x166>
 800a6c6:	3501      	adds	r5, #1
 800a6c8:	68e3      	ldr	r3, [r4, #12]
 800a6ca:	9903      	ldr	r1, [sp, #12]
 800a6cc:	1a5b      	subs	r3, r3, r1
 800a6ce:	42ab      	cmp	r3, r5
 800a6d0:	dcf2      	bgt.n	800a6b8 <_printf_i+0x220>
 800a6d2:	e7eb      	b.n	800a6ac <_printf_i+0x214>
 800a6d4:	2500      	movs	r5, #0
 800a6d6:	f104 0619 	add.w	r6, r4, #25
 800a6da:	e7f5      	b.n	800a6c8 <_printf_i+0x230>
 800a6dc:	0800c832 	.word	0x0800c832
 800a6e0:	0800c843 	.word	0x0800c843

0800a6e4 <cleanup_glue>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	6809      	ldr	r1, [r1, #0]
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	b109      	cbz	r1, 800a6f2 <cleanup_glue+0xe>
 800a6ee:	f7ff fff9 	bl	800a6e4 <cleanup_glue>
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6fa:	f001 bbd9 	b.w	800beb0 <_free_r>
	...

0800a700 <_reclaim_reent>:
 800a700:	4b2c      	ldr	r3, [pc, #176]	; (800a7b4 <_reclaim_reent+0xb4>)
 800a702:	b570      	push	{r4, r5, r6, lr}
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4604      	mov	r4, r0
 800a708:	4283      	cmp	r3, r0
 800a70a:	d051      	beq.n	800a7b0 <_reclaim_reent+0xb0>
 800a70c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a70e:	b143      	cbz	r3, 800a722 <_reclaim_reent+0x22>
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d14a      	bne.n	800a7ac <_reclaim_reent+0xac>
 800a716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a718:	6819      	ldr	r1, [r3, #0]
 800a71a:	b111      	cbz	r1, 800a722 <_reclaim_reent+0x22>
 800a71c:	4620      	mov	r0, r4
 800a71e:	f001 fbc7 	bl	800beb0 <_free_r>
 800a722:	6961      	ldr	r1, [r4, #20]
 800a724:	b111      	cbz	r1, 800a72c <_reclaim_reent+0x2c>
 800a726:	4620      	mov	r0, r4
 800a728:	f001 fbc2 	bl	800beb0 <_free_r>
 800a72c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a72e:	b111      	cbz	r1, 800a736 <_reclaim_reent+0x36>
 800a730:	4620      	mov	r0, r4
 800a732:	f001 fbbd 	bl	800beb0 <_free_r>
 800a736:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a738:	b111      	cbz	r1, 800a740 <_reclaim_reent+0x40>
 800a73a:	4620      	mov	r0, r4
 800a73c:	f001 fbb8 	bl	800beb0 <_free_r>
 800a740:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a742:	b111      	cbz	r1, 800a74a <_reclaim_reent+0x4a>
 800a744:	4620      	mov	r0, r4
 800a746:	f001 fbb3 	bl	800beb0 <_free_r>
 800a74a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a74c:	b111      	cbz	r1, 800a754 <_reclaim_reent+0x54>
 800a74e:	4620      	mov	r0, r4
 800a750:	f001 fbae 	bl	800beb0 <_free_r>
 800a754:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a756:	b111      	cbz	r1, 800a75e <_reclaim_reent+0x5e>
 800a758:	4620      	mov	r0, r4
 800a75a:	f001 fba9 	bl	800beb0 <_free_r>
 800a75e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a760:	b111      	cbz	r1, 800a768 <_reclaim_reent+0x68>
 800a762:	4620      	mov	r0, r4
 800a764:	f001 fba4 	bl	800beb0 <_free_r>
 800a768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a76a:	b111      	cbz	r1, 800a772 <_reclaim_reent+0x72>
 800a76c:	4620      	mov	r0, r4
 800a76e:	f001 fb9f 	bl	800beb0 <_free_r>
 800a772:	69a3      	ldr	r3, [r4, #24]
 800a774:	b1e3      	cbz	r3, 800a7b0 <_reclaim_reent+0xb0>
 800a776:	4620      	mov	r0, r4
 800a778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a77a:	4798      	blx	r3
 800a77c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a77e:	b1b9      	cbz	r1, 800a7b0 <_reclaim_reent+0xb0>
 800a780:	4620      	mov	r0, r4
 800a782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a786:	f7ff bfad 	b.w	800a6e4 <cleanup_glue>
 800a78a:	5949      	ldr	r1, [r1, r5]
 800a78c:	b941      	cbnz	r1, 800a7a0 <_reclaim_reent+0xa0>
 800a78e:	3504      	adds	r5, #4
 800a790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a792:	2d80      	cmp	r5, #128	; 0x80
 800a794:	68d9      	ldr	r1, [r3, #12]
 800a796:	d1f8      	bne.n	800a78a <_reclaim_reent+0x8a>
 800a798:	4620      	mov	r0, r4
 800a79a:	f001 fb89 	bl	800beb0 <_free_r>
 800a79e:	e7ba      	b.n	800a716 <_reclaim_reent+0x16>
 800a7a0:	680e      	ldr	r6, [r1, #0]
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f001 fb84 	bl	800beb0 <_free_r>
 800a7a8:	4631      	mov	r1, r6
 800a7aa:	e7ef      	b.n	800a78c <_reclaim_reent+0x8c>
 800a7ac:	2500      	movs	r5, #0
 800a7ae:	e7ef      	b.n	800a790 <_reclaim_reent+0x90>
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000010 	.word	0x20000010

0800a7b8 <_sbrk_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4d05      	ldr	r5, [pc, #20]	; (800a7d4 <_sbrk_r+0x1c>)
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	602b      	str	r3, [r5, #0]
 800a7c4:	f7f8 fee6 	bl	8003594 <_sbrk>
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	d102      	bne.n	800a7d2 <_sbrk_r+0x1a>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	b103      	cbz	r3, 800a7d2 <_sbrk_r+0x1a>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	20001ecc 	.word	0x20001ecc

0800a7d8 <__sread>:
 800a7d8:	b510      	push	{r4, lr}
 800a7da:	460c      	mov	r4, r1
 800a7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e0:	f001 fbb2 	bl	800bf48 <_read_r>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	bfab      	itete	ge
 800a7e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a7ec:	181b      	addge	r3, r3, r0
 800a7ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7f2:	bfac      	ite	ge
 800a7f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7f6:	81a3      	strhlt	r3, [r4, #12]
 800a7f8:	bd10      	pop	{r4, pc}

0800a7fa <__swrite>:
 800a7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fe:	461f      	mov	r7, r3
 800a800:	898b      	ldrh	r3, [r1, #12]
 800a802:	4605      	mov	r5, r0
 800a804:	05db      	lsls	r3, r3, #23
 800a806:	460c      	mov	r4, r1
 800a808:	4616      	mov	r6, r2
 800a80a:	d505      	bpl.n	800a818 <__swrite+0x1e>
 800a80c:	2302      	movs	r3, #2
 800a80e:	2200      	movs	r2, #0
 800a810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a814:	f000 ff88 	bl	800b728 <_lseek_r>
 800a818:	89a3      	ldrh	r3, [r4, #12]
 800a81a:	4632      	mov	r2, r6
 800a81c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	4628      	mov	r0, r5
 800a824:	463b      	mov	r3, r7
 800a826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a82a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a82e:	f000 b817 	b.w	800a860 <_write_r>

0800a832 <__sseek>:
 800a832:	b510      	push	{r4, lr}
 800a834:	460c      	mov	r4, r1
 800a836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a83a:	f000 ff75 	bl	800b728 <_lseek_r>
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	bf15      	itete	ne
 800a844:	6560      	strne	r0, [r4, #84]	; 0x54
 800a846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a84a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a84e:	81a3      	strheq	r3, [r4, #12]
 800a850:	bf18      	it	ne
 800a852:	81a3      	strhne	r3, [r4, #12]
 800a854:	bd10      	pop	{r4, pc}

0800a856 <__sclose>:
 800a856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a85a:	f000 b813 	b.w	800a884 <_close_r>
	...

0800a860 <_write_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4604      	mov	r4, r0
 800a864:	4608      	mov	r0, r1
 800a866:	4611      	mov	r1, r2
 800a868:	2200      	movs	r2, #0
 800a86a:	4d05      	ldr	r5, [pc, #20]	; (800a880 <_write_r+0x20>)
 800a86c:	602a      	str	r2, [r5, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	f7f8 fe44 	bl	80034fc <_write>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d102      	bne.n	800a87e <_write_r+0x1e>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	b103      	cbz	r3, 800a87e <_write_r+0x1e>
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	20001ecc 	.word	0x20001ecc

0800a884 <_close_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	2300      	movs	r3, #0
 800a888:	4d05      	ldr	r5, [pc, #20]	; (800a8a0 <_close_r+0x1c>)
 800a88a:	4604      	mov	r4, r0
 800a88c:	4608      	mov	r0, r1
 800a88e:	602b      	str	r3, [r5, #0]
 800a890:	f7f8 fe50 	bl	8003534 <_close>
 800a894:	1c43      	adds	r3, r0, #1
 800a896:	d102      	bne.n	800a89e <_close_r+0x1a>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	b103      	cbz	r3, 800a89e <_close_r+0x1a>
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	20001ecc 	.word	0x20001ecc

0800a8a4 <quorem>:
 800a8a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	6903      	ldr	r3, [r0, #16]
 800a8aa:	690c      	ldr	r4, [r1, #16]
 800a8ac:	4607      	mov	r7, r0
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	f2c0 8083 	blt.w	800a9ba <quorem+0x116>
 800a8b4:	3c01      	subs	r4, #1
 800a8b6:	f100 0514 	add.w	r5, r0, #20
 800a8ba:	f101 0814 	add.w	r8, r1, #20
 800a8be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8dc:	d332      	bcc.n	800a944 <quorem+0xa0>
 800a8de:	f04f 0e00 	mov.w	lr, #0
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	46ac      	mov	ip, r5
 800a8e6:	46f2      	mov	sl, lr
 800a8e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8ec:	b293      	uxth	r3, r2
 800a8ee:	fb06 e303 	mla	r3, r6, r3, lr
 800a8f2:	0c12      	lsrs	r2, r2, #16
 800a8f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a8f8:	fb06 e202 	mla	r2, r6, r2, lr
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	ebaa 0303 	sub.w	r3, sl, r3
 800a902:	f8dc a000 	ldr.w	sl, [ip]
 800a906:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a90a:	fa1f fa8a 	uxth.w	sl, sl
 800a90e:	4453      	add	r3, sl
 800a910:	fa1f fa82 	uxth.w	sl, r2
 800a914:	f8dc 2000 	ldr.w	r2, [ip]
 800a918:	4581      	cmp	r9, r0
 800a91a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a91e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a922:	b29b      	uxth	r3, r3
 800a924:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a928:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a92c:	f84c 3b04 	str.w	r3, [ip], #4
 800a930:	d2da      	bcs.n	800a8e8 <quorem+0x44>
 800a932:	f855 300b 	ldr.w	r3, [r5, fp]
 800a936:	b92b      	cbnz	r3, 800a944 <quorem+0xa0>
 800a938:	9b01      	ldr	r3, [sp, #4]
 800a93a:	3b04      	subs	r3, #4
 800a93c:	429d      	cmp	r5, r3
 800a93e:	461a      	mov	r2, r3
 800a940:	d32f      	bcc.n	800a9a2 <quorem+0xfe>
 800a942:	613c      	str	r4, [r7, #16]
 800a944:	4638      	mov	r0, r7
 800a946:	f001 f99d 	bl	800bc84 <__mcmp>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	db25      	blt.n	800a99a <quorem+0xf6>
 800a94e:	4628      	mov	r0, r5
 800a950:	f04f 0c00 	mov.w	ip, #0
 800a954:	3601      	adds	r6, #1
 800a956:	f858 1b04 	ldr.w	r1, [r8], #4
 800a95a:	f8d0 e000 	ldr.w	lr, [r0]
 800a95e:	b28b      	uxth	r3, r1
 800a960:	ebac 0303 	sub.w	r3, ip, r3
 800a964:	fa1f f28e 	uxth.w	r2, lr
 800a968:	4413      	add	r3, r2
 800a96a:	0c0a      	lsrs	r2, r1, #16
 800a96c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a974:	b29b      	uxth	r3, r3
 800a976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a97a:	45c1      	cmp	r9, r8
 800a97c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a980:	f840 3b04 	str.w	r3, [r0], #4
 800a984:	d2e7      	bcs.n	800a956 <quorem+0xb2>
 800a986:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a98a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a98e:	b922      	cbnz	r2, 800a99a <quorem+0xf6>
 800a990:	3b04      	subs	r3, #4
 800a992:	429d      	cmp	r5, r3
 800a994:	461a      	mov	r2, r3
 800a996:	d30a      	bcc.n	800a9ae <quorem+0x10a>
 800a998:	613c      	str	r4, [r7, #16]
 800a99a:	4630      	mov	r0, r6
 800a99c:	b003      	add	sp, #12
 800a99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a2:	6812      	ldr	r2, [r2, #0]
 800a9a4:	3b04      	subs	r3, #4
 800a9a6:	2a00      	cmp	r2, #0
 800a9a8:	d1cb      	bne.n	800a942 <quorem+0x9e>
 800a9aa:	3c01      	subs	r4, #1
 800a9ac:	e7c6      	b.n	800a93c <quorem+0x98>
 800a9ae:	6812      	ldr	r2, [r2, #0]
 800a9b0:	3b04      	subs	r3, #4
 800a9b2:	2a00      	cmp	r2, #0
 800a9b4:	d1f0      	bne.n	800a998 <quorem+0xf4>
 800a9b6:	3c01      	subs	r4, #1
 800a9b8:	e7eb      	b.n	800a992 <quorem+0xee>
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e7ee      	b.n	800a99c <quorem+0xf8>
	...

0800a9c0 <_dtoa_r>:
 800a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c4:	4616      	mov	r6, r2
 800a9c6:	461f      	mov	r7, r3
 800a9c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a9ca:	b099      	sub	sp, #100	; 0x64
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a9d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a9d6:	b974      	cbnz	r4, 800a9f6 <_dtoa_r+0x36>
 800a9d8:	2010      	movs	r0, #16
 800a9da:	f000 feb7 	bl	800b74c <malloc>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	6268      	str	r0, [r5, #36]	; 0x24
 800a9e2:	b920      	cbnz	r0, 800a9ee <_dtoa_r+0x2e>
 800a9e4:	21ea      	movs	r1, #234	; 0xea
 800a9e6:	4bae      	ldr	r3, [pc, #696]	; (800aca0 <_dtoa_r+0x2e0>)
 800a9e8:	48ae      	ldr	r0, [pc, #696]	; (800aca4 <_dtoa_r+0x2e4>)
 800a9ea:	f001 fabf 	bl	800bf6c <__assert_func>
 800a9ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9f2:	6004      	str	r4, [r0, #0]
 800a9f4:	60c4      	str	r4, [r0, #12]
 800a9f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9f8:	6819      	ldr	r1, [r3, #0]
 800a9fa:	b151      	cbz	r1, 800aa12 <_dtoa_r+0x52>
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	2301      	movs	r3, #1
 800aa00:	4093      	lsls	r3, r2
 800aa02:	604a      	str	r2, [r1, #4]
 800aa04:	608b      	str	r3, [r1, #8]
 800aa06:	4628      	mov	r0, r5
 800aa08:	f000 ff02 	bl	800b810 <_Bfree>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa10:	601a      	str	r2, [r3, #0]
 800aa12:	1e3b      	subs	r3, r7, #0
 800aa14:	bfaf      	iteee	ge
 800aa16:	2300      	movge	r3, #0
 800aa18:	2201      	movlt	r2, #1
 800aa1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa1e:	9305      	strlt	r3, [sp, #20]
 800aa20:	bfa8      	it	ge
 800aa22:	f8c8 3000 	strge.w	r3, [r8]
 800aa26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800aa2a:	4b9f      	ldr	r3, [pc, #636]	; (800aca8 <_dtoa_r+0x2e8>)
 800aa2c:	bfb8      	it	lt
 800aa2e:	f8c8 2000 	strlt.w	r2, [r8]
 800aa32:	ea33 0309 	bics.w	r3, r3, r9
 800aa36:	d119      	bne.n	800aa6c <_dtoa_r+0xac>
 800aa38:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa44:	4333      	orrs	r3, r6
 800aa46:	f000 8580 	beq.w	800b54a <_dtoa_r+0xb8a>
 800aa4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa4c:	b953      	cbnz	r3, 800aa64 <_dtoa_r+0xa4>
 800aa4e:	4b97      	ldr	r3, [pc, #604]	; (800acac <_dtoa_r+0x2ec>)
 800aa50:	e022      	b.n	800aa98 <_dtoa_r+0xd8>
 800aa52:	4b97      	ldr	r3, [pc, #604]	; (800acb0 <_dtoa_r+0x2f0>)
 800aa54:	9308      	str	r3, [sp, #32]
 800aa56:	3308      	adds	r3, #8
 800aa58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	9808      	ldr	r0, [sp, #32]
 800aa5e:	b019      	add	sp, #100	; 0x64
 800aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa64:	4b91      	ldr	r3, [pc, #580]	; (800acac <_dtoa_r+0x2ec>)
 800aa66:	9308      	str	r3, [sp, #32]
 800aa68:	3303      	adds	r3, #3
 800aa6a:	e7f5      	b.n	800aa58 <_dtoa_r+0x98>
 800aa6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800aa74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa78:	2200      	movs	r2, #0
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f7f5 ff94 	bl	80009a8 <__aeabi_dcmpeq>
 800aa80:	4680      	mov	r8, r0
 800aa82:	b158      	cbz	r0, 800aa9c <_dtoa_r+0xdc>
 800aa84:	2301      	movs	r3, #1
 800aa86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 8559 	beq.w	800b544 <_dtoa_r+0xb84>
 800aa92:	4888      	ldr	r0, [pc, #544]	; (800acb4 <_dtoa_r+0x2f4>)
 800aa94:	6018      	str	r0, [r3, #0]
 800aa96:	1e43      	subs	r3, r0, #1
 800aa98:	9308      	str	r3, [sp, #32]
 800aa9a:	e7df      	b.n	800aa5c <_dtoa_r+0x9c>
 800aa9c:	ab16      	add	r3, sp, #88	; 0x58
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	ab17      	add	r3, sp, #92	; 0x5c
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aaaa:	f001 f997 	bl	800bddc <__d2b>
 800aaae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aab2:	4682      	mov	sl, r0
 800aab4:	2c00      	cmp	r4, #0
 800aab6:	d07e      	beq.n	800abb6 <_dtoa_r+0x1f6>
 800aab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aabc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aabe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800aac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aac6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800aaca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aace:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800aad2:	2200      	movs	r2, #0
 800aad4:	4b78      	ldr	r3, [pc, #480]	; (800acb8 <_dtoa_r+0x2f8>)
 800aad6:	f7f5 fb47 	bl	8000168 <__aeabi_dsub>
 800aada:	a36b      	add	r3, pc, #428	; (adr r3, 800ac88 <_dtoa_r+0x2c8>)
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	f7f5 fcfa 	bl	80004d8 <__aeabi_dmul>
 800aae4:	a36a      	add	r3, pc, #424	; (adr r3, 800ac90 <_dtoa_r+0x2d0>)
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f7f5 fb3f 	bl	800016c <__adddf3>
 800aaee:	4606      	mov	r6, r0
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	460f      	mov	r7, r1
 800aaf4:	f7f5 fc86 	bl	8000404 <__aeabi_i2d>
 800aaf8:	a367      	add	r3, pc, #412	; (adr r3, 800ac98 <_dtoa_r+0x2d8>)
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	f7f5 fceb 	bl	80004d8 <__aeabi_dmul>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	4630      	mov	r0, r6
 800ab08:	4639      	mov	r1, r7
 800ab0a:	f7f5 fb2f 	bl	800016c <__adddf3>
 800ab0e:	4606      	mov	r6, r0
 800ab10:	460f      	mov	r7, r1
 800ab12:	f7f5 ff91 	bl	8000a38 <__aeabi_d2iz>
 800ab16:	2200      	movs	r2, #0
 800ab18:	4681      	mov	r9, r0
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	4639      	mov	r1, r7
 800ab20:	f7f5 ff4c 	bl	80009bc <__aeabi_dcmplt>
 800ab24:	b148      	cbz	r0, 800ab3a <_dtoa_r+0x17a>
 800ab26:	4648      	mov	r0, r9
 800ab28:	f7f5 fc6c 	bl	8000404 <__aeabi_i2d>
 800ab2c:	4632      	mov	r2, r6
 800ab2e:	463b      	mov	r3, r7
 800ab30:	f7f5 ff3a 	bl	80009a8 <__aeabi_dcmpeq>
 800ab34:	b908      	cbnz	r0, 800ab3a <_dtoa_r+0x17a>
 800ab36:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab3a:	f1b9 0f16 	cmp.w	r9, #22
 800ab3e:	d857      	bhi.n	800abf0 <_dtoa_r+0x230>
 800ab40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab44:	4b5d      	ldr	r3, [pc, #372]	; (800acbc <_dtoa_r+0x2fc>)
 800ab46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 ff35 	bl	80009bc <__aeabi_dcmplt>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d04e      	beq.n	800abf4 <_dtoa_r+0x234>
 800ab56:	2300      	movs	r3, #0
 800ab58:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab60:	1b1c      	subs	r4, r3, r4
 800ab62:	1e63      	subs	r3, r4, #1
 800ab64:	9309      	str	r3, [sp, #36]	; 0x24
 800ab66:	bf49      	itett	mi
 800ab68:	f1c4 0301 	rsbmi	r3, r4, #1
 800ab6c:	2300      	movpl	r3, #0
 800ab6e:	9306      	strmi	r3, [sp, #24]
 800ab70:	2300      	movmi	r3, #0
 800ab72:	bf54      	ite	pl
 800ab74:	9306      	strpl	r3, [sp, #24]
 800ab76:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ab78:	f1b9 0f00 	cmp.w	r9, #0
 800ab7c:	db3c      	blt.n	800abf8 <_dtoa_r+0x238>
 800ab7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab80:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ab84:	444b      	add	r3, r9
 800ab86:	9309      	str	r3, [sp, #36]	; 0x24
 800ab88:	2300      	movs	r3, #0
 800ab8a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab8e:	2b09      	cmp	r3, #9
 800ab90:	d86c      	bhi.n	800ac6c <_dtoa_r+0x2ac>
 800ab92:	2b05      	cmp	r3, #5
 800ab94:	bfc4      	itt	gt
 800ab96:	3b04      	subgt	r3, #4
 800ab98:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ab9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab9c:	bfc8      	it	gt
 800ab9e:	2400      	movgt	r4, #0
 800aba0:	f1a3 0302 	sub.w	r3, r3, #2
 800aba4:	bfd8      	it	le
 800aba6:	2401      	movle	r4, #1
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	f200 808b 	bhi.w	800acc4 <_dtoa_r+0x304>
 800abae:	e8df f003 	tbb	[pc, r3]
 800abb2:	4f2d      	.short	0x4f2d
 800abb4:	5b4d      	.short	0x5b4d
 800abb6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800abba:	441c      	add	r4, r3
 800abbc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800abc0:	2b20      	cmp	r3, #32
 800abc2:	bfc3      	ittte	gt
 800abc4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800abc8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800abcc:	fa09 f303 	lslgt.w	r3, r9, r3
 800abd0:	f1c3 0320 	rsble	r3, r3, #32
 800abd4:	bfc6      	itte	gt
 800abd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800abda:	4318      	orrgt	r0, r3
 800abdc:	fa06 f003 	lslle.w	r0, r6, r3
 800abe0:	f7f5 fc00 	bl	80003e4 <__aeabi_ui2d>
 800abe4:	2301      	movs	r3, #1
 800abe6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800abea:	3c01      	subs	r4, #1
 800abec:	9313      	str	r3, [sp, #76]	; 0x4c
 800abee:	e770      	b.n	800aad2 <_dtoa_r+0x112>
 800abf0:	2301      	movs	r3, #1
 800abf2:	e7b3      	b.n	800ab5c <_dtoa_r+0x19c>
 800abf4:	900f      	str	r0, [sp, #60]	; 0x3c
 800abf6:	e7b2      	b.n	800ab5e <_dtoa_r+0x19e>
 800abf8:	9b06      	ldr	r3, [sp, #24]
 800abfa:	eba3 0309 	sub.w	r3, r3, r9
 800abfe:	9306      	str	r3, [sp, #24]
 800ac00:	f1c9 0300 	rsb	r3, r9, #0
 800ac04:	930a      	str	r3, [sp, #40]	; 0x28
 800ac06:	2300      	movs	r3, #0
 800ac08:	930e      	str	r3, [sp, #56]	; 0x38
 800ac0a:	e7bf      	b.n	800ab8c <_dtoa_r+0x1cc>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	dc59      	bgt.n	800acca <_dtoa_r+0x30a>
 800ac16:	f04f 0b01 	mov.w	fp, #1
 800ac1a:	465b      	mov	r3, fp
 800ac1c:	f8cd b008 	str.w	fp, [sp, #8]
 800ac20:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800ac24:	2200      	movs	r2, #0
 800ac26:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ac28:	6042      	str	r2, [r0, #4]
 800ac2a:	2204      	movs	r2, #4
 800ac2c:	f102 0614 	add.w	r6, r2, #20
 800ac30:	429e      	cmp	r6, r3
 800ac32:	6841      	ldr	r1, [r0, #4]
 800ac34:	d94f      	bls.n	800acd6 <_dtoa_r+0x316>
 800ac36:	4628      	mov	r0, r5
 800ac38:	f000 fdaa 	bl	800b790 <_Balloc>
 800ac3c:	9008      	str	r0, [sp, #32]
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	d14d      	bne.n	800acde <_dtoa_r+0x31e>
 800ac42:	4602      	mov	r2, r0
 800ac44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac48:	4b1d      	ldr	r3, [pc, #116]	; (800acc0 <_dtoa_r+0x300>)
 800ac4a:	e6cd      	b.n	800a9e8 <_dtoa_r+0x28>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e7de      	b.n	800ac0e <_dtoa_r+0x24e>
 800ac50:	2300      	movs	r3, #0
 800ac52:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac56:	eb09 0b03 	add.w	fp, r9, r3
 800ac5a:	f10b 0301 	add.w	r3, fp, #1
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	9302      	str	r3, [sp, #8]
 800ac62:	bfb8      	it	lt
 800ac64:	2301      	movlt	r3, #1
 800ac66:	e7dd      	b.n	800ac24 <_dtoa_r+0x264>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e7f2      	b.n	800ac52 <_dtoa_r+0x292>
 800ac6c:	2401      	movs	r4, #1
 800ac6e:	2300      	movs	r3, #0
 800ac70:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac72:	9322      	str	r3, [sp, #136]	; 0x88
 800ac74:	f04f 3bff 	mov.w	fp, #4294967295
 800ac78:	2200      	movs	r2, #0
 800ac7a:	2312      	movs	r3, #18
 800ac7c:	f8cd b008 	str.w	fp, [sp, #8]
 800ac80:	9223      	str	r2, [sp, #140]	; 0x8c
 800ac82:	e7cf      	b.n	800ac24 <_dtoa_r+0x264>
 800ac84:	f3af 8000 	nop.w
 800ac88:	636f4361 	.word	0x636f4361
 800ac8c:	3fd287a7 	.word	0x3fd287a7
 800ac90:	8b60c8b3 	.word	0x8b60c8b3
 800ac94:	3fc68a28 	.word	0x3fc68a28
 800ac98:	509f79fb 	.word	0x509f79fb
 800ac9c:	3fd34413 	.word	0x3fd34413
 800aca0:	0800c861 	.word	0x0800c861
 800aca4:	0800c878 	.word	0x0800c878
 800aca8:	7ff00000 	.word	0x7ff00000
 800acac:	0800c85d 	.word	0x0800c85d
 800acb0:	0800c854 	.word	0x0800c854
 800acb4:	0800c831 	.word	0x0800c831
 800acb8:	3ff80000 	.word	0x3ff80000
 800acbc:	0800c970 	.word	0x0800c970
 800acc0:	0800c8d7 	.word	0x0800c8d7
 800acc4:	2301      	movs	r3, #1
 800acc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800acc8:	e7d4      	b.n	800ac74 <_dtoa_r+0x2b4>
 800acca:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800acce:	465b      	mov	r3, fp
 800acd0:	f8cd b008 	str.w	fp, [sp, #8]
 800acd4:	e7a6      	b.n	800ac24 <_dtoa_r+0x264>
 800acd6:	3101      	adds	r1, #1
 800acd8:	6041      	str	r1, [r0, #4]
 800acda:	0052      	lsls	r2, r2, #1
 800acdc:	e7a6      	b.n	800ac2c <_dtoa_r+0x26c>
 800acde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ace0:	9a08      	ldr	r2, [sp, #32]
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	9b02      	ldr	r3, [sp, #8]
 800ace6:	2b0e      	cmp	r3, #14
 800ace8:	f200 80a8 	bhi.w	800ae3c <_dtoa_r+0x47c>
 800acec:	2c00      	cmp	r4, #0
 800acee:	f000 80a5 	beq.w	800ae3c <_dtoa_r+0x47c>
 800acf2:	f1b9 0f00 	cmp.w	r9, #0
 800acf6:	dd34      	ble.n	800ad62 <_dtoa_r+0x3a2>
 800acf8:	4a9a      	ldr	r2, [pc, #616]	; (800af64 <_dtoa_r+0x5a4>)
 800acfa:	f009 030f 	and.w	r3, r9, #15
 800acfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad02:	f419 7f80 	tst.w	r9, #256	; 0x100
 800ad06:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ad0e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800ad12:	d016      	beq.n	800ad42 <_dtoa_r+0x382>
 800ad14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad18:	4b93      	ldr	r3, [pc, #588]	; (800af68 <_dtoa_r+0x5a8>)
 800ad1a:	2703      	movs	r7, #3
 800ad1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad20:	f7f5 fd04 	bl	800072c <__aeabi_ddiv>
 800ad24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad28:	f004 040f 	and.w	r4, r4, #15
 800ad2c:	4e8e      	ldr	r6, [pc, #568]	; (800af68 <_dtoa_r+0x5a8>)
 800ad2e:	b954      	cbnz	r4, 800ad46 <_dtoa_r+0x386>
 800ad30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad38:	f7f5 fcf8 	bl	800072c <__aeabi_ddiv>
 800ad3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad40:	e029      	b.n	800ad96 <_dtoa_r+0x3d6>
 800ad42:	2702      	movs	r7, #2
 800ad44:	e7f2      	b.n	800ad2c <_dtoa_r+0x36c>
 800ad46:	07e1      	lsls	r1, r4, #31
 800ad48:	d508      	bpl.n	800ad5c <_dtoa_r+0x39c>
 800ad4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad52:	f7f5 fbc1 	bl	80004d8 <__aeabi_dmul>
 800ad56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad5a:	3701      	adds	r7, #1
 800ad5c:	1064      	asrs	r4, r4, #1
 800ad5e:	3608      	adds	r6, #8
 800ad60:	e7e5      	b.n	800ad2e <_dtoa_r+0x36e>
 800ad62:	f000 80a5 	beq.w	800aeb0 <_dtoa_r+0x4f0>
 800ad66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad6a:	f1c9 0400 	rsb	r4, r9, #0
 800ad6e:	4b7d      	ldr	r3, [pc, #500]	; (800af64 <_dtoa_r+0x5a4>)
 800ad70:	f004 020f 	and.w	r2, r4, #15
 800ad74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	f7f5 fbac 	bl	80004d8 <__aeabi_dmul>
 800ad80:	2702      	movs	r7, #2
 800ad82:	2300      	movs	r3, #0
 800ad84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad88:	4e77      	ldr	r6, [pc, #476]	; (800af68 <_dtoa_r+0x5a8>)
 800ad8a:	1124      	asrs	r4, r4, #4
 800ad8c:	2c00      	cmp	r4, #0
 800ad8e:	f040 8084 	bne.w	800ae9a <_dtoa_r+0x4da>
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1d2      	bne.n	800ad3c <_dtoa_r+0x37c>
 800ad96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f000 808b 	beq.w	800aeb4 <_dtoa_r+0x4f4>
 800ad9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ada2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ada6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adaa:	2200      	movs	r2, #0
 800adac:	4b6f      	ldr	r3, [pc, #444]	; (800af6c <_dtoa_r+0x5ac>)
 800adae:	f7f5 fe05 	bl	80009bc <__aeabi_dcmplt>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d07e      	beq.n	800aeb4 <_dtoa_r+0x4f4>
 800adb6:	9b02      	ldr	r3, [sp, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d07b      	beq.n	800aeb4 <_dtoa_r+0x4f4>
 800adbc:	f1bb 0f00 	cmp.w	fp, #0
 800adc0:	dd38      	ble.n	800ae34 <_dtoa_r+0x474>
 800adc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adc6:	2200      	movs	r2, #0
 800adc8:	4b69      	ldr	r3, [pc, #420]	; (800af70 <_dtoa_r+0x5b0>)
 800adca:	f7f5 fb85 	bl	80004d8 <__aeabi_dmul>
 800adce:	465c      	mov	r4, fp
 800add0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800add4:	f109 38ff 	add.w	r8, r9, #4294967295
 800add8:	3701      	adds	r7, #1
 800adda:	4638      	mov	r0, r7
 800addc:	f7f5 fb12 	bl	8000404 <__aeabi_i2d>
 800ade0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ade4:	f7f5 fb78 	bl	80004d8 <__aeabi_dmul>
 800ade8:	2200      	movs	r2, #0
 800adea:	4b62      	ldr	r3, [pc, #392]	; (800af74 <_dtoa_r+0x5b4>)
 800adec:	f7f5 f9be 	bl	800016c <__adddf3>
 800adf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800adf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800adf8:	9611      	str	r6, [sp, #68]	; 0x44
 800adfa:	2c00      	cmp	r4, #0
 800adfc:	d15d      	bne.n	800aeba <_dtoa_r+0x4fa>
 800adfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae02:	2200      	movs	r2, #0
 800ae04:	4b5c      	ldr	r3, [pc, #368]	; (800af78 <_dtoa_r+0x5b8>)
 800ae06:	f7f5 f9af 	bl	8000168 <__aeabi_dsub>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae12:	4633      	mov	r3, r6
 800ae14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae16:	f7f5 fdef 	bl	80009f8 <__aeabi_dcmpgt>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	f040 829e 	bne.w	800b35c <_dtoa_r+0x99c>
 800ae20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ae2a:	f7f5 fdc7 	bl	80009bc <__aeabi_dcmplt>
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	f040 8292 	bne.w	800b358 <_dtoa_r+0x998>
 800ae34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ae38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f2c0 8153 	blt.w	800b0ea <_dtoa_r+0x72a>
 800ae44:	f1b9 0f0e 	cmp.w	r9, #14
 800ae48:	f300 814f 	bgt.w	800b0ea <_dtoa_r+0x72a>
 800ae4c:	4b45      	ldr	r3, [pc, #276]	; (800af64 <_dtoa_r+0x5a4>)
 800ae4e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ae52:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ae5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f280 80db 	bge.w	800b018 <_dtoa_r+0x658>
 800ae62:	9b02      	ldr	r3, [sp, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f300 80d7 	bgt.w	800b018 <_dtoa_r+0x658>
 800ae6a:	f040 8274 	bne.w	800b356 <_dtoa_r+0x996>
 800ae6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae72:	2200      	movs	r2, #0
 800ae74:	4b40      	ldr	r3, [pc, #256]	; (800af78 <_dtoa_r+0x5b8>)
 800ae76:	f7f5 fb2f 	bl	80004d8 <__aeabi_dmul>
 800ae7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae7e:	f7f5 fdb1 	bl	80009e4 <__aeabi_dcmpge>
 800ae82:	9c02      	ldr	r4, [sp, #8]
 800ae84:	4626      	mov	r6, r4
 800ae86:	2800      	cmp	r0, #0
 800ae88:	f040 824a 	bne.w	800b320 <_dtoa_r+0x960>
 800ae8c:	2331      	movs	r3, #49	; 0x31
 800ae8e:	9f08      	ldr	r7, [sp, #32]
 800ae90:	f109 0901 	add.w	r9, r9, #1
 800ae94:	f807 3b01 	strb.w	r3, [r7], #1
 800ae98:	e246      	b.n	800b328 <_dtoa_r+0x968>
 800ae9a:	07e2      	lsls	r2, r4, #31
 800ae9c:	d505      	bpl.n	800aeaa <_dtoa_r+0x4ea>
 800ae9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aea2:	f7f5 fb19 	bl	80004d8 <__aeabi_dmul>
 800aea6:	2301      	movs	r3, #1
 800aea8:	3701      	adds	r7, #1
 800aeaa:	1064      	asrs	r4, r4, #1
 800aeac:	3608      	adds	r6, #8
 800aeae:	e76d      	b.n	800ad8c <_dtoa_r+0x3cc>
 800aeb0:	2702      	movs	r7, #2
 800aeb2:	e770      	b.n	800ad96 <_dtoa_r+0x3d6>
 800aeb4:	46c8      	mov	r8, r9
 800aeb6:	9c02      	ldr	r4, [sp, #8]
 800aeb8:	e78f      	b.n	800adda <_dtoa_r+0x41a>
 800aeba:	9908      	ldr	r1, [sp, #32]
 800aebc:	4b29      	ldr	r3, [pc, #164]	; (800af64 <_dtoa_r+0x5a4>)
 800aebe:	4421      	add	r1, r4
 800aec0:	9112      	str	r1, [sp, #72]	; 0x48
 800aec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aec4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aec8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aecc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aed0:	2900      	cmp	r1, #0
 800aed2:	d055      	beq.n	800af80 <_dtoa_r+0x5c0>
 800aed4:	2000      	movs	r0, #0
 800aed6:	4929      	ldr	r1, [pc, #164]	; (800af7c <_dtoa_r+0x5bc>)
 800aed8:	f7f5 fc28 	bl	800072c <__aeabi_ddiv>
 800aedc:	463b      	mov	r3, r7
 800aede:	4632      	mov	r2, r6
 800aee0:	f7f5 f942 	bl	8000168 <__aeabi_dsub>
 800aee4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aee8:	9f08      	ldr	r7, [sp, #32]
 800aeea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aeee:	f7f5 fda3 	bl	8000a38 <__aeabi_d2iz>
 800aef2:	4604      	mov	r4, r0
 800aef4:	f7f5 fa86 	bl	8000404 <__aeabi_i2d>
 800aef8:	4602      	mov	r2, r0
 800aefa:	460b      	mov	r3, r1
 800aefc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af00:	f7f5 f932 	bl	8000168 <__aeabi_dsub>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	3430      	adds	r4, #48	; 0x30
 800af0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af12:	f807 4b01 	strb.w	r4, [r7], #1
 800af16:	f7f5 fd51 	bl	80009bc <__aeabi_dcmplt>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d174      	bne.n	800b008 <_dtoa_r+0x648>
 800af1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af22:	2000      	movs	r0, #0
 800af24:	4911      	ldr	r1, [pc, #68]	; (800af6c <_dtoa_r+0x5ac>)
 800af26:	f7f5 f91f 	bl	8000168 <__aeabi_dsub>
 800af2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af2e:	f7f5 fd45 	bl	80009bc <__aeabi_dcmplt>
 800af32:	2800      	cmp	r0, #0
 800af34:	f040 80b6 	bne.w	800b0a4 <_dtoa_r+0x6e4>
 800af38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af3a:	429f      	cmp	r7, r3
 800af3c:	f43f af7a 	beq.w	800ae34 <_dtoa_r+0x474>
 800af40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af44:	2200      	movs	r2, #0
 800af46:	4b0a      	ldr	r3, [pc, #40]	; (800af70 <_dtoa_r+0x5b0>)
 800af48:	f7f5 fac6 	bl	80004d8 <__aeabi_dmul>
 800af4c:	2200      	movs	r2, #0
 800af4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af56:	4b06      	ldr	r3, [pc, #24]	; (800af70 <_dtoa_r+0x5b0>)
 800af58:	f7f5 fabe 	bl	80004d8 <__aeabi_dmul>
 800af5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af60:	e7c3      	b.n	800aeea <_dtoa_r+0x52a>
 800af62:	bf00      	nop
 800af64:	0800c970 	.word	0x0800c970
 800af68:	0800c948 	.word	0x0800c948
 800af6c:	3ff00000 	.word	0x3ff00000
 800af70:	40240000 	.word	0x40240000
 800af74:	401c0000 	.word	0x401c0000
 800af78:	40140000 	.word	0x40140000
 800af7c:	3fe00000 	.word	0x3fe00000
 800af80:	4630      	mov	r0, r6
 800af82:	4639      	mov	r1, r7
 800af84:	f7f5 faa8 	bl	80004d8 <__aeabi_dmul>
 800af88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af8e:	9c08      	ldr	r4, [sp, #32]
 800af90:	9314      	str	r3, [sp, #80]	; 0x50
 800af92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af96:	f7f5 fd4f 	bl	8000a38 <__aeabi_d2iz>
 800af9a:	9015      	str	r0, [sp, #84]	; 0x54
 800af9c:	f7f5 fa32 	bl	8000404 <__aeabi_i2d>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afa8:	f7f5 f8de 	bl	8000168 <__aeabi_dsub>
 800afac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afae:	4606      	mov	r6, r0
 800afb0:	3330      	adds	r3, #48	; 0x30
 800afb2:	f804 3b01 	strb.w	r3, [r4], #1
 800afb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afb8:	460f      	mov	r7, r1
 800afba:	429c      	cmp	r4, r3
 800afbc:	f04f 0200 	mov.w	r2, #0
 800afc0:	d124      	bne.n	800b00c <_dtoa_r+0x64c>
 800afc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800afc6:	4bb3      	ldr	r3, [pc, #716]	; (800b294 <_dtoa_r+0x8d4>)
 800afc8:	f7f5 f8d0 	bl	800016c <__adddf3>
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	4630      	mov	r0, r6
 800afd2:	4639      	mov	r1, r7
 800afd4:	f7f5 fd10 	bl	80009f8 <__aeabi_dcmpgt>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d162      	bne.n	800b0a2 <_dtoa_r+0x6e2>
 800afdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800afe0:	2000      	movs	r0, #0
 800afe2:	49ac      	ldr	r1, [pc, #688]	; (800b294 <_dtoa_r+0x8d4>)
 800afe4:	f7f5 f8c0 	bl	8000168 <__aeabi_dsub>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	4630      	mov	r0, r6
 800afee:	4639      	mov	r1, r7
 800aff0:	f7f5 fce4 	bl	80009bc <__aeabi_dcmplt>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	f43f af1d 	beq.w	800ae34 <_dtoa_r+0x474>
 800affa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800affc:	1e7b      	subs	r3, r7, #1
 800affe:	9314      	str	r3, [sp, #80]	; 0x50
 800b000:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b004:	2b30      	cmp	r3, #48	; 0x30
 800b006:	d0f8      	beq.n	800affa <_dtoa_r+0x63a>
 800b008:	46c1      	mov	r9, r8
 800b00a:	e03a      	b.n	800b082 <_dtoa_r+0x6c2>
 800b00c:	4ba2      	ldr	r3, [pc, #648]	; (800b298 <_dtoa_r+0x8d8>)
 800b00e:	f7f5 fa63 	bl	80004d8 <__aeabi_dmul>
 800b012:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b016:	e7bc      	b.n	800af92 <_dtoa_r+0x5d2>
 800b018:	9f08      	ldr	r7, [sp, #32]
 800b01a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b01e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b022:	f7f5 fb83 	bl	800072c <__aeabi_ddiv>
 800b026:	f7f5 fd07 	bl	8000a38 <__aeabi_d2iz>
 800b02a:	4604      	mov	r4, r0
 800b02c:	f7f5 f9ea 	bl	8000404 <__aeabi_i2d>
 800b030:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b034:	f7f5 fa50 	bl	80004d8 <__aeabi_dmul>
 800b038:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b03c:	460b      	mov	r3, r1
 800b03e:	4602      	mov	r2, r0
 800b040:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b044:	f7f5 f890 	bl	8000168 <__aeabi_dsub>
 800b048:	f807 6b01 	strb.w	r6, [r7], #1
 800b04c:	9e08      	ldr	r6, [sp, #32]
 800b04e:	9b02      	ldr	r3, [sp, #8]
 800b050:	1bbe      	subs	r6, r7, r6
 800b052:	42b3      	cmp	r3, r6
 800b054:	d13a      	bne.n	800b0cc <_dtoa_r+0x70c>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	f7f5 f887 	bl	800016c <__adddf3>
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b066:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b06a:	f7f5 fcc5 	bl	80009f8 <__aeabi_dcmpgt>
 800b06e:	bb58      	cbnz	r0, 800b0c8 <_dtoa_r+0x708>
 800b070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b078:	f7f5 fc96 	bl	80009a8 <__aeabi_dcmpeq>
 800b07c:	b108      	cbz	r0, 800b082 <_dtoa_r+0x6c2>
 800b07e:	07e1      	lsls	r1, r4, #31
 800b080:	d422      	bmi.n	800b0c8 <_dtoa_r+0x708>
 800b082:	4628      	mov	r0, r5
 800b084:	4651      	mov	r1, sl
 800b086:	f000 fbc3 	bl	800b810 <_Bfree>
 800b08a:	2300      	movs	r3, #0
 800b08c:	703b      	strb	r3, [r7, #0]
 800b08e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b090:	f109 0001 	add.w	r0, r9, #1
 800b094:	6018      	str	r0, [r3, #0]
 800b096:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f43f acdf 	beq.w	800aa5c <_dtoa_r+0x9c>
 800b09e:	601f      	str	r7, [r3, #0]
 800b0a0:	e4dc      	b.n	800aa5c <_dtoa_r+0x9c>
 800b0a2:	4627      	mov	r7, r4
 800b0a4:	463b      	mov	r3, r7
 800b0a6:	461f      	mov	r7, r3
 800b0a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0ac:	2a39      	cmp	r2, #57	; 0x39
 800b0ae:	d107      	bne.n	800b0c0 <_dtoa_r+0x700>
 800b0b0:	9a08      	ldr	r2, [sp, #32]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d1f7      	bne.n	800b0a6 <_dtoa_r+0x6e6>
 800b0b6:	2230      	movs	r2, #48	; 0x30
 800b0b8:	9908      	ldr	r1, [sp, #32]
 800b0ba:	f108 0801 	add.w	r8, r8, #1
 800b0be:	700a      	strb	r2, [r1, #0]
 800b0c0:	781a      	ldrb	r2, [r3, #0]
 800b0c2:	3201      	adds	r2, #1
 800b0c4:	701a      	strb	r2, [r3, #0]
 800b0c6:	e79f      	b.n	800b008 <_dtoa_r+0x648>
 800b0c8:	46c8      	mov	r8, r9
 800b0ca:	e7eb      	b.n	800b0a4 <_dtoa_r+0x6e4>
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	4b72      	ldr	r3, [pc, #456]	; (800b298 <_dtoa_r+0x8d8>)
 800b0d0:	f7f5 fa02 	bl	80004d8 <__aeabi_dmul>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f7f5 fc62 	bl	80009a8 <__aeabi_dcmpeq>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d098      	beq.n	800b01a <_dtoa_r+0x65a>
 800b0e8:	e7cb      	b.n	800b082 <_dtoa_r+0x6c2>
 800b0ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0ec:	2a00      	cmp	r2, #0
 800b0ee:	f000 80cd 	beq.w	800b28c <_dtoa_r+0x8cc>
 800b0f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b0f4:	2a01      	cmp	r2, #1
 800b0f6:	f300 80af 	bgt.w	800b258 <_dtoa_r+0x898>
 800b0fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b0fc:	2a00      	cmp	r2, #0
 800b0fe:	f000 80a7 	beq.w	800b250 <_dtoa_r+0x890>
 800b102:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b106:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b108:	9f06      	ldr	r7, [sp, #24]
 800b10a:	9a06      	ldr	r2, [sp, #24]
 800b10c:	2101      	movs	r1, #1
 800b10e:	441a      	add	r2, r3
 800b110:	9206      	str	r2, [sp, #24]
 800b112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b114:	4628      	mov	r0, r5
 800b116:	441a      	add	r2, r3
 800b118:	9209      	str	r2, [sp, #36]	; 0x24
 800b11a:	f000 fc33 	bl	800b984 <__i2b>
 800b11e:	4606      	mov	r6, r0
 800b120:	2f00      	cmp	r7, #0
 800b122:	dd0c      	ble.n	800b13e <_dtoa_r+0x77e>
 800b124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b126:	2b00      	cmp	r3, #0
 800b128:	dd09      	ble.n	800b13e <_dtoa_r+0x77e>
 800b12a:	42bb      	cmp	r3, r7
 800b12c:	bfa8      	it	ge
 800b12e:	463b      	movge	r3, r7
 800b130:	9a06      	ldr	r2, [sp, #24]
 800b132:	1aff      	subs	r7, r7, r3
 800b134:	1ad2      	subs	r2, r2, r3
 800b136:	9206      	str	r2, [sp, #24]
 800b138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	9309      	str	r3, [sp, #36]	; 0x24
 800b13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b140:	b1f3      	cbz	r3, 800b180 <_dtoa_r+0x7c0>
 800b142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b144:	2b00      	cmp	r3, #0
 800b146:	f000 80a9 	beq.w	800b29c <_dtoa_r+0x8dc>
 800b14a:	2c00      	cmp	r4, #0
 800b14c:	dd10      	ble.n	800b170 <_dtoa_r+0x7b0>
 800b14e:	4631      	mov	r1, r6
 800b150:	4622      	mov	r2, r4
 800b152:	4628      	mov	r0, r5
 800b154:	f000 fcd0 	bl	800baf8 <__pow5mult>
 800b158:	4652      	mov	r2, sl
 800b15a:	4601      	mov	r1, r0
 800b15c:	4606      	mov	r6, r0
 800b15e:	4628      	mov	r0, r5
 800b160:	f000 fc26 	bl	800b9b0 <__multiply>
 800b164:	4680      	mov	r8, r0
 800b166:	4651      	mov	r1, sl
 800b168:	4628      	mov	r0, r5
 800b16a:	f000 fb51 	bl	800b810 <_Bfree>
 800b16e:	46c2      	mov	sl, r8
 800b170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b172:	1b1a      	subs	r2, r3, r4
 800b174:	d004      	beq.n	800b180 <_dtoa_r+0x7c0>
 800b176:	4651      	mov	r1, sl
 800b178:	4628      	mov	r0, r5
 800b17a:	f000 fcbd 	bl	800baf8 <__pow5mult>
 800b17e:	4682      	mov	sl, r0
 800b180:	2101      	movs	r1, #1
 800b182:	4628      	mov	r0, r5
 800b184:	f000 fbfe 	bl	800b984 <__i2b>
 800b188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b18a:	4604      	mov	r4, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f340 8087 	ble.w	800b2a0 <_dtoa_r+0x8e0>
 800b192:	461a      	mov	r2, r3
 800b194:	4601      	mov	r1, r0
 800b196:	4628      	mov	r0, r5
 800b198:	f000 fcae 	bl	800baf8 <__pow5mult>
 800b19c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b19e:	4604      	mov	r4, r0
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	f340 8080 	ble.w	800b2a6 <_dtoa_r+0x8e6>
 800b1a6:	f04f 0800 	mov.w	r8, #0
 800b1aa:	6923      	ldr	r3, [r4, #16]
 800b1ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1b0:	6918      	ldr	r0, [r3, #16]
 800b1b2:	f000 fb99 	bl	800b8e8 <__hi0bits>
 800b1b6:	f1c0 0020 	rsb	r0, r0, #32
 800b1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1bc:	4418      	add	r0, r3
 800b1be:	f010 001f 	ands.w	r0, r0, #31
 800b1c2:	f000 8092 	beq.w	800b2ea <_dtoa_r+0x92a>
 800b1c6:	f1c0 0320 	rsb	r3, r0, #32
 800b1ca:	2b04      	cmp	r3, #4
 800b1cc:	f340 808a 	ble.w	800b2e4 <_dtoa_r+0x924>
 800b1d0:	f1c0 001c 	rsb	r0, r0, #28
 800b1d4:	9b06      	ldr	r3, [sp, #24]
 800b1d6:	4407      	add	r7, r0
 800b1d8:	4403      	add	r3, r0
 800b1da:	9306      	str	r3, [sp, #24]
 800b1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1de:	4403      	add	r3, r0
 800b1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e2:	9b06      	ldr	r3, [sp, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	dd05      	ble.n	800b1f4 <_dtoa_r+0x834>
 800b1e8:	4651      	mov	r1, sl
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	f000 fcdd 	bl	800bbac <__lshift>
 800b1f2:	4682      	mov	sl, r0
 800b1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	dd05      	ble.n	800b206 <_dtoa_r+0x846>
 800b1fa:	4621      	mov	r1, r4
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	4628      	mov	r0, r5
 800b200:	f000 fcd4 	bl	800bbac <__lshift>
 800b204:	4604      	mov	r4, r0
 800b206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d070      	beq.n	800b2ee <_dtoa_r+0x92e>
 800b20c:	4621      	mov	r1, r4
 800b20e:	4650      	mov	r0, sl
 800b210:	f000 fd38 	bl	800bc84 <__mcmp>
 800b214:	2800      	cmp	r0, #0
 800b216:	da6a      	bge.n	800b2ee <_dtoa_r+0x92e>
 800b218:	2300      	movs	r3, #0
 800b21a:	4651      	mov	r1, sl
 800b21c:	220a      	movs	r2, #10
 800b21e:	4628      	mov	r0, r5
 800b220:	f000 fb18 	bl	800b854 <__multadd>
 800b224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b226:	4682      	mov	sl, r0
 800b228:	f109 39ff 	add.w	r9, r9, #4294967295
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 8193 	beq.w	800b558 <_dtoa_r+0xb98>
 800b232:	4631      	mov	r1, r6
 800b234:	2300      	movs	r3, #0
 800b236:	220a      	movs	r2, #10
 800b238:	4628      	mov	r0, r5
 800b23a:	f000 fb0b 	bl	800b854 <__multadd>
 800b23e:	f1bb 0f00 	cmp.w	fp, #0
 800b242:	4606      	mov	r6, r0
 800b244:	f300 8093 	bgt.w	800b36e <_dtoa_r+0x9ae>
 800b248:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	dc57      	bgt.n	800b2fe <_dtoa_r+0x93e>
 800b24e:	e08e      	b.n	800b36e <_dtoa_r+0x9ae>
 800b250:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b252:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b256:	e756      	b.n	800b106 <_dtoa_r+0x746>
 800b258:	9b02      	ldr	r3, [sp, #8]
 800b25a:	1e5c      	subs	r4, r3, #1
 800b25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b25e:	42a3      	cmp	r3, r4
 800b260:	bfb7      	itett	lt
 800b262:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b264:	1b1c      	subge	r4, r3, r4
 800b266:	1ae2      	sublt	r2, r4, r3
 800b268:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b26a:	bfbe      	ittt	lt
 800b26c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b26e:	189b      	addlt	r3, r3, r2
 800b270:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b272:	9b02      	ldr	r3, [sp, #8]
 800b274:	bfb8      	it	lt
 800b276:	2400      	movlt	r4, #0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	bfbb      	ittet	lt
 800b27c:	9b06      	ldrlt	r3, [sp, #24]
 800b27e:	9a02      	ldrlt	r2, [sp, #8]
 800b280:	9f06      	ldrge	r7, [sp, #24]
 800b282:	1a9f      	sublt	r7, r3, r2
 800b284:	bfac      	ite	ge
 800b286:	9b02      	ldrge	r3, [sp, #8]
 800b288:	2300      	movlt	r3, #0
 800b28a:	e73e      	b.n	800b10a <_dtoa_r+0x74a>
 800b28c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b28e:	9f06      	ldr	r7, [sp, #24]
 800b290:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b292:	e745      	b.n	800b120 <_dtoa_r+0x760>
 800b294:	3fe00000 	.word	0x3fe00000
 800b298:	40240000 	.word	0x40240000
 800b29c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b29e:	e76a      	b.n	800b176 <_dtoa_r+0x7b6>
 800b2a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	dc19      	bgt.n	800b2da <_dtoa_r+0x91a>
 800b2a6:	9b04      	ldr	r3, [sp, #16]
 800b2a8:	b9bb      	cbnz	r3, 800b2da <_dtoa_r+0x91a>
 800b2aa:	9b05      	ldr	r3, [sp, #20]
 800b2ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2b0:	b99b      	cbnz	r3, 800b2da <_dtoa_r+0x91a>
 800b2b2:	9b05      	ldr	r3, [sp, #20]
 800b2b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2b8:	0d1b      	lsrs	r3, r3, #20
 800b2ba:	051b      	lsls	r3, r3, #20
 800b2bc:	b183      	cbz	r3, 800b2e0 <_dtoa_r+0x920>
 800b2be:	f04f 0801 	mov.w	r8, #1
 800b2c2:	9b06      	ldr	r3, [sp, #24]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	9306      	str	r3, [sp, #24]
 800b2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f47f af6a 	bne.w	800b1aa <_dtoa_r+0x7ea>
 800b2d6:	2001      	movs	r0, #1
 800b2d8:	e76f      	b.n	800b1ba <_dtoa_r+0x7fa>
 800b2da:	f04f 0800 	mov.w	r8, #0
 800b2de:	e7f6      	b.n	800b2ce <_dtoa_r+0x90e>
 800b2e0:	4698      	mov	r8, r3
 800b2e2:	e7f4      	b.n	800b2ce <_dtoa_r+0x90e>
 800b2e4:	f43f af7d 	beq.w	800b1e2 <_dtoa_r+0x822>
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	301c      	adds	r0, #28
 800b2ec:	e772      	b.n	800b1d4 <_dtoa_r+0x814>
 800b2ee:	9b02      	ldr	r3, [sp, #8]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	dc36      	bgt.n	800b362 <_dtoa_r+0x9a2>
 800b2f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	dd33      	ble.n	800b362 <_dtoa_r+0x9a2>
 800b2fa:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b2fe:	f1bb 0f00 	cmp.w	fp, #0
 800b302:	d10d      	bne.n	800b320 <_dtoa_r+0x960>
 800b304:	4621      	mov	r1, r4
 800b306:	465b      	mov	r3, fp
 800b308:	2205      	movs	r2, #5
 800b30a:	4628      	mov	r0, r5
 800b30c:	f000 faa2 	bl	800b854 <__multadd>
 800b310:	4601      	mov	r1, r0
 800b312:	4604      	mov	r4, r0
 800b314:	4650      	mov	r0, sl
 800b316:	f000 fcb5 	bl	800bc84 <__mcmp>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	f73f adb6 	bgt.w	800ae8c <_dtoa_r+0x4cc>
 800b320:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b322:	9f08      	ldr	r7, [sp, #32]
 800b324:	ea6f 0903 	mvn.w	r9, r3
 800b328:	f04f 0800 	mov.w	r8, #0
 800b32c:	4621      	mov	r1, r4
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 fa6e 	bl	800b810 <_Bfree>
 800b334:	2e00      	cmp	r6, #0
 800b336:	f43f aea4 	beq.w	800b082 <_dtoa_r+0x6c2>
 800b33a:	f1b8 0f00 	cmp.w	r8, #0
 800b33e:	d005      	beq.n	800b34c <_dtoa_r+0x98c>
 800b340:	45b0      	cmp	r8, r6
 800b342:	d003      	beq.n	800b34c <_dtoa_r+0x98c>
 800b344:	4641      	mov	r1, r8
 800b346:	4628      	mov	r0, r5
 800b348:	f000 fa62 	bl	800b810 <_Bfree>
 800b34c:	4631      	mov	r1, r6
 800b34e:	4628      	mov	r0, r5
 800b350:	f000 fa5e 	bl	800b810 <_Bfree>
 800b354:	e695      	b.n	800b082 <_dtoa_r+0x6c2>
 800b356:	2400      	movs	r4, #0
 800b358:	4626      	mov	r6, r4
 800b35a:	e7e1      	b.n	800b320 <_dtoa_r+0x960>
 800b35c:	46c1      	mov	r9, r8
 800b35e:	4626      	mov	r6, r4
 800b360:	e594      	b.n	800ae8c <_dtoa_r+0x4cc>
 800b362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b364:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 80fc 	beq.w	800b566 <_dtoa_r+0xba6>
 800b36e:	2f00      	cmp	r7, #0
 800b370:	dd05      	ble.n	800b37e <_dtoa_r+0x9be>
 800b372:	4631      	mov	r1, r6
 800b374:	463a      	mov	r2, r7
 800b376:	4628      	mov	r0, r5
 800b378:	f000 fc18 	bl	800bbac <__lshift>
 800b37c:	4606      	mov	r6, r0
 800b37e:	f1b8 0f00 	cmp.w	r8, #0
 800b382:	d05c      	beq.n	800b43e <_dtoa_r+0xa7e>
 800b384:	4628      	mov	r0, r5
 800b386:	6871      	ldr	r1, [r6, #4]
 800b388:	f000 fa02 	bl	800b790 <_Balloc>
 800b38c:	4607      	mov	r7, r0
 800b38e:	b928      	cbnz	r0, 800b39c <_dtoa_r+0x9dc>
 800b390:	4602      	mov	r2, r0
 800b392:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b396:	4b7e      	ldr	r3, [pc, #504]	; (800b590 <_dtoa_r+0xbd0>)
 800b398:	f7ff bb26 	b.w	800a9e8 <_dtoa_r+0x28>
 800b39c:	6932      	ldr	r2, [r6, #16]
 800b39e:	f106 010c 	add.w	r1, r6, #12
 800b3a2:	3202      	adds	r2, #2
 800b3a4:	0092      	lsls	r2, r2, #2
 800b3a6:	300c      	adds	r0, #12
 800b3a8:	f7fe fccb 	bl	8009d42 <memcpy>
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	4639      	mov	r1, r7
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	f000 fbfb 	bl	800bbac <__lshift>
 800b3b6:	46b0      	mov	r8, r6
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	9b08      	ldr	r3, [sp, #32]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	9302      	str	r3, [sp, #8]
 800b3c0:	9b08      	ldr	r3, [sp, #32]
 800b3c2:	445b      	add	r3, fp
 800b3c4:	930a      	str	r3, [sp, #40]	; 0x28
 800b3c6:	9b04      	ldr	r3, [sp, #16]
 800b3c8:	f003 0301 	and.w	r3, r3, #1
 800b3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ce:	9b02      	ldr	r3, [sp, #8]
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	4650      	mov	r0, sl
 800b3d4:	f103 3bff 	add.w	fp, r3, #4294967295
 800b3d8:	f7ff fa64 	bl	800a8a4 <quorem>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	4641      	mov	r1, r8
 800b3e0:	3330      	adds	r3, #48	; 0x30
 800b3e2:	9004      	str	r0, [sp, #16]
 800b3e4:	4650      	mov	r0, sl
 800b3e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3e8:	f000 fc4c 	bl	800bc84 <__mcmp>
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	9006      	str	r0, [sp, #24]
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f000 fc62 	bl	800bcbc <__mdiff>
 800b3f8:	68c2      	ldr	r2, [r0, #12]
 800b3fa:	4607      	mov	r7, r0
 800b3fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3fe:	bb02      	cbnz	r2, 800b442 <_dtoa_r+0xa82>
 800b400:	4601      	mov	r1, r0
 800b402:	4650      	mov	r0, sl
 800b404:	f000 fc3e 	bl	800bc84 <__mcmp>
 800b408:	4602      	mov	r2, r0
 800b40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b40c:	4639      	mov	r1, r7
 800b40e:	4628      	mov	r0, r5
 800b410:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b414:	f000 f9fc 	bl	800b810 <_Bfree>
 800b418:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b41a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b41c:	9f02      	ldr	r7, [sp, #8]
 800b41e:	ea43 0102 	orr.w	r1, r3, r2
 800b422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b424:	430b      	orrs	r3, r1
 800b426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b428:	d10d      	bne.n	800b446 <_dtoa_r+0xa86>
 800b42a:	2b39      	cmp	r3, #57	; 0x39
 800b42c:	d027      	beq.n	800b47e <_dtoa_r+0xabe>
 800b42e:	9a06      	ldr	r2, [sp, #24]
 800b430:	2a00      	cmp	r2, #0
 800b432:	dd01      	ble.n	800b438 <_dtoa_r+0xa78>
 800b434:	9b04      	ldr	r3, [sp, #16]
 800b436:	3331      	adds	r3, #49	; 0x31
 800b438:	f88b 3000 	strb.w	r3, [fp]
 800b43c:	e776      	b.n	800b32c <_dtoa_r+0x96c>
 800b43e:	4630      	mov	r0, r6
 800b440:	e7b9      	b.n	800b3b6 <_dtoa_r+0x9f6>
 800b442:	2201      	movs	r2, #1
 800b444:	e7e2      	b.n	800b40c <_dtoa_r+0xa4c>
 800b446:	9906      	ldr	r1, [sp, #24]
 800b448:	2900      	cmp	r1, #0
 800b44a:	db04      	blt.n	800b456 <_dtoa_r+0xa96>
 800b44c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b44e:	4301      	orrs	r1, r0
 800b450:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b452:	4301      	orrs	r1, r0
 800b454:	d120      	bne.n	800b498 <_dtoa_r+0xad8>
 800b456:	2a00      	cmp	r2, #0
 800b458:	ddee      	ble.n	800b438 <_dtoa_r+0xa78>
 800b45a:	4651      	mov	r1, sl
 800b45c:	2201      	movs	r2, #1
 800b45e:	4628      	mov	r0, r5
 800b460:	9302      	str	r3, [sp, #8]
 800b462:	f000 fba3 	bl	800bbac <__lshift>
 800b466:	4621      	mov	r1, r4
 800b468:	4682      	mov	sl, r0
 800b46a:	f000 fc0b 	bl	800bc84 <__mcmp>
 800b46e:	2800      	cmp	r0, #0
 800b470:	9b02      	ldr	r3, [sp, #8]
 800b472:	dc02      	bgt.n	800b47a <_dtoa_r+0xaba>
 800b474:	d1e0      	bne.n	800b438 <_dtoa_r+0xa78>
 800b476:	07da      	lsls	r2, r3, #31
 800b478:	d5de      	bpl.n	800b438 <_dtoa_r+0xa78>
 800b47a:	2b39      	cmp	r3, #57	; 0x39
 800b47c:	d1da      	bne.n	800b434 <_dtoa_r+0xa74>
 800b47e:	2339      	movs	r3, #57	; 0x39
 800b480:	f88b 3000 	strb.w	r3, [fp]
 800b484:	463b      	mov	r3, r7
 800b486:	461f      	mov	r7, r3
 800b488:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	2a39      	cmp	r2, #57	; 0x39
 800b490:	d050      	beq.n	800b534 <_dtoa_r+0xb74>
 800b492:	3201      	adds	r2, #1
 800b494:	701a      	strb	r2, [r3, #0]
 800b496:	e749      	b.n	800b32c <_dtoa_r+0x96c>
 800b498:	2a00      	cmp	r2, #0
 800b49a:	dd03      	ble.n	800b4a4 <_dtoa_r+0xae4>
 800b49c:	2b39      	cmp	r3, #57	; 0x39
 800b49e:	d0ee      	beq.n	800b47e <_dtoa_r+0xabe>
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	e7c9      	b.n	800b438 <_dtoa_r+0xa78>
 800b4a4:	9a02      	ldr	r2, [sp, #8]
 800b4a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4ac:	428a      	cmp	r2, r1
 800b4ae:	d02a      	beq.n	800b506 <_dtoa_r+0xb46>
 800b4b0:	4651      	mov	r1, sl
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	220a      	movs	r2, #10
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f000 f9cc 	bl	800b854 <__multadd>
 800b4bc:	45b0      	cmp	r8, r6
 800b4be:	4682      	mov	sl, r0
 800b4c0:	f04f 0300 	mov.w	r3, #0
 800b4c4:	f04f 020a 	mov.w	r2, #10
 800b4c8:	4641      	mov	r1, r8
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	d107      	bne.n	800b4de <_dtoa_r+0xb1e>
 800b4ce:	f000 f9c1 	bl	800b854 <__multadd>
 800b4d2:	4680      	mov	r8, r0
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	9b02      	ldr	r3, [sp, #8]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	9302      	str	r3, [sp, #8]
 800b4dc:	e777      	b.n	800b3ce <_dtoa_r+0xa0e>
 800b4de:	f000 f9b9 	bl	800b854 <__multadd>
 800b4e2:	4631      	mov	r1, r6
 800b4e4:	4680      	mov	r8, r0
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	220a      	movs	r2, #10
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f000 f9b2 	bl	800b854 <__multadd>
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	e7f0      	b.n	800b4d6 <_dtoa_r+0xb16>
 800b4f4:	f1bb 0f00 	cmp.w	fp, #0
 800b4f8:	bfcc      	ite	gt
 800b4fa:	465f      	movgt	r7, fp
 800b4fc:	2701      	movle	r7, #1
 800b4fe:	f04f 0800 	mov.w	r8, #0
 800b502:	9a08      	ldr	r2, [sp, #32]
 800b504:	4417      	add	r7, r2
 800b506:	4651      	mov	r1, sl
 800b508:	2201      	movs	r2, #1
 800b50a:	4628      	mov	r0, r5
 800b50c:	9302      	str	r3, [sp, #8]
 800b50e:	f000 fb4d 	bl	800bbac <__lshift>
 800b512:	4621      	mov	r1, r4
 800b514:	4682      	mov	sl, r0
 800b516:	f000 fbb5 	bl	800bc84 <__mcmp>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	dcb2      	bgt.n	800b484 <_dtoa_r+0xac4>
 800b51e:	d102      	bne.n	800b526 <_dtoa_r+0xb66>
 800b520:	9b02      	ldr	r3, [sp, #8]
 800b522:	07db      	lsls	r3, r3, #31
 800b524:	d4ae      	bmi.n	800b484 <_dtoa_r+0xac4>
 800b526:	463b      	mov	r3, r7
 800b528:	461f      	mov	r7, r3
 800b52a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b52e:	2a30      	cmp	r2, #48	; 0x30
 800b530:	d0fa      	beq.n	800b528 <_dtoa_r+0xb68>
 800b532:	e6fb      	b.n	800b32c <_dtoa_r+0x96c>
 800b534:	9a08      	ldr	r2, [sp, #32]
 800b536:	429a      	cmp	r2, r3
 800b538:	d1a5      	bne.n	800b486 <_dtoa_r+0xac6>
 800b53a:	2331      	movs	r3, #49	; 0x31
 800b53c:	f109 0901 	add.w	r9, r9, #1
 800b540:	7013      	strb	r3, [r2, #0]
 800b542:	e6f3      	b.n	800b32c <_dtoa_r+0x96c>
 800b544:	4b13      	ldr	r3, [pc, #76]	; (800b594 <_dtoa_r+0xbd4>)
 800b546:	f7ff baa7 	b.w	800aa98 <_dtoa_r+0xd8>
 800b54a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f47f aa80 	bne.w	800aa52 <_dtoa_r+0x92>
 800b552:	4b11      	ldr	r3, [pc, #68]	; (800b598 <_dtoa_r+0xbd8>)
 800b554:	f7ff baa0 	b.w	800aa98 <_dtoa_r+0xd8>
 800b558:	f1bb 0f00 	cmp.w	fp, #0
 800b55c:	dc03      	bgt.n	800b566 <_dtoa_r+0xba6>
 800b55e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b560:	2b02      	cmp	r3, #2
 800b562:	f73f aecc 	bgt.w	800b2fe <_dtoa_r+0x93e>
 800b566:	9f08      	ldr	r7, [sp, #32]
 800b568:	4621      	mov	r1, r4
 800b56a:	4650      	mov	r0, sl
 800b56c:	f7ff f99a 	bl	800a8a4 <quorem>
 800b570:	9a08      	ldr	r2, [sp, #32]
 800b572:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b576:	f807 3b01 	strb.w	r3, [r7], #1
 800b57a:	1aba      	subs	r2, r7, r2
 800b57c:	4593      	cmp	fp, r2
 800b57e:	ddb9      	ble.n	800b4f4 <_dtoa_r+0xb34>
 800b580:	4651      	mov	r1, sl
 800b582:	2300      	movs	r3, #0
 800b584:	220a      	movs	r2, #10
 800b586:	4628      	mov	r0, r5
 800b588:	f000 f964 	bl	800b854 <__multadd>
 800b58c:	4682      	mov	sl, r0
 800b58e:	e7eb      	b.n	800b568 <_dtoa_r+0xba8>
 800b590:	0800c8d7 	.word	0x0800c8d7
 800b594:	0800c830 	.word	0x0800c830
 800b598:	0800c854 	.word	0x0800c854

0800b59c <__sflush_r>:
 800b59c:	898a      	ldrh	r2, [r1, #12]
 800b59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	0710      	lsls	r0, r2, #28
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	d458      	bmi.n	800b65c <__sflush_r+0xc0>
 800b5aa:	684b      	ldr	r3, [r1, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	dc05      	bgt.n	800b5bc <__sflush_r+0x20>
 800b5b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	dc02      	bgt.n	800b5bc <__sflush_r+0x20>
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5be:	2e00      	cmp	r6, #0
 800b5c0:	d0f9      	beq.n	800b5b6 <__sflush_r+0x1a>
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5c8:	682f      	ldr	r7, [r5, #0]
 800b5ca:	602b      	str	r3, [r5, #0]
 800b5cc:	d032      	beq.n	800b634 <__sflush_r+0x98>
 800b5ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	075a      	lsls	r2, r3, #29
 800b5d4:	d505      	bpl.n	800b5e2 <__sflush_r+0x46>
 800b5d6:	6863      	ldr	r3, [r4, #4]
 800b5d8:	1ac0      	subs	r0, r0, r3
 800b5da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5dc:	b10b      	cbz	r3, 800b5e2 <__sflush_r+0x46>
 800b5de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5e0:	1ac0      	subs	r0, r0, r3
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	6a21      	ldr	r1, [r4, #32]
 800b5ec:	47b0      	blx	r6
 800b5ee:	1c43      	adds	r3, r0, #1
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	d106      	bne.n	800b602 <__sflush_r+0x66>
 800b5f4:	6829      	ldr	r1, [r5, #0]
 800b5f6:	291d      	cmp	r1, #29
 800b5f8:	d82c      	bhi.n	800b654 <__sflush_r+0xb8>
 800b5fa:	4a2a      	ldr	r2, [pc, #168]	; (800b6a4 <__sflush_r+0x108>)
 800b5fc:	40ca      	lsrs	r2, r1
 800b5fe:	07d6      	lsls	r6, r2, #31
 800b600:	d528      	bpl.n	800b654 <__sflush_r+0xb8>
 800b602:	2200      	movs	r2, #0
 800b604:	6062      	str	r2, [r4, #4]
 800b606:	6922      	ldr	r2, [r4, #16]
 800b608:	04d9      	lsls	r1, r3, #19
 800b60a:	6022      	str	r2, [r4, #0]
 800b60c:	d504      	bpl.n	800b618 <__sflush_r+0x7c>
 800b60e:	1c42      	adds	r2, r0, #1
 800b610:	d101      	bne.n	800b616 <__sflush_r+0x7a>
 800b612:	682b      	ldr	r3, [r5, #0]
 800b614:	b903      	cbnz	r3, 800b618 <__sflush_r+0x7c>
 800b616:	6560      	str	r0, [r4, #84]	; 0x54
 800b618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b61a:	602f      	str	r7, [r5, #0]
 800b61c:	2900      	cmp	r1, #0
 800b61e:	d0ca      	beq.n	800b5b6 <__sflush_r+0x1a>
 800b620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b624:	4299      	cmp	r1, r3
 800b626:	d002      	beq.n	800b62e <__sflush_r+0x92>
 800b628:	4628      	mov	r0, r5
 800b62a:	f000 fc41 	bl	800beb0 <_free_r>
 800b62e:	2000      	movs	r0, #0
 800b630:	6360      	str	r0, [r4, #52]	; 0x34
 800b632:	e7c1      	b.n	800b5b8 <__sflush_r+0x1c>
 800b634:	6a21      	ldr	r1, [r4, #32]
 800b636:	2301      	movs	r3, #1
 800b638:	4628      	mov	r0, r5
 800b63a:	47b0      	blx	r6
 800b63c:	1c41      	adds	r1, r0, #1
 800b63e:	d1c7      	bne.n	800b5d0 <__sflush_r+0x34>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d0c4      	beq.n	800b5d0 <__sflush_r+0x34>
 800b646:	2b1d      	cmp	r3, #29
 800b648:	d001      	beq.n	800b64e <__sflush_r+0xb2>
 800b64a:	2b16      	cmp	r3, #22
 800b64c:	d101      	bne.n	800b652 <__sflush_r+0xb6>
 800b64e:	602f      	str	r7, [r5, #0]
 800b650:	e7b1      	b.n	800b5b6 <__sflush_r+0x1a>
 800b652:	89a3      	ldrh	r3, [r4, #12]
 800b654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b658:	81a3      	strh	r3, [r4, #12]
 800b65a:	e7ad      	b.n	800b5b8 <__sflush_r+0x1c>
 800b65c:	690f      	ldr	r7, [r1, #16]
 800b65e:	2f00      	cmp	r7, #0
 800b660:	d0a9      	beq.n	800b5b6 <__sflush_r+0x1a>
 800b662:	0793      	lsls	r3, r2, #30
 800b664:	bf18      	it	ne
 800b666:	2300      	movne	r3, #0
 800b668:	680e      	ldr	r6, [r1, #0]
 800b66a:	bf08      	it	eq
 800b66c:	694b      	ldreq	r3, [r1, #20]
 800b66e:	eba6 0807 	sub.w	r8, r6, r7
 800b672:	600f      	str	r7, [r1, #0]
 800b674:	608b      	str	r3, [r1, #8]
 800b676:	f1b8 0f00 	cmp.w	r8, #0
 800b67a:	dd9c      	ble.n	800b5b6 <__sflush_r+0x1a>
 800b67c:	4643      	mov	r3, r8
 800b67e:	463a      	mov	r2, r7
 800b680:	4628      	mov	r0, r5
 800b682:	6a21      	ldr	r1, [r4, #32]
 800b684:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b686:	47b0      	blx	r6
 800b688:	2800      	cmp	r0, #0
 800b68a:	dc06      	bgt.n	800b69a <__sflush_r+0xfe>
 800b68c:	89a3      	ldrh	r3, [r4, #12]
 800b68e:	f04f 30ff 	mov.w	r0, #4294967295
 800b692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b696:	81a3      	strh	r3, [r4, #12]
 800b698:	e78e      	b.n	800b5b8 <__sflush_r+0x1c>
 800b69a:	4407      	add	r7, r0
 800b69c:	eba8 0800 	sub.w	r8, r8, r0
 800b6a0:	e7e9      	b.n	800b676 <__sflush_r+0xda>
 800b6a2:	bf00      	nop
 800b6a4:	20400001 	.word	0x20400001

0800b6a8 <_fflush_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	690b      	ldr	r3, [r1, #16]
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	b913      	cbnz	r3, 800b6b8 <_fflush_r+0x10>
 800b6b2:	2500      	movs	r5, #0
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	b118      	cbz	r0, 800b6c2 <_fflush_r+0x1a>
 800b6ba:	6983      	ldr	r3, [r0, #24]
 800b6bc:	b90b      	cbnz	r3, 800b6c2 <_fflush_r+0x1a>
 800b6be:	f7fe fa7b 	bl	8009bb8 <__sinit>
 800b6c2:	4b14      	ldr	r3, [pc, #80]	; (800b714 <_fflush_r+0x6c>)
 800b6c4:	429c      	cmp	r4, r3
 800b6c6:	d11b      	bne.n	800b700 <_fflush_r+0x58>
 800b6c8:	686c      	ldr	r4, [r5, #4]
 800b6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d0ef      	beq.n	800b6b2 <_fflush_r+0xa>
 800b6d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6d4:	07d0      	lsls	r0, r2, #31
 800b6d6:	d404      	bmi.n	800b6e2 <_fflush_r+0x3a>
 800b6d8:	0599      	lsls	r1, r3, #22
 800b6da:	d402      	bmi.n	800b6e2 <_fflush_r+0x3a>
 800b6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6de:	f7fe fb2e 	bl	8009d3e <__retarget_lock_acquire_recursive>
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	4621      	mov	r1, r4
 800b6e6:	f7ff ff59 	bl	800b59c <__sflush_r>
 800b6ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6ec:	4605      	mov	r5, r0
 800b6ee:	07da      	lsls	r2, r3, #31
 800b6f0:	d4e0      	bmi.n	800b6b4 <_fflush_r+0xc>
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	059b      	lsls	r3, r3, #22
 800b6f6:	d4dd      	bmi.n	800b6b4 <_fflush_r+0xc>
 800b6f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6fa:	f7fe fb21 	bl	8009d40 <__retarget_lock_release_recursive>
 800b6fe:	e7d9      	b.n	800b6b4 <_fflush_r+0xc>
 800b700:	4b05      	ldr	r3, [pc, #20]	; (800b718 <_fflush_r+0x70>)
 800b702:	429c      	cmp	r4, r3
 800b704:	d101      	bne.n	800b70a <_fflush_r+0x62>
 800b706:	68ac      	ldr	r4, [r5, #8]
 800b708:	e7df      	b.n	800b6ca <_fflush_r+0x22>
 800b70a:	4b04      	ldr	r3, [pc, #16]	; (800b71c <_fflush_r+0x74>)
 800b70c:	429c      	cmp	r4, r3
 800b70e:	bf08      	it	eq
 800b710:	68ec      	ldreq	r4, [r5, #12]
 800b712:	e7da      	b.n	800b6ca <_fflush_r+0x22>
 800b714:	0800c7dc 	.word	0x0800c7dc
 800b718:	0800c7fc 	.word	0x0800c7fc
 800b71c:	0800c7bc 	.word	0x0800c7bc

0800b720 <_localeconv_r>:
 800b720:	4800      	ldr	r0, [pc, #0]	; (800b724 <_localeconv_r+0x4>)
 800b722:	4770      	bx	lr
 800b724:	20000164 	.word	0x20000164

0800b728 <_lseek_r>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	4604      	mov	r4, r0
 800b72c:	4608      	mov	r0, r1
 800b72e:	4611      	mov	r1, r2
 800b730:	2200      	movs	r2, #0
 800b732:	4d05      	ldr	r5, [pc, #20]	; (800b748 <_lseek_r+0x20>)
 800b734:	602a      	str	r2, [r5, #0]
 800b736:	461a      	mov	r2, r3
 800b738:	f7f7 ff20 	bl	800357c <_lseek>
 800b73c:	1c43      	adds	r3, r0, #1
 800b73e:	d102      	bne.n	800b746 <_lseek_r+0x1e>
 800b740:	682b      	ldr	r3, [r5, #0]
 800b742:	b103      	cbz	r3, 800b746 <_lseek_r+0x1e>
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	bd38      	pop	{r3, r4, r5, pc}
 800b748:	20001ecc 	.word	0x20001ecc

0800b74c <malloc>:
 800b74c:	4b02      	ldr	r3, [pc, #8]	; (800b758 <malloc+0xc>)
 800b74e:	4601      	mov	r1, r0
 800b750:	6818      	ldr	r0, [r3, #0]
 800b752:	f7fe bb0d 	b.w	8009d70 <_malloc_r>
 800b756:	bf00      	nop
 800b758:	20000010 	.word	0x20000010

0800b75c <memchr>:
 800b75c:	4603      	mov	r3, r0
 800b75e:	b510      	push	{r4, lr}
 800b760:	b2c9      	uxtb	r1, r1
 800b762:	4402      	add	r2, r0
 800b764:	4293      	cmp	r3, r2
 800b766:	4618      	mov	r0, r3
 800b768:	d101      	bne.n	800b76e <memchr+0x12>
 800b76a:	2000      	movs	r0, #0
 800b76c:	e003      	b.n	800b776 <memchr+0x1a>
 800b76e:	7804      	ldrb	r4, [r0, #0]
 800b770:	3301      	adds	r3, #1
 800b772:	428c      	cmp	r4, r1
 800b774:	d1f6      	bne.n	800b764 <memchr+0x8>
 800b776:	bd10      	pop	{r4, pc}

0800b778 <__malloc_lock>:
 800b778:	4801      	ldr	r0, [pc, #4]	; (800b780 <__malloc_lock+0x8>)
 800b77a:	f7fe bae0 	b.w	8009d3e <__retarget_lock_acquire_recursive>
 800b77e:	bf00      	nop
 800b780:	20001ec4 	.word	0x20001ec4

0800b784 <__malloc_unlock>:
 800b784:	4801      	ldr	r0, [pc, #4]	; (800b78c <__malloc_unlock+0x8>)
 800b786:	f7fe badb 	b.w	8009d40 <__retarget_lock_release_recursive>
 800b78a:	bf00      	nop
 800b78c:	20001ec4 	.word	0x20001ec4

0800b790 <_Balloc>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b794:	4604      	mov	r4, r0
 800b796:	460d      	mov	r5, r1
 800b798:	b976      	cbnz	r6, 800b7b8 <_Balloc+0x28>
 800b79a:	2010      	movs	r0, #16
 800b79c:	f7ff ffd6 	bl	800b74c <malloc>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	6260      	str	r0, [r4, #36]	; 0x24
 800b7a4:	b920      	cbnz	r0, 800b7b0 <_Balloc+0x20>
 800b7a6:	2166      	movs	r1, #102	; 0x66
 800b7a8:	4b17      	ldr	r3, [pc, #92]	; (800b808 <_Balloc+0x78>)
 800b7aa:	4818      	ldr	r0, [pc, #96]	; (800b80c <_Balloc+0x7c>)
 800b7ac:	f000 fbde 	bl	800bf6c <__assert_func>
 800b7b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7b4:	6006      	str	r6, [r0, #0]
 800b7b6:	60c6      	str	r6, [r0, #12]
 800b7b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b7ba:	68f3      	ldr	r3, [r6, #12]
 800b7bc:	b183      	cbz	r3, 800b7e0 <_Balloc+0x50>
 800b7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7c6:	b9b8      	cbnz	r0, 800b7f8 <_Balloc+0x68>
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b7ce:	1d72      	adds	r2, r6, #5
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	0092      	lsls	r2, r2, #2
 800b7d4:	f000 fb5e 	bl	800be94 <_calloc_r>
 800b7d8:	b160      	cbz	r0, 800b7f4 <_Balloc+0x64>
 800b7da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7de:	e00e      	b.n	800b7fe <_Balloc+0x6e>
 800b7e0:	2221      	movs	r2, #33	; 0x21
 800b7e2:	2104      	movs	r1, #4
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f000 fb55 	bl	800be94 <_calloc_r>
 800b7ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ec:	60f0      	str	r0, [r6, #12]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1e4      	bne.n	800b7be <_Balloc+0x2e>
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	bd70      	pop	{r4, r5, r6, pc}
 800b7f8:	6802      	ldr	r2, [r0, #0]
 800b7fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7fe:	2300      	movs	r3, #0
 800b800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b804:	e7f7      	b.n	800b7f6 <_Balloc+0x66>
 800b806:	bf00      	nop
 800b808:	0800c861 	.word	0x0800c861
 800b80c:	0800c8e8 	.word	0x0800c8e8

0800b810 <_Bfree>:
 800b810:	b570      	push	{r4, r5, r6, lr}
 800b812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b814:	4605      	mov	r5, r0
 800b816:	460c      	mov	r4, r1
 800b818:	b976      	cbnz	r6, 800b838 <_Bfree+0x28>
 800b81a:	2010      	movs	r0, #16
 800b81c:	f7ff ff96 	bl	800b74c <malloc>
 800b820:	4602      	mov	r2, r0
 800b822:	6268      	str	r0, [r5, #36]	; 0x24
 800b824:	b920      	cbnz	r0, 800b830 <_Bfree+0x20>
 800b826:	218a      	movs	r1, #138	; 0x8a
 800b828:	4b08      	ldr	r3, [pc, #32]	; (800b84c <_Bfree+0x3c>)
 800b82a:	4809      	ldr	r0, [pc, #36]	; (800b850 <_Bfree+0x40>)
 800b82c:	f000 fb9e 	bl	800bf6c <__assert_func>
 800b830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b834:	6006      	str	r6, [r0, #0]
 800b836:	60c6      	str	r6, [r0, #12]
 800b838:	b13c      	cbz	r4, 800b84a <_Bfree+0x3a>
 800b83a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b83c:	6862      	ldr	r2, [r4, #4]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b844:	6021      	str	r1, [r4, #0]
 800b846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
 800b84c:	0800c861 	.word	0x0800c861
 800b850:	0800c8e8 	.word	0x0800c8e8

0800b854 <__multadd>:
 800b854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b858:	4698      	mov	r8, r3
 800b85a:	460c      	mov	r4, r1
 800b85c:	2300      	movs	r3, #0
 800b85e:	690e      	ldr	r6, [r1, #16]
 800b860:	4607      	mov	r7, r0
 800b862:	f101 0014 	add.w	r0, r1, #20
 800b866:	6805      	ldr	r5, [r0, #0]
 800b868:	3301      	adds	r3, #1
 800b86a:	b2a9      	uxth	r1, r5
 800b86c:	fb02 8101 	mla	r1, r2, r1, r8
 800b870:	0c2d      	lsrs	r5, r5, #16
 800b872:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b876:	fb02 c505 	mla	r5, r2, r5, ip
 800b87a:	b289      	uxth	r1, r1
 800b87c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b880:	429e      	cmp	r6, r3
 800b882:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b886:	f840 1b04 	str.w	r1, [r0], #4
 800b88a:	dcec      	bgt.n	800b866 <__multadd+0x12>
 800b88c:	f1b8 0f00 	cmp.w	r8, #0
 800b890:	d022      	beq.n	800b8d8 <__multadd+0x84>
 800b892:	68a3      	ldr	r3, [r4, #8]
 800b894:	42b3      	cmp	r3, r6
 800b896:	dc19      	bgt.n	800b8cc <__multadd+0x78>
 800b898:	6861      	ldr	r1, [r4, #4]
 800b89a:	4638      	mov	r0, r7
 800b89c:	3101      	adds	r1, #1
 800b89e:	f7ff ff77 	bl	800b790 <_Balloc>
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	b928      	cbnz	r0, 800b8b2 <__multadd+0x5e>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	21b5      	movs	r1, #181	; 0xb5
 800b8aa:	4b0d      	ldr	r3, [pc, #52]	; (800b8e0 <__multadd+0x8c>)
 800b8ac:	480d      	ldr	r0, [pc, #52]	; (800b8e4 <__multadd+0x90>)
 800b8ae:	f000 fb5d 	bl	800bf6c <__assert_func>
 800b8b2:	6922      	ldr	r2, [r4, #16]
 800b8b4:	f104 010c 	add.w	r1, r4, #12
 800b8b8:	3202      	adds	r2, #2
 800b8ba:	0092      	lsls	r2, r2, #2
 800b8bc:	300c      	adds	r0, #12
 800b8be:	f7fe fa40 	bl	8009d42 <memcpy>
 800b8c2:	4621      	mov	r1, r4
 800b8c4:	4638      	mov	r0, r7
 800b8c6:	f7ff ffa3 	bl	800b810 <_Bfree>
 800b8ca:	462c      	mov	r4, r5
 800b8cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b8d0:	3601      	adds	r6, #1
 800b8d2:	f8c3 8014 	str.w	r8, [r3, #20]
 800b8d6:	6126      	str	r6, [r4, #16]
 800b8d8:	4620      	mov	r0, r4
 800b8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8de:	bf00      	nop
 800b8e0:	0800c8d7 	.word	0x0800c8d7
 800b8e4:	0800c8e8 	.word	0x0800c8e8

0800b8e8 <__hi0bits>:
 800b8e8:	0c02      	lsrs	r2, r0, #16
 800b8ea:	0412      	lsls	r2, r2, #16
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	b9ca      	cbnz	r2, 800b924 <__hi0bits+0x3c>
 800b8f0:	0403      	lsls	r3, r0, #16
 800b8f2:	2010      	movs	r0, #16
 800b8f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b8f8:	bf04      	itt	eq
 800b8fa:	021b      	lsleq	r3, r3, #8
 800b8fc:	3008      	addeq	r0, #8
 800b8fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b902:	bf04      	itt	eq
 800b904:	011b      	lsleq	r3, r3, #4
 800b906:	3004      	addeq	r0, #4
 800b908:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b90c:	bf04      	itt	eq
 800b90e:	009b      	lsleq	r3, r3, #2
 800b910:	3002      	addeq	r0, #2
 800b912:	2b00      	cmp	r3, #0
 800b914:	db05      	blt.n	800b922 <__hi0bits+0x3a>
 800b916:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b91a:	f100 0001 	add.w	r0, r0, #1
 800b91e:	bf08      	it	eq
 800b920:	2020      	moveq	r0, #32
 800b922:	4770      	bx	lr
 800b924:	2000      	movs	r0, #0
 800b926:	e7e5      	b.n	800b8f4 <__hi0bits+0xc>

0800b928 <__lo0bits>:
 800b928:	6803      	ldr	r3, [r0, #0]
 800b92a:	4602      	mov	r2, r0
 800b92c:	f013 0007 	ands.w	r0, r3, #7
 800b930:	d00b      	beq.n	800b94a <__lo0bits+0x22>
 800b932:	07d9      	lsls	r1, r3, #31
 800b934:	d422      	bmi.n	800b97c <__lo0bits+0x54>
 800b936:	0798      	lsls	r0, r3, #30
 800b938:	bf49      	itett	mi
 800b93a:	085b      	lsrmi	r3, r3, #1
 800b93c:	089b      	lsrpl	r3, r3, #2
 800b93e:	2001      	movmi	r0, #1
 800b940:	6013      	strmi	r3, [r2, #0]
 800b942:	bf5c      	itt	pl
 800b944:	2002      	movpl	r0, #2
 800b946:	6013      	strpl	r3, [r2, #0]
 800b948:	4770      	bx	lr
 800b94a:	b299      	uxth	r1, r3
 800b94c:	b909      	cbnz	r1, 800b952 <__lo0bits+0x2a>
 800b94e:	2010      	movs	r0, #16
 800b950:	0c1b      	lsrs	r3, r3, #16
 800b952:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b956:	bf04      	itt	eq
 800b958:	0a1b      	lsreq	r3, r3, #8
 800b95a:	3008      	addeq	r0, #8
 800b95c:	0719      	lsls	r1, r3, #28
 800b95e:	bf04      	itt	eq
 800b960:	091b      	lsreq	r3, r3, #4
 800b962:	3004      	addeq	r0, #4
 800b964:	0799      	lsls	r1, r3, #30
 800b966:	bf04      	itt	eq
 800b968:	089b      	lsreq	r3, r3, #2
 800b96a:	3002      	addeq	r0, #2
 800b96c:	07d9      	lsls	r1, r3, #31
 800b96e:	d403      	bmi.n	800b978 <__lo0bits+0x50>
 800b970:	085b      	lsrs	r3, r3, #1
 800b972:	f100 0001 	add.w	r0, r0, #1
 800b976:	d003      	beq.n	800b980 <__lo0bits+0x58>
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	4770      	bx	lr
 800b97c:	2000      	movs	r0, #0
 800b97e:	4770      	bx	lr
 800b980:	2020      	movs	r0, #32
 800b982:	4770      	bx	lr

0800b984 <__i2b>:
 800b984:	b510      	push	{r4, lr}
 800b986:	460c      	mov	r4, r1
 800b988:	2101      	movs	r1, #1
 800b98a:	f7ff ff01 	bl	800b790 <_Balloc>
 800b98e:	4602      	mov	r2, r0
 800b990:	b928      	cbnz	r0, 800b99e <__i2b+0x1a>
 800b992:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b996:	4b04      	ldr	r3, [pc, #16]	; (800b9a8 <__i2b+0x24>)
 800b998:	4804      	ldr	r0, [pc, #16]	; (800b9ac <__i2b+0x28>)
 800b99a:	f000 fae7 	bl	800bf6c <__assert_func>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	6144      	str	r4, [r0, #20]
 800b9a2:	6103      	str	r3, [r0, #16]
 800b9a4:	bd10      	pop	{r4, pc}
 800b9a6:	bf00      	nop
 800b9a8:	0800c8d7 	.word	0x0800c8d7
 800b9ac:	0800c8e8 	.word	0x0800c8e8

0800b9b0 <__multiply>:
 800b9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b4:	4614      	mov	r4, r2
 800b9b6:	690a      	ldr	r2, [r1, #16]
 800b9b8:	6923      	ldr	r3, [r4, #16]
 800b9ba:	460d      	mov	r5, r1
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	bfbe      	ittt	lt
 800b9c0:	460b      	movlt	r3, r1
 800b9c2:	4625      	movlt	r5, r4
 800b9c4:	461c      	movlt	r4, r3
 800b9c6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b9ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b9ce:	68ab      	ldr	r3, [r5, #8]
 800b9d0:	6869      	ldr	r1, [r5, #4]
 800b9d2:	eb0a 0709 	add.w	r7, sl, r9
 800b9d6:	42bb      	cmp	r3, r7
 800b9d8:	b085      	sub	sp, #20
 800b9da:	bfb8      	it	lt
 800b9dc:	3101      	addlt	r1, #1
 800b9de:	f7ff fed7 	bl	800b790 <_Balloc>
 800b9e2:	b930      	cbnz	r0, 800b9f2 <__multiply+0x42>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	f240 115d 	movw	r1, #349	; 0x15d
 800b9ea:	4b41      	ldr	r3, [pc, #260]	; (800baf0 <__multiply+0x140>)
 800b9ec:	4841      	ldr	r0, [pc, #260]	; (800baf4 <__multiply+0x144>)
 800b9ee:	f000 fabd 	bl	800bf6c <__assert_func>
 800b9f2:	f100 0614 	add.w	r6, r0, #20
 800b9f6:	4633      	mov	r3, r6
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b9fe:	4543      	cmp	r3, r8
 800ba00:	d31e      	bcc.n	800ba40 <__multiply+0x90>
 800ba02:	f105 0c14 	add.w	ip, r5, #20
 800ba06:	f104 0314 	add.w	r3, r4, #20
 800ba0a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ba0e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ba12:	9202      	str	r2, [sp, #8]
 800ba14:	ebac 0205 	sub.w	r2, ip, r5
 800ba18:	3a15      	subs	r2, #21
 800ba1a:	f022 0203 	bic.w	r2, r2, #3
 800ba1e:	3204      	adds	r2, #4
 800ba20:	f105 0115 	add.w	r1, r5, #21
 800ba24:	458c      	cmp	ip, r1
 800ba26:	bf38      	it	cc
 800ba28:	2204      	movcc	r2, #4
 800ba2a:	9201      	str	r2, [sp, #4]
 800ba2c:	9a02      	ldr	r2, [sp, #8]
 800ba2e:	9303      	str	r3, [sp, #12]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d808      	bhi.n	800ba46 <__multiply+0x96>
 800ba34:	2f00      	cmp	r7, #0
 800ba36:	dc55      	bgt.n	800bae4 <__multiply+0x134>
 800ba38:	6107      	str	r7, [r0, #16]
 800ba3a:	b005      	add	sp, #20
 800ba3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba40:	f843 2b04 	str.w	r2, [r3], #4
 800ba44:	e7db      	b.n	800b9fe <__multiply+0x4e>
 800ba46:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba4a:	f1ba 0f00 	cmp.w	sl, #0
 800ba4e:	d020      	beq.n	800ba92 <__multiply+0xe2>
 800ba50:	46b1      	mov	r9, r6
 800ba52:	2200      	movs	r2, #0
 800ba54:	f105 0e14 	add.w	lr, r5, #20
 800ba58:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ba5c:	f8d9 b000 	ldr.w	fp, [r9]
 800ba60:	b2a1      	uxth	r1, r4
 800ba62:	fa1f fb8b 	uxth.w	fp, fp
 800ba66:	fb0a b101 	mla	r1, sl, r1, fp
 800ba6a:	4411      	add	r1, r2
 800ba6c:	f8d9 2000 	ldr.w	r2, [r9]
 800ba70:	0c24      	lsrs	r4, r4, #16
 800ba72:	0c12      	lsrs	r2, r2, #16
 800ba74:	fb0a 2404 	mla	r4, sl, r4, r2
 800ba78:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ba7c:	b289      	uxth	r1, r1
 800ba7e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ba82:	45f4      	cmp	ip, lr
 800ba84:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ba88:	f849 1b04 	str.w	r1, [r9], #4
 800ba8c:	d8e4      	bhi.n	800ba58 <__multiply+0xa8>
 800ba8e:	9901      	ldr	r1, [sp, #4]
 800ba90:	5072      	str	r2, [r6, r1]
 800ba92:	9a03      	ldr	r2, [sp, #12]
 800ba94:	3304      	adds	r3, #4
 800ba96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba9a:	f1b9 0f00 	cmp.w	r9, #0
 800ba9e:	d01f      	beq.n	800bae0 <__multiply+0x130>
 800baa0:	46b6      	mov	lr, r6
 800baa2:	f04f 0a00 	mov.w	sl, #0
 800baa6:	6834      	ldr	r4, [r6, #0]
 800baa8:	f105 0114 	add.w	r1, r5, #20
 800baac:	880a      	ldrh	r2, [r1, #0]
 800baae:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bab2:	b2a4      	uxth	r4, r4
 800bab4:	fb09 b202 	mla	r2, r9, r2, fp
 800bab8:	4492      	add	sl, r2
 800baba:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800babe:	f84e 4b04 	str.w	r4, [lr], #4
 800bac2:	f851 4b04 	ldr.w	r4, [r1], #4
 800bac6:	f8be 2000 	ldrh.w	r2, [lr]
 800baca:	0c24      	lsrs	r4, r4, #16
 800bacc:	fb09 2404 	mla	r4, r9, r4, r2
 800bad0:	458c      	cmp	ip, r1
 800bad2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bad6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bada:	d8e7      	bhi.n	800baac <__multiply+0xfc>
 800badc:	9a01      	ldr	r2, [sp, #4]
 800bade:	50b4      	str	r4, [r6, r2]
 800bae0:	3604      	adds	r6, #4
 800bae2:	e7a3      	b.n	800ba2c <__multiply+0x7c>
 800bae4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1a5      	bne.n	800ba38 <__multiply+0x88>
 800baec:	3f01      	subs	r7, #1
 800baee:	e7a1      	b.n	800ba34 <__multiply+0x84>
 800baf0:	0800c8d7 	.word	0x0800c8d7
 800baf4:	0800c8e8 	.word	0x0800c8e8

0800baf8 <__pow5mult>:
 800baf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bafc:	4615      	mov	r5, r2
 800bafe:	f012 0203 	ands.w	r2, r2, #3
 800bb02:	4606      	mov	r6, r0
 800bb04:	460f      	mov	r7, r1
 800bb06:	d007      	beq.n	800bb18 <__pow5mult+0x20>
 800bb08:	4c25      	ldr	r4, [pc, #148]	; (800bba0 <__pow5mult+0xa8>)
 800bb0a:	3a01      	subs	r2, #1
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb12:	f7ff fe9f 	bl	800b854 <__multadd>
 800bb16:	4607      	mov	r7, r0
 800bb18:	10ad      	asrs	r5, r5, #2
 800bb1a:	d03d      	beq.n	800bb98 <__pow5mult+0xa0>
 800bb1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb1e:	b97c      	cbnz	r4, 800bb40 <__pow5mult+0x48>
 800bb20:	2010      	movs	r0, #16
 800bb22:	f7ff fe13 	bl	800b74c <malloc>
 800bb26:	4602      	mov	r2, r0
 800bb28:	6270      	str	r0, [r6, #36]	; 0x24
 800bb2a:	b928      	cbnz	r0, 800bb38 <__pow5mult+0x40>
 800bb2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb30:	4b1c      	ldr	r3, [pc, #112]	; (800bba4 <__pow5mult+0xac>)
 800bb32:	481d      	ldr	r0, [pc, #116]	; (800bba8 <__pow5mult+0xb0>)
 800bb34:	f000 fa1a 	bl	800bf6c <__assert_func>
 800bb38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb3c:	6004      	str	r4, [r0, #0]
 800bb3e:	60c4      	str	r4, [r0, #12]
 800bb40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb48:	b94c      	cbnz	r4, 800bb5e <__pow5mult+0x66>
 800bb4a:	f240 2171 	movw	r1, #625	; 0x271
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f7ff ff18 	bl	800b984 <__i2b>
 800bb54:	2300      	movs	r3, #0
 800bb56:	4604      	mov	r4, r0
 800bb58:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb5c:	6003      	str	r3, [r0, #0]
 800bb5e:	f04f 0900 	mov.w	r9, #0
 800bb62:	07eb      	lsls	r3, r5, #31
 800bb64:	d50a      	bpl.n	800bb7c <__pow5mult+0x84>
 800bb66:	4639      	mov	r1, r7
 800bb68:	4622      	mov	r2, r4
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f7ff ff20 	bl	800b9b0 <__multiply>
 800bb70:	4680      	mov	r8, r0
 800bb72:	4639      	mov	r1, r7
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7ff fe4b 	bl	800b810 <_Bfree>
 800bb7a:	4647      	mov	r7, r8
 800bb7c:	106d      	asrs	r5, r5, #1
 800bb7e:	d00b      	beq.n	800bb98 <__pow5mult+0xa0>
 800bb80:	6820      	ldr	r0, [r4, #0]
 800bb82:	b938      	cbnz	r0, 800bb94 <__pow5mult+0x9c>
 800bb84:	4622      	mov	r2, r4
 800bb86:	4621      	mov	r1, r4
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f7ff ff11 	bl	800b9b0 <__multiply>
 800bb8e:	6020      	str	r0, [r4, #0]
 800bb90:	f8c0 9000 	str.w	r9, [r0]
 800bb94:	4604      	mov	r4, r0
 800bb96:	e7e4      	b.n	800bb62 <__pow5mult+0x6a>
 800bb98:	4638      	mov	r0, r7
 800bb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9e:	bf00      	nop
 800bba0:	0800ca38 	.word	0x0800ca38
 800bba4:	0800c861 	.word	0x0800c861
 800bba8:	0800c8e8 	.word	0x0800c8e8

0800bbac <__lshift>:
 800bbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	4607      	mov	r7, r0
 800bbb4:	4691      	mov	r9, r2
 800bbb6:	6923      	ldr	r3, [r4, #16]
 800bbb8:	6849      	ldr	r1, [r1, #4]
 800bbba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbbe:	68a3      	ldr	r3, [r4, #8]
 800bbc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbc4:	f108 0601 	add.w	r6, r8, #1
 800bbc8:	42b3      	cmp	r3, r6
 800bbca:	db0b      	blt.n	800bbe4 <__lshift+0x38>
 800bbcc:	4638      	mov	r0, r7
 800bbce:	f7ff fddf 	bl	800b790 <_Balloc>
 800bbd2:	4605      	mov	r5, r0
 800bbd4:	b948      	cbnz	r0, 800bbea <__lshift+0x3e>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bbdc:	4b27      	ldr	r3, [pc, #156]	; (800bc7c <__lshift+0xd0>)
 800bbde:	4828      	ldr	r0, [pc, #160]	; (800bc80 <__lshift+0xd4>)
 800bbe0:	f000 f9c4 	bl	800bf6c <__assert_func>
 800bbe4:	3101      	adds	r1, #1
 800bbe6:	005b      	lsls	r3, r3, #1
 800bbe8:	e7ee      	b.n	800bbc8 <__lshift+0x1c>
 800bbea:	2300      	movs	r3, #0
 800bbec:	f100 0114 	add.w	r1, r0, #20
 800bbf0:	f100 0210 	add.w	r2, r0, #16
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	4553      	cmp	r3, sl
 800bbf8:	db33      	blt.n	800bc62 <__lshift+0xb6>
 800bbfa:	6920      	ldr	r0, [r4, #16]
 800bbfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc00:	f104 0314 	add.w	r3, r4, #20
 800bc04:	f019 091f 	ands.w	r9, r9, #31
 800bc08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc10:	d02b      	beq.n	800bc6a <__lshift+0xbe>
 800bc12:	468a      	mov	sl, r1
 800bc14:	2200      	movs	r2, #0
 800bc16:	f1c9 0e20 	rsb	lr, r9, #32
 800bc1a:	6818      	ldr	r0, [r3, #0]
 800bc1c:	fa00 f009 	lsl.w	r0, r0, r9
 800bc20:	4302      	orrs	r2, r0
 800bc22:	f84a 2b04 	str.w	r2, [sl], #4
 800bc26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc2a:	459c      	cmp	ip, r3
 800bc2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc30:	d8f3      	bhi.n	800bc1a <__lshift+0x6e>
 800bc32:	ebac 0304 	sub.w	r3, ip, r4
 800bc36:	3b15      	subs	r3, #21
 800bc38:	f023 0303 	bic.w	r3, r3, #3
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	f104 0015 	add.w	r0, r4, #21
 800bc42:	4584      	cmp	ip, r0
 800bc44:	bf38      	it	cc
 800bc46:	2304      	movcc	r3, #4
 800bc48:	50ca      	str	r2, [r1, r3]
 800bc4a:	b10a      	cbz	r2, 800bc50 <__lshift+0xa4>
 800bc4c:	f108 0602 	add.w	r6, r8, #2
 800bc50:	3e01      	subs	r6, #1
 800bc52:	4638      	mov	r0, r7
 800bc54:	4621      	mov	r1, r4
 800bc56:	612e      	str	r6, [r5, #16]
 800bc58:	f7ff fdda 	bl	800b810 <_Bfree>
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc62:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc66:	3301      	adds	r3, #1
 800bc68:	e7c5      	b.n	800bbf6 <__lshift+0x4a>
 800bc6a:	3904      	subs	r1, #4
 800bc6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc70:	459c      	cmp	ip, r3
 800bc72:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc76:	d8f9      	bhi.n	800bc6c <__lshift+0xc0>
 800bc78:	e7ea      	b.n	800bc50 <__lshift+0xa4>
 800bc7a:	bf00      	nop
 800bc7c:	0800c8d7 	.word	0x0800c8d7
 800bc80:	0800c8e8 	.word	0x0800c8e8

0800bc84 <__mcmp>:
 800bc84:	4603      	mov	r3, r0
 800bc86:	690a      	ldr	r2, [r1, #16]
 800bc88:	6900      	ldr	r0, [r0, #16]
 800bc8a:	b530      	push	{r4, r5, lr}
 800bc8c:	1a80      	subs	r0, r0, r2
 800bc8e:	d10d      	bne.n	800bcac <__mcmp+0x28>
 800bc90:	3314      	adds	r3, #20
 800bc92:	3114      	adds	r1, #20
 800bc94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bca0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bca4:	4295      	cmp	r5, r2
 800bca6:	d002      	beq.n	800bcae <__mcmp+0x2a>
 800bca8:	d304      	bcc.n	800bcb4 <__mcmp+0x30>
 800bcaa:	2001      	movs	r0, #1
 800bcac:	bd30      	pop	{r4, r5, pc}
 800bcae:	42a3      	cmp	r3, r4
 800bcb0:	d3f4      	bcc.n	800bc9c <__mcmp+0x18>
 800bcb2:	e7fb      	b.n	800bcac <__mcmp+0x28>
 800bcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb8:	e7f8      	b.n	800bcac <__mcmp+0x28>
	...

0800bcbc <__mdiff>:
 800bcbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4692      	mov	sl, r2
 800bcca:	f7ff ffdb 	bl	800bc84 <__mcmp>
 800bcce:	1e05      	subs	r5, r0, #0
 800bcd0:	d111      	bne.n	800bcf6 <__mdiff+0x3a>
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f7ff fd5b 	bl	800b790 <_Balloc>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	b928      	cbnz	r0, 800bcea <__mdiff+0x2e>
 800bcde:	f240 2132 	movw	r1, #562	; 0x232
 800bce2:	4b3c      	ldr	r3, [pc, #240]	; (800bdd4 <__mdiff+0x118>)
 800bce4:	483c      	ldr	r0, [pc, #240]	; (800bdd8 <__mdiff+0x11c>)
 800bce6:	f000 f941 	bl	800bf6c <__assert_func>
 800bcea:	2301      	movs	r3, #1
 800bcec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf6:	bfa4      	itt	ge
 800bcf8:	4653      	movge	r3, sl
 800bcfa:	46a2      	movge	sl, r4
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bd02:	bfa6      	itte	ge
 800bd04:	461c      	movge	r4, r3
 800bd06:	2500      	movge	r5, #0
 800bd08:	2501      	movlt	r5, #1
 800bd0a:	f7ff fd41 	bl	800b790 <_Balloc>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	b918      	cbnz	r0, 800bd1a <__mdiff+0x5e>
 800bd12:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd16:	4b2f      	ldr	r3, [pc, #188]	; (800bdd4 <__mdiff+0x118>)
 800bd18:	e7e4      	b.n	800bce4 <__mdiff+0x28>
 800bd1a:	f100 0814 	add.w	r8, r0, #20
 800bd1e:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bd22:	60c5      	str	r5, [r0, #12]
 800bd24:	f04f 0c00 	mov.w	ip, #0
 800bd28:	f10a 0514 	add.w	r5, sl, #20
 800bd2c:	f10a 0010 	add.w	r0, sl, #16
 800bd30:	46c2      	mov	sl, r8
 800bd32:	6926      	ldr	r6, [r4, #16]
 800bd34:	f104 0914 	add.w	r9, r4, #20
 800bd38:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bd3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd40:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bd44:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd48:	fa1f f18b 	uxth.w	r1, fp
 800bd4c:	4461      	add	r1, ip
 800bd4e:	fa1f fc83 	uxth.w	ip, r3
 800bd52:	0c1b      	lsrs	r3, r3, #16
 800bd54:	eba1 010c 	sub.w	r1, r1, ip
 800bd58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd5c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bd60:	b289      	uxth	r1, r1
 800bd62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bd66:	454e      	cmp	r6, r9
 800bd68:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bd6c:	f84a 3b04 	str.w	r3, [sl], #4
 800bd70:	d8e6      	bhi.n	800bd40 <__mdiff+0x84>
 800bd72:	1b33      	subs	r3, r6, r4
 800bd74:	3b15      	subs	r3, #21
 800bd76:	f023 0303 	bic.w	r3, r3, #3
 800bd7a:	3415      	adds	r4, #21
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	42a6      	cmp	r6, r4
 800bd80:	bf38      	it	cc
 800bd82:	2304      	movcc	r3, #4
 800bd84:	441d      	add	r5, r3
 800bd86:	4443      	add	r3, r8
 800bd88:	461e      	mov	r6, r3
 800bd8a:	462c      	mov	r4, r5
 800bd8c:	4574      	cmp	r4, lr
 800bd8e:	d30e      	bcc.n	800bdae <__mdiff+0xf2>
 800bd90:	f10e 0103 	add.w	r1, lr, #3
 800bd94:	1b49      	subs	r1, r1, r5
 800bd96:	f021 0103 	bic.w	r1, r1, #3
 800bd9a:	3d03      	subs	r5, #3
 800bd9c:	45ae      	cmp	lr, r5
 800bd9e:	bf38      	it	cc
 800bda0:	2100      	movcc	r1, #0
 800bda2:	4419      	add	r1, r3
 800bda4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bda8:	b18b      	cbz	r3, 800bdce <__mdiff+0x112>
 800bdaa:	6117      	str	r7, [r2, #16]
 800bdac:	e7a0      	b.n	800bcf0 <__mdiff+0x34>
 800bdae:	f854 8b04 	ldr.w	r8, [r4], #4
 800bdb2:	fa1f f188 	uxth.w	r1, r8
 800bdb6:	4461      	add	r1, ip
 800bdb8:	1408      	asrs	r0, r1, #16
 800bdba:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bdbe:	b289      	uxth	r1, r1
 800bdc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bdc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdc8:	f846 1b04 	str.w	r1, [r6], #4
 800bdcc:	e7de      	b.n	800bd8c <__mdiff+0xd0>
 800bdce:	3f01      	subs	r7, #1
 800bdd0:	e7e8      	b.n	800bda4 <__mdiff+0xe8>
 800bdd2:	bf00      	nop
 800bdd4:	0800c8d7 	.word	0x0800c8d7
 800bdd8:	0800c8e8 	.word	0x0800c8e8

0800bddc <__d2b>:
 800bddc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bde0:	2101      	movs	r1, #1
 800bde2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bde6:	4690      	mov	r8, r2
 800bde8:	461d      	mov	r5, r3
 800bdea:	f7ff fcd1 	bl	800b790 <_Balloc>
 800bdee:	4604      	mov	r4, r0
 800bdf0:	b930      	cbnz	r0, 800be00 <__d2b+0x24>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	f240 310a 	movw	r1, #778	; 0x30a
 800bdf8:	4b24      	ldr	r3, [pc, #144]	; (800be8c <__d2b+0xb0>)
 800bdfa:	4825      	ldr	r0, [pc, #148]	; (800be90 <__d2b+0xb4>)
 800bdfc:	f000 f8b6 	bl	800bf6c <__assert_func>
 800be00:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800be04:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800be08:	bb2d      	cbnz	r5, 800be56 <__d2b+0x7a>
 800be0a:	9301      	str	r3, [sp, #4]
 800be0c:	f1b8 0300 	subs.w	r3, r8, #0
 800be10:	d026      	beq.n	800be60 <__d2b+0x84>
 800be12:	4668      	mov	r0, sp
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	f7ff fd87 	bl	800b928 <__lo0bits>
 800be1a:	9900      	ldr	r1, [sp, #0]
 800be1c:	b1f0      	cbz	r0, 800be5c <__d2b+0x80>
 800be1e:	9a01      	ldr	r2, [sp, #4]
 800be20:	f1c0 0320 	rsb	r3, r0, #32
 800be24:	fa02 f303 	lsl.w	r3, r2, r3
 800be28:	430b      	orrs	r3, r1
 800be2a:	40c2      	lsrs	r2, r0
 800be2c:	6163      	str	r3, [r4, #20]
 800be2e:	9201      	str	r2, [sp, #4]
 800be30:	9b01      	ldr	r3, [sp, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	bf14      	ite	ne
 800be36:	2102      	movne	r1, #2
 800be38:	2101      	moveq	r1, #1
 800be3a:	61a3      	str	r3, [r4, #24]
 800be3c:	6121      	str	r1, [r4, #16]
 800be3e:	b1c5      	cbz	r5, 800be72 <__d2b+0x96>
 800be40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be44:	4405      	add	r5, r0
 800be46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be4a:	603d      	str	r5, [r7, #0]
 800be4c:	6030      	str	r0, [r6, #0]
 800be4e:	4620      	mov	r0, r4
 800be50:	b002      	add	sp, #8
 800be52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be5a:	e7d6      	b.n	800be0a <__d2b+0x2e>
 800be5c:	6161      	str	r1, [r4, #20]
 800be5e:	e7e7      	b.n	800be30 <__d2b+0x54>
 800be60:	a801      	add	r0, sp, #4
 800be62:	f7ff fd61 	bl	800b928 <__lo0bits>
 800be66:	2101      	movs	r1, #1
 800be68:	9b01      	ldr	r3, [sp, #4]
 800be6a:	6121      	str	r1, [r4, #16]
 800be6c:	6163      	str	r3, [r4, #20]
 800be6e:	3020      	adds	r0, #32
 800be70:	e7e5      	b.n	800be3e <__d2b+0x62>
 800be72:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800be76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be7a:	6038      	str	r0, [r7, #0]
 800be7c:	6918      	ldr	r0, [r3, #16]
 800be7e:	f7ff fd33 	bl	800b8e8 <__hi0bits>
 800be82:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800be86:	6031      	str	r1, [r6, #0]
 800be88:	e7e1      	b.n	800be4e <__d2b+0x72>
 800be8a:	bf00      	nop
 800be8c:	0800c8d7 	.word	0x0800c8d7
 800be90:	0800c8e8 	.word	0x0800c8e8

0800be94 <_calloc_r>:
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	fb02 f501 	mul.w	r5, r2, r1
 800be9a:	4629      	mov	r1, r5
 800be9c:	f7fd ff68 	bl	8009d70 <_malloc_r>
 800bea0:	4604      	mov	r4, r0
 800bea2:	b118      	cbz	r0, 800beac <_calloc_r+0x18>
 800bea4:	462a      	mov	r2, r5
 800bea6:	2100      	movs	r1, #0
 800bea8:	f7fd ff59 	bl	8009d5e <memset>
 800beac:	4620      	mov	r0, r4
 800beae:	bd38      	pop	{r3, r4, r5, pc}

0800beb0 <_free_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	4605      	mov	r5, r0
 800beb4:	2900      	cmp	r1, #0
 800beb6:	d043      	beq.n	800bf40 <_free_r+0x90>
 800beb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bebc:	1f0c      	subs	r4, r1, #4
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	bfb8      	it	lt
 800bec2:	18e4      	addlt	r4, r4, r3
 800bec4:	f7ff fc58 	bl	800b778 <__malloc_lock>
 800bec8:	4a1e      	ldr	r2, [pc, #120]	; (800bf44 <_free_r+0x94>)
 800beca:	6813      	ldr	r3, [r2, #0]
 800becc:	4610      	mov	r0, r2
 800bece:	b933      	cbnz	r3, 800bede <_free_r+0x2e>
 800bed0:	6063      	str	r3, [r4, #4]
 800bed2:	6014      	str	r4, [r2, #0]
 800bed4:	4628      	mov	r0, r5
 800bed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beda:	f7ff bc53 	b.w	800b784 <__malloc_unlock>
 800bede:	42a3      	cmp	r3, r4
 800bee0:	d90a      	bls.n	800bef8 <_free_r+0x48>
 800bee2:	6821      	ldr	r1, [r4, #0]
 800bee4:	1862      	adds	r2, r4, r1
 800bee6:	4293      	cmp	r3, r2
 800bee8:	bf01      	itttt	eq
 800beea:	681a      	ldreq	r2, [r3, #0]
 800beec:	685b      	ldreq	r3, [r3, #4]
 800beee:	1852      	addeq	r2, r2, r1
 800bef0:	6022      	streq	r2, [r4, #0]
 800bef2:	6063      	str	r3, [r4, #4]
 800bef4:	6004      	str	r4, [r0, #0]
 800bef6:	e7ed      	b.n	800bed4 <_free_r+0x24>
 800bef8:	461a      	mov	r2, r3
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	b10b      	cbz	r3, 800bf02 <_free_r+0x52>
 800befe:	42a3      	cmp	r3, r4
 800bf00:	d9fa      	bls.n	800bef8 <_free_r+0x48>
 800bf02:	6811      	ldr	r1, [r2, #0]
 800bf04:	1850      	adds	r0, r2, r1
 800bf06:	42a0      	cmp	r0, r4
 800bf08:	d10b      	bne.n	800bf22 <_free_r+0x72>
 800bf0a:	6820      	ldr	r0, [r4, #0]
 800bf0c:	4401      	add	r1, r0
 800bf0e:	1850      	adds	r0, r2, r1
 800bf10:	4283      	cmp	r3, r0
 800bf12:	6011      	str	r1, [r2, #0]
 800bf14:	d1de      	bne.n	800bed4 <_free_r+0x24>
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	4401      	add	r1, r0
 800bf1c:	6011      	str	r1, [r2, #0]
 800bf1e:	6053      	str	r3, [r2, #4]
 800bf20:	e7d8      	b.n	800bed4 <_free_r+0x24>
 800bf22:	d902      	bls.n	800bf2a <_free_r+0x7a>
 800bf24:	230c      	movs	r3, #12
 800bf26:	602b      	str	r3, [r5, #0]
 800bf28:	e7d4      	b.n	800bed4 <_free_r+0x24>
 800bf2a:	6820      	ldr	r0, [r4, #0]
 800bf2c:	1821      	adds	r1, r4, r0
 800bf2e:	428b      	cmp	r3, r1
 800bf30:	bf01      	itttt	eq
 800bf32:	6819      	ldreq	r1, [r3, #0]
 800bf34:	685b      	ldreq	r3, [r3, #4]
 800bf36:	1809      	addeq	r1, r1, r0
 800bf38:	6021      	streq	r1, [r4, #0]
 800bf3a:	6063      	str	r3, [r4, #4]
 800bf3c:	6054      	str	r4, [r2, #4]
 800bf3e:	e7c9      	b.n	800bed4 <_free_r+0x24>
 800bf40:	bd38      	pop	{r3, r4, r5, pc}
 800bf42:	bf00      	nop
 800bf44:	20001bf4 	.word	0x20001bf4

0800bf48 <_read_r>:
 800bf48:	b538      	push	{r3, r4, r5, lr}
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	4608      	mov	r0, r1
 800bf4e:	4611      	mov	r1, r2
 800bf50:	2200      	movs	r2, #0
 800bf52:	4d05      	ldr	r5, [pc, #20]	; (800bf68 <_read_r+0x20>)
 800bf54:	602a      	str	r2, [r5, #0]
 800bf56:	461a      	mov	r2, r3
 800bf58:	f7f7 fab3 	bl	80034c2 <_read>
 800bf5c:	1c43      	adds	r3, r0, #1
 800bf5e:	d102      	bne.n	800bf66 <_read_r+0x1e>
 800bf60:	682b      	ldr	r3, [r5, #0]
 800bf62:	b103      	cbz	r3, 800bf66 <_read_r+0x1e>
 800bf64:	6023      	str	r3, [r4, #0]
 800bf66:	bd38      	pop	{r3, r4, r5, pc}
 800bf68:	20001ecc 	.word	0x20001ecc

0800bf6c <__assert_func>:
 800bf6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf6e:	4614      	mov	r4, r2
 800bf70:	461a      	mov	r2, r3
 800bf72:	4b09      	ldr	r3, [pc, #36]	; (800bf98 <__assert_func+0x2c>)
 800bf74:	4605      	mov	r5, r0
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68d8      	ldr	r0, [r3, #12]
 800bf7a:	b14c      	cbz	r4, 800bf90 <__assert_func+0x24>
 800bf7c:	4b07      	ldr	r3, [pc, #28]	; (800bf9c <__assert_func+0x30>)
 800bf7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf82:	9100      	str	r1, [sp, #0]
 800bf84:	462b      	mov	r3, r5
 800bf86:	4906      	ldr	r1, [pc, #24]	; (800bfa0 <__assert_func+0x34>)
 800bf88:	f000 f80e 	bl	800bfa8 <fiprintf>
 800bf8c:	f000 fa56 	bl	800c43c <abort>
 800bf90:	4b04      	ldr	r3, [pc, #16]	; (800bfa4 <__assert_func+0x38>)
 800bf92:	461c      	mov	r4, r3
 800bf94:	e7f3      	b.n	800bf7e <__assert_func+0x12>
 800bf96:	bf00      	nop
 800bf98:	20000010 	.word	0x20000010
 800bf9c:	0800ca44 	.word	0x0800ca44
 800bfa0:	0800ca51 	.word	0x0800ca51
 800bfa4:	0800ca7f 	.word	0x0800ca7f

0800bfa8 <fiprintf>:
 800bfa8:	b40e      	push	{r1, r2, r3}
 800bfaa:	b503      	push	{r0, r1, lr}
 800bfac:	4601      	mov	r1, r0
 800bfae:	ab03      	add	r3, sp, #12
 800bfb0:	4805      	ldr	r0, [pc, #20]	; (800bfc8 <fiprintf+0x20>)
 800bfb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb6:	6800      	ldr	r0, [r0, #0]
 800bfb8:	9301      	str	r3, [sp, #4]
 800bfba:	f000 f841 	bl	800c040 <_vfiprintf_r>
 800bfbe:	b002      	add	sp, #8
 800bfc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfc4:	b003      	add	sp, #12
 800bfc6:	4770      	bx	lr
 800bfc8:	20000010 	.word	0x20000010

0800bfcc <__ascii_mbtowc>:
 800bfcc:	b082      	sub	sp, #8
 800bfce:	b901      	cbnz	r1, 800bfd2 <__ascii_mbtowc+0x6>
 800bfd0:	a901      	add	r1, sp, #4
 800bfd2:	b142      	cbz	r2, 800bfe6 <__ascii_mbtowc+0x1a>
 800bfd4:	b14b      	cbz	r3, 800bfea <__ascii_mbtowc+0x1e>
 800bfd6:	7813      	ldrb	r3, [r2, #0]
 800bfd8:	600b      	str	r3, [r1, #0]
 800bfda:	7812      	ldrb	r2, [r2, #0]
 800bfdc:	1e10      	subs	r0, r2, #0
 800bfde:	bf18      	it	ne
 800bfe0:	2001      	movne	r0, #1
 800bfe2:	b002      	add	sp, #8
 800bfe4:	4770      	bx	lr
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	e7fb      	b.n	800bfe2 <__ascii_mbtowc+0x16>
 800bfea:	f06f 0001 	mvn.w	r0, #1
 800bfee:	e7f8      	b.n	800bfe2 <__ascii_mbtowc+0x16>

0800bff0 <__sfputc_r>:
 800bff0:	6893      	ldr	r3, [r2, #8]
 800bff2:	b410      	push	{r4}
 800bff4:	3b01      	subs	r3, #1
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	6093      	str	r3, [r2, #8]
 800bffa:	da07      	bge.n	800c00c <__sfputc_r+0x1c>
 800bffc:	6994      	ldr	r4, [r2, #24]
 800bffe:	42a3      	cmp	r3, r4
 800c000:	db01      	blt.n	800c006 <__sfputc_r+0x16>
 800c002:	290a      	cmp	r1, #10
 800c004:	d102      	bne.n	800c00c <__sfputc_r+0x1c>
 800c006:	bc10      	pop	{r4}
 800c008:	f000 b94a 	b.w	800c2a0 <__swbuf_r>
 800c00c:	6813      	ldr	r3, [r2, #0]
 800c00e:	1c58      	adds	r0, r3, #1
 800c010:	6010      	str	r0, [r2, #0]
 800c012:	7019      	strb	r1, [r3, #0]
 800c014:	4608      	mov	r0, r1
 800c016:	bc10      	pop	{r4}
 800c018:	4770      	bx	lr

0800c01a <__sfputs_r>:
 800c01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01c:	4606      	mov	r6, r0
 800c01e:	460f      	mov	r7, r1
 800c020:	4614      	mov	r4, r2
 800c022:	18d5      	adds	r5, r2, r3
 800c024:	42ac      	cmp	r4, r5
 800c026:	d101      	bne.n	800c02c <__sfputs_r+0x12>
 800c028:	2000      	movs	r0, #0
 800c02a:	e007      	b.n	800c03c <__sfputs_r+0x22>
 800c02c:	463a      	mov	r2, r7
 800c02e:	4630      	mov	r0, r6
 800c030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c034:	f7ff ffdc 	bl	800bff0 <__sfputc_r>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d1f3      	bne.n	800c024 <__sfputs_r+0xa>
 800c03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c040 <_vfiprintf_r>:
 800c040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c044:	460d      	mov	r5, r1
 800c046:	4614      	mov	r4, r2
 800c048:	4698      	mov	r8, r3
 800c04a:	4606      	mov	r6, r0
 800c04c:	b09d      	sub	sp, #116	; 0x74
 800c04e:	b118      	cbz	r0, 800c058 <_vfiprintf_r+0x18>
 800c050:	6983      	ldr	r3, [r0, #24]
 800c052:	b90b      	cbnz	r3, 800c058 <_vfiprintf_r+0x18>
 800c054:	f7fd fdb0 	bl	8009bb8 <__sinit>
 800c058:	4b89      	ldr	r3, [pc, #548]	; (800c280 <_vfiprintf_r+0x240>)
 800c05a:	429d      	cmp	r5, r3
 800c05c:	d11b      	bne.n	800c096 <_vfiprintf_r+0x56>
 800c05e:	6875      	ldr	r5, [r6, #4]
 800c060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c062:	07d9      	lsls	r1, r3, #31
 800c064:	d405      	bmi.n	800c072 <_vfiprintf_r+0x32>
 800c066:	89ab      	ldrh	r3, [r5, #12]
 800c068:	059a      	lsls	r2, r3, #22
 800c06a:	d402      	bmi.n	800c072 <_vfiprintf_r+0x32>
 800c06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c06e:	f7fd fe66 	bl	8009d3e <__retarget_lock_acquire_recursive>
 800c072:	89ab      	ldrh	r3, [r5, #12]
 800c074:	071b      	lsls	r3, r3, #28
 800c076:	d501      	bpl.n	800c07c <_vfiprintf_r+0x3c>
 800c078:	692b      	ldr	r3, [r5, #16]
 800c07a:	b9eb      	cbnz	r3, 800c0b8 <_vfiprintf_r+0x78>
 800c07c:	4629      	mov	r1, r5
 800c07e:	4630      	mov	r0, r6
 800c080:	f000 f96e 	bl	800c360 <__swsetup_r>
 800c084:	b1c0      	cbz	r0, 800c0b8 <_vfiprintf_r+0x78>
 800c086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c088:	07dc      	lsls	r4, r3, #31
 800c08a:	d50e      	bpl.n	800c0aa <_vfiprintf_r+0x6a>
 800c08c:	f04f 30ff 	mov.w	r0, #4294967295
 800c090:	b01d      	add	sp, #116	; 0x74
 800c092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c096:	4b7b      	ldr	r3, [pc, #492]	; (800c284 <_vfiprintf_r+0x244>)
 800c098:	429d      	cmp	r5, r3
 800c09a:	d101      	bne.n	800c0a0 <_vfiprintf_r+0x60>
 800c09c:	68b5      	ldr	r5, [r6, #8]
 800c09e:	e7df      	b.n	800c060 <_vfiprintf_r+0x20>
 800c0a0:	4b79      	ldr	r3, [pc, #484]	; (800c288 <_vfiprintf_r+0x248>)
 800c0a2:	429d      	cmp	r5, r3
 800c0a4:	bf08      	it	eq
 800c0a6:	68f5      	ldreq	r5, [r6, #12]
 800c0a8:	e7da      	b.n	800c060 <_vfiprintf_r+0x20>
 800c0aa:	89ab      	ldrh	r3, [r5, #12]
 800c0ac:	0598      	lsls	r0, r3, #22
 800c0ae:	d4ed      	bmi.n	800c08c <_vfiprintf_r+0x4c>
 800c0b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0b2:	f7fd fe45 	bl	8009d40 <__retarget_lock_release_recursive>
 800c0b6:	e7e9      	b.n	800c08c <_vfiprintf_r+0x4c>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c0bc:	2320      	movs	r3, #32
 800c0be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0c2:	2330      	movs	r3, #48	; 0x30
 800c0c4:	f04f 0901 	mov.w	r9, #1
 800c0c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c28c <_vfiprintf_r+0x24c>
 800c0d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0d4:	4623      	mov	r3, r4
 800c0d6:	469a      	mov	sl, r3
 800c0d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0dc:	b10a      	cbz	r2, 800c0e2 <_vfiprintf_r+0xa2>
 800c0de:	2a25      	cmp	r2, #37	; 0x25
 800c0e0:	d1f9      	bne.n	800c0d6 <_vfiprintf_r+0x96>
 800c0e2:	ebba 0b04 	subs.w	fp, sl, r4
 800c0e6:	d00b      	beq.n	800c100 <_vfiprintf_r+0xc0>
 800c0e8:	465b      	mov	r3, fp
 800c0ea:	4622      	mov	r2, r4
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	f7ff ff93 	bl	800c01a <__sfputs_r>
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	f000 80aa 	beq.w	800c24e <_vfiprintf_r+0x20e>
 800c0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0fc:	445a      	add	r2, fp
 800c0fe:	9209      	str	r2, [sp, #36]	; 0x24
 800c100:	f89a 3000 	ldrb.w	r3, [sl]
 800c104:	2b00      	cmp	r3, #0
 800c106:	f000 80a2 	beq.w	800c24e <_vfiprintf_r+0x20e>
 800c10a:	2300      	movs	r3, #0
 800c10c:	f04f 32ff 	mov.w	r2, #4294967295
 800c110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c114:	f10a 0a01 	add.w	sl, sl, #1
 800c118:	9304      	str	r3, [sp, #16]
 800c11a:	9307      	str	r3, [sp, #28]
 800c11c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c120:	931a      	str	r3, [sp, #104]	; 0x68
 800c122:	4654      	mov	r4, sl
 800c124:	2205      	movs	r2, #5
 800c126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c12a:	4858      	ldr	r0, [pc, #352]	; (800c28c <_vfiprintf_r+0x24c>)
 800c12c:	f7ff fb16 	bl	800b75c <memchr>
 800c130:	9a04      	ldr	r2, [sp, #16]
 800c132:	b9d8      	cbnz	r0, 800c16c <_vfiprintf_r+0x12c>
 800c134:	06d1      	lsls	r1, r2, #27
 800c136:	bf44      	itt	mi
 800c138:	2320      	movmi	r3, #32
 800c13a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c13e:	0713      	lsls	r3, r2, #28
 800c140:	bf44      	itt	mi
 800c142:	232b      	movmi	r3, #43	; 0x2b
 800c144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c148:	f89a 3000 	ldrb.w	r3, [sl]
 800c14c:	2b2a      	cmp	r3, #42	; 0x2a
 800c14e:	d015      	beq.n	800c17c <_vfiprintf_r+0x13c>
 800c150:	4654      	mov	r4, sl
 800c152:	2000      	movs	r0, #0
 800c154:	f04f 0c0a 	mov.w	ip, #10
 800c158:	9a07      	ldr	r2, [sp, #28]
 800c15a:	4621      	mov	r1, r4
 800c15c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c160:	3b30      	subs	r3, #48	; 0x30
 800c162:	2b09      	cmp	r3, #9
 800c164:	d94e      	bls.n	800c204 <_vfiprintf_r+0x1c4>
 800c166:	b1b0      	cbz	r0, 800c196 <_vfiprintf_r+0x156>
 800c168:	9207      	str	r2, [sp, #28]
 800c16a:	e014      	b.n	800c196 <_vfiprintf_r+0x156>
 800c16c:	eba0 0308 	sub.w	r3, r0, r8
 800c170:	fa09 f303 	lsl.w	r3, r9, r3
 800c174:	4313      	orrs	r3, r2
 800c176:	46a2      	mov	sl, r4
 800c178:	9304      	str	r3, [sp, #16]
 800c17a:	e7d2      	b.n	800c122 <_vfiprintf_r+0xe2>
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	1d19      	adds	r1, r3, #4
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	9103      	str	r1, [sp, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	bfbb      	ittet	lt
 800c188:	425b      	neglt	r3, r3
 800c18a:	f042 0202 	orrlt.w	r2, r2, #2
 800c18e:	9307      	strge	r3, [sp, #28]
 800c190:	9307      	strlt	r3, [sp, #28]
 800c192:	bfb8      	it	lt
 800c194:	9204      	strlt	r2, [sp, #16]
 800c196:	7823      	ldrb	r3, [r4, #0]
 800c198:	2b2e      	cmp	r3, #46	; 0x2e
 800c19a:	d10c      	bne.n	800c1b6 <_vfiprintf_r+0x176>
 800c19c:	7863      	ldrb	r3, [r4, #1]
 800c19e:	2b2a      	cmp	r3, #42	; 0x2a
 800c1a0:	d135      	bne.n	800c20e <_vfiprintf_r+0x1ce>
 800c1a2:	9b03      	ldr	r3, [sp, #12]
 800c1a4:	3402      	adds	r4, #2
 800c1a6:	1d1a      	adds	r2, r3, #4
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	9203      	str	r2, [sp, #12]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	bfb8      	it	lt
 800c1b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1b4:	9305      	str	r3, [sp, #20]
 800c1b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c29c <_vfiprintf_r+0x25c>
 800c1ba:	2203      	movs	r2, #3
 800c1bc:	4650      	mov	r0, sl
 800c1be:	7821      	ldrb	r1, [r4, #0]
 800c1c0:	f7ff facc 	bl	800b75c <memchr>
 800c1c4:	b140      	cbz	r0, 800c1d8 <_vfiprintf_r+0x198>
 800c1c6:	2340      	movs	r3, #64	; 0x40
 800c1c8:	eba0 000a 	sub.w	r0, r0, sl
 800c1cc:	fa03 f000 	lsl.w	r0, r3, r0
 800c1d0:	9b04      	ldr	r3, [sp, #16]
 800c1d2:	3401      	adds	r4, #1
 800c1d4:	4303      	orrs	r3, r0
 800c1d6:	9304      	str	r3, [sp, #16]
 800c1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1dc:	2206      	movs	r2, #6
 800c1de:	482c      	ldr	r0, [pc, #176]	; (800c290 <_vfiprintf_r+0x250>)
 800c1e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1e4:	f7ff faba 	bl	800b75c <memchr>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d03f      	beq.n	800c26c <_vfiprintf_r+0x22c>
 800c1ec:	4b29      	ldr	r3, [pc, #164]	; (800c294 <_vfiprintf_r+0x254>)
 800c1ee:	bb1b      	cbnz	r3, 800c238 <_vfiprintf_r+0x1f8>
 800c1f0:	9b03      	ldr	r3, [sp, #12]
 800c1f2:	3307      	adds	r3, #7
 800c1f4:	f023 0307 	bic.w	r3, r3, #7
 800c1f8:	3308      	adds	r3, #8
 800c1fa:	9303      	str	r3, [sp, #12]
 800c1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1fe:	443b      	add	r3, r7
 800c200:	9309      	str	r3, [sp, #36]	; 0x24
 800c202:	e767      	b.n	800c0d4 <_vfiprintf_r+0x94>
 800c204:	460c      	mov	r4, r1
 800c206:	2001      	movs	r0, #1
 800c208:	fb0c 3202 	mla	r2, ip, r2, r3
 800c20c:	e7a5      	b.n	800c15a <_vfiprintf_r+0x11a>
 800c20e:	2300      	movs	r3, #0
 800c210:	f04f 0c0a 	mov.w	ip, #10
 800c214:	4619      	mov	r1, r3
 800c216:	3401      	adds	r4, #1
 800c218:	9305      	str	r3, [sp, #20]
 800c21a:	4620      	mov	r0, r4
 800c21c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c220:	3a30      	subs	r2, #48	; 0x30
 800c222:	2a09      	cmp	r2, #9
 800c224:	d903      	bls.n	800c22e <_vfiprintf_r+0x1ee>
 800c226:	2b00      	cmp	r3, #0
 800c228:	d0c5      	beq.n	800c1b6 <_vfiprintf_r+0x176>
 800c22a:	9105      	str	r1, [sp, #20]
 800c22c:	e7c3      	b.n	800c1b6 <_vfiprintf_r+0x176>
 800c22e:	4604      	mov	r4, r0
 800c230:	2301      	movs	r3, #1
 800c232:	fb0c 2101 	mla	r1, ip, r1, r2
 800c236:	e7f0      	b.n	800c21a <_vfiprintf_r+0x1da>
 800c238:	ab03      	add	r3, sp, #12
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	462a      	mov	r2, r5
 800c23e:	4630      	mov	r0, r6
 800c240:	4b15      	ldr	r3, [pc, #84]	; (800c298 <_vfiprintf_r+0x258>)
 800c242:	a904      	add	r1, sp, #16
 800c244:	f7fd fe8c 	bl	8009f60 <_printf_float>
 800c248:	4607      	mov	r7, r0
 800c24a:	1c78      	adds	r0, r7, #1
 800c24c:	d1d6      	bne.n	800c1fc <_vfiprintf_r+0x1bc>
 800c24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c250:	07d9      	lsls	r1, r3, #31
 800c252:	d405      	bmi.n	800c260 <_vfiprintf_r+0x220>
 800c254:	89ab      	ldrh	r3, [r5, #12]
 800c256:	059a      	lsls	r2, r3, #22
 800c258:	d402      	bmi.n	800c260 <_vfiprintf_r+0x220>
 800c25a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c25c:	f7fd fd70 	bl	8009d40 <__retarget_lock_release_recursive>
 800c260:	89ab      	ldrh	r3, [r5, #12]
 800c262:	065b      	lsls	r3, r3, #25
 800c264:	f53f af12 	bmi.w	800c08c <_vfiprintf_r+0x4c>
 800c268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c26a:	e711      	b.n	800c090 <_vfiprintf_r+0x50>
 800c26c:	ab03      	add	r3, sp, #12
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	462a      	mov	r2, r5
 800c272:	4630      	mov	r0, r6
 800c274:	4b08      	ldr	r3, [pc, #32]	; (800c298 <_vfiprintf_r+0x258>)
 800c276:	a904      	add	r1, sp, #16
 800c278:	f7fe f90e 	bl	800a498 <_printf_i>
 800c27c:	e7e4      	b.n	800c248 <_vfiprintf_r+0x208>
 800c27e:	bf00      	nop
 800c280:	0800c7dc 	.word	0x0800c7dc
 800c284:	0800c7fc 	.word	0x0800c7fc
 800c288:	0800c7bc 	.word	0x0800c7bc
 800c28c:	0800ca8a 	.word	0x0800ca8a
 800c290:	0800ca94 	.word	0x0800ca94
 800c294:	08009f61 	.word	0x08009f61
 800c298:	0800c01b 	.word	0x0800c01b
 800c29c:	0800ca90 	.word	0x0800ca90

0800c2a0 <__swbuf_r>:
 800c2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a2:	460e      	mov	r6, r1
 800c2a4:	4614      	mov	r4, r2
 800c2a6:	4605      	mov	r5, r0
 800c2a8:	b118      	cbz	r0, 800c2b2 <__swbuf_r+0x12>
 800c2aa:	6983      	ldr	r3, [r0, #24]
 800c2ac:	b90b      	cbnz	r3, 800c2b2 <__swbuf_r+0x12>
 800c2ae:	f7fd fc83 	bl	8009bb8 <__sinit>
 800c2b2:	4b21      	ldr	r3, [pc, #132]	; (800c338 <__swbuf_r+0x98>)
 800c2b4:	429c      	cmp	r4, r3
 800c2b6:	d12b      	bne.n	800c310 <__swbuf_r+0x70>
 800c2b8:	686c      	ldr	r4, [r5, #4]
 800c2ba:	69a3      	ldr	r3, [r4, #24]
 800c2bc:	60a3      	str	r3, [r4, #8]
 800c2be:	89a3      	ldrh	r3, [r4, #12]
 800c2c0:	071a      	lsls	r2, r3, #28
 800c2c2:	d52f      	bpl.n	800c324 <__swbuf_r+0x84>
 800c2c4:	6923      	ldr	r3, [r4, #16]
 800c2c6:	b36b      	cbz	r3, 800c324 <__swbuf_r+0x84>
 800c2c8:	6923      	ldr	r3, [r4, #16]
 800c2ca:	6820      	ldr	r0, [r4, #0]
 800c2cc:	b2f6      	uxtb	r6, r6
 800c2ce:	1ac0      	subs	r0, r0, r3
 800c2d0:	6963      	ldr	r3, [r4, #20]
 800c2d2:	4637      	mov	r7, r6
 800c2d4:	4283      	cmp	r3, r0
 800c2d6:	dc04      	bgt.n	800c2e2 <__swbuf_r+0x42>
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f7ff f9e4 	bl	800b6a8 <_fflush_r>
 800c2e0:	bb30      	cbnz	r0, 800c330 <__swbuf_r+0x90>
 800c2e2:	68a3      	ldr	r3, [r4, #8]
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	60a3      	str	r3, [r4, #8]
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	1c5a      	adds	r2, r3, #1
 800c2ee:	6022      	str	r2, [r4, #0]
 800c2f0:	701e      	strb	r6, [r3, #0]
 800c2f2:	6963      	ldr	r3, [r4, #20]
 800c2f4:	4283      	cmp	r3, r0
 800c2f6:	d004      	beq.n	800c302 <__swbuf_r+0x62>
 800c2f8:	89a3      	ldrh	r3, [r4, #12]
 800c2fa:	07db      	lsls	r3, r3, #31
 800c2fc:	d506      	bpl.n	800c30c <__swbuf_r+0x6c>
 800c2fe:	2e0a      	cmp	r6, #10
 800c300:	d104      	bne.n	800c30c <__swbuf_r+0x6c>
 800c302:	4621      	mov	r1, r4
 800c304:	4628      	mov	r0, r5
 800c306:	f7ff f9cf 	bl	800b6a8 <_fflush_r>
 800c30a:	b988      	cbnz	r0, 800c330 <__swbuf_r+0x90>
 800c30c:	4638      	mov	r0, r7
 800c30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c310:	4b0a      	ldr	r3, [pc, #40]	; (800c33c <__swbuf_r+0x9c>)
 800c312:	429c      	cmp	r4, r3
 800c314:	d101      	bne.n	800c31a <__swbuf_r+0x7a>
 800c316:	68ac      	ldr	r4, [r5, #8]
 800c318:	e7cf      	b.n	800c2ba <__swbuf_r+0x1a>
 800c31a:	4b09      	ldr	r3, [pc, #36]	; (800c340 <__swbuf_r+0xa0>)
 800c31c:	429c      	cmp	r4, r3
 800c31e:	bf08      	it	eq
 800c320:	68ec      	ldreq	r4, [r5, #12]
 800c322:	e7ca      	b.n	800c2ba <__swbuf_r+0x1a>
 800c324:	4621      	mov	r1, r4
 800c326:	4628      	mov	r0, r5
 800c328:	f000 f81a 	bl	800c360 <__swsetup_r>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	d0cb      	beq.n	800c2c8 <__swbuf_r+0x28>
 800c330:	f04f 37ff 	mov.w	r7, #4294967295
 800c334:	e7ea      	b.n	800c30c <__swbuf_r+0x6c>
 800c336:	bf00      	nop
 800c338:	0800c7dc 	.word	0x0800c7dc
 800c33c:	0800c7fc 	.word	0x0800c7fc
 800c340:	0800c7bc 	.word	0x0800c7bc

0800c344 <__ascii_wctomb>:
 800c344:	4603      	mov	r3, r0
 800c346:	4608      	mov	r0, r1
 800c348:	b141      	cbz	r1, 800c35c <__ascii_wctomb+0x18>
 800c34a:	2aff      	cmp	r2, #255	; 0xff
 800c34c:	d904      	bls.n	800c358 <__ascii_wctomb+0x14>
 800c34e:	228a      	movs	r2, #138	; 0x8a
 800c350:	f04f 30ff 	mov.w	r0, #4294967295
 800c354:	601a      	str	r2, [r3, #0]
 800c356:	4770      	bx	lr
 800c358:	2001      	movs	r0, #1
 800c35a:	700a      	strb	r2, [r1, #0]
 800c35c:	4770      	bx	lr
	...

0800c360 <__swsetup_r>:
 800c360:	4b32      	ldr	r3, [pc, #200]	; (800c42c <__swsetup_r+0xcc>)
 800c362:	b570      	push	{r4, r5, r6, lr}
 800c364:	681d      	ldr	r5, [r3, #0]
 800c366:	4606      	mov	r6, r0
 800c368:	460c      	mov	r4, r1
 800c36a:	b125      	cbz	r5, 800c376 <__swsetup_r+0x16>
 800c36c:	69ab      	ldr	r3, [r5, #24]
 800c36e:	b913      	cbnz	r3, 800c376 <__swsetup_r+0x16>
 800c370:	4628      	mov	r0, r5
 800c372:	f7fd fc21 	bl	8009bb8 <__sinit>
 800c376:	4b2e      	ldr	r3, [pc, #184]	; (800c430 <__swsetup_r+0xd0>)
 800c378:	429c      	cmp	r4, r3
 800c37a:	d10f      	bne.n	800c39c <__swsetup_r+0x3c>
 800c37c:	686c      	ldr	r4, [r5, #4]
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c384:	0719      	lsls	r1, r3, #28
 800c386:	d42c      	bmi.n	800c3e2 <__swsetup_r+0x82>
 800c388:	06dd      	lsls	r5, r3, #27
 800c38a:	d411      	bmi.n	800c3b0 <__swsetup_r+0x50>
 800c38c:	2309      	movs	r3, #9
 800c38e:	6033      	str	r3, [r6, #0]
 800c390:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c394:	f04f 30ff 	mov.w	r0, #4294967295
 800c398:	81a3      	strh	r3, [r4, #12]
 800c39a:	e03e      	b.n	800c41a <__swsetup_r+0xba>
 800c39c:	4b25      	ldr	r3, [pc, #148]	; (800c434 <__swsetup_r+0xd4>)
 800c39e:	429c      	cmp	r4, r3
 800c3a0:	d101      	bne.n	800c3a6 <__swsetup_r+0x46>
 800c3a2:	68ac      	ldr	r4, [r5, #8]
 800c3a4:	e7eb      	b.n	800c37e <__swsetup_r+0x1e>
 800c3a6:	4b24      	ldr	r3, [pc, #144]	; (800c438 <__swsetup_r+0xd8>)
 800c3a8:	429c      	cmp	r4, r3
 800c3aa:	bf08      	it	eq
 800c3ac:	68ec      	ldreq	r4, [r5, #12]
 800c3ae:	e7e6      	b.n	800c37e <__swsetup_r+0x1e>
 800c3b0:	0758      	lsls	r0, r3, #29
 800c3b2:	d512      	bpl.n	800c3da <__swsetup_r+0x7a>
 800c3b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3b6:	b141      	cbz	r1, 800c3ca <__swsetup_r+0x6a>
 800c3b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3bc:	4299      	cmp	r1, r3
 800c3be:	d002      	beq.n	800c3c6 <__swsetup_r+0x66>
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f7ff fd75 	bl	800beb0 <_free_r>
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	6363      	str	r3, [r4, #52]	; 0x34
 800c3ca:	89a3      	ldrh	r3, [r4, #12]
 800c3cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3d0:	81a3      	strh	r3, [r4, #12]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	6063      	str	r3, [r4, #4]
 800c3d6:	6923      	ldr	r3, [r4, #16]
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	f043 0308 	orr.w	r3, r3, #8
 800c3e0:	81a3      	strh	r3, [r4, #12]
 800c3e2:	6923      	ldr	r3, [r4, #16]
 800c3e4:	b94b      	cbnz	r3, 800c3fa <__swsetup_r+0x9a>
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3f0:	d003      	beq.n	800c3fa <__swsetup_r+0x9a>
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f000 f84d 	bl	800c494 <__smakebuf_r>
 800c3fa:	89a0      	ldrh	r0, [r4, #12]
 800c3fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c400:	f010 0301 	ands.w	r3, r0, #1
 800c404:	d00a      	beq.n	800c41c <__swsetup_r+0xbc>
 800c406:	2300      	movs	r3, #0
 800c408:	60a3      	str	r3, [r4, #8]
 800c40a:	6963      	ldr	r3, [r4, #20]
 800c40c:	425b      	negs	r3, r3
 800c40e:	61a3      	str	r3, [r4, #24]
 800c410:	6923      	ldr	r3, [r4, #16]
 800c412:	b943      	cbnz	r3, 800c426 <__swsetup_r+0xc6>
 800c414:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c418:	d1ba      	bne.n	800c390 <__swsetup_r+0x30>
 800c41a:	bd70      	pop	{r4, r5, r6, pc}
 800c41c:	0781      	lsls	r1, r0, #30
 800c41e:	bf58      	it	pl
 800c420:	6963      	ldrpl	r3, [r4, #20]
 800c422:	60a3      	str	r3, [r4, #8]
 800c424:	e7f4      	b.n	800c410 <__swsetup_r+0xb0>
 800c426:	2000      	movs	r0, #0
 800c428:	e7f7      	b.n	800c41a <__swsetup_r+0xba>
 800c42a:	bf00      	nop
 800c42c:	20000010 	.word	0x20000010
 800c430:	0800c7dc 	.word	0x0800c7dc
 800c434:	0800c7fc 	.word	0x0800c7fc
 800c438:	0800c7bc 	.word	0x0800c7bc

0800c43c <abort>:
 800c43c:	2006      	movs	r0, #6
 800c43e:	b508      	push	{r3, lr}
 800c440:	f000 f890 	bl	800c564 <raise>
 800c444:	2001      	movs	r0, #1
 800c446:	f7f7 f832 	bl	80034ae <_exit>

0800c44a <__swhatbuf_r>:
 800c44a:	b570      	push	{r4, r5, r6, lr}
 800c44c:	460e      	mov	r6, r1
 800c44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c452:	4614      	mov	r4, r2
 800c454:	2900      	cmp	r1, #0
 800c456:	461d      	mov	r5, r3
 800c458:	b096      	sub	sp, #88	; 0x58
 800c45a:	da07      	bge.n	800c46c <__swhatbuf_r+0x22>
 800c45c:	2300      	movs	r3, #0
 800c45e:	602b      	str	r3, [r5, #0]
 800c460:	89b3      	ldrh	r3, [r6, #12]
 800c462:	061a      	lsls	r2, r3, #24
 800c464:	d410      	bmi.n	800c488 <__swhatbuf_r+0x3e>
 800c466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c46a:	e00e      	b.n	800c48a <__swhatbuf_r+0x40>
 800c46c:	466a      	mov	r2, sp
 800c46e:	f000 f895 	bl	800c59c <_fstat_r>
 800c472:	2800      	cmp	r0, #0
 800c474:	dbf2      	blt.n	800c45c <__swhatbuf_r+0x12>
 800c476:	9a01      	ldr	r2, [sp, #4]
 800c478:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c47c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c480:	425a      	negs	r2, r3
 800c482:	415a      	adcs	r2, r3
 800c484:	602a      	str	r2, [r5, #0]
 800c486:	e7ee      	b.n	800c466 <__swhatbuf_r+0x1c>
 800c488:	2340      	movs	r3, #64	; 0x40
 800c48a:	2000      	movs	r0, #0
 800c48c:	6023      	str	r3, [r4, #0]
 800c48e:	b016      	add	sp, #88	; 0x58
 800c490:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c494 <__smakebuf_r>:
 800c494:	898b      	ldrh	r3, [r1, #12]
 800c496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c498:	079d      	lsls	r5, r3, #30
 800c49a:	4606      	mov	r6, r0
 800c49c:	460c      	mov	r4, r1
 800c49e:	d507      	bpl.n	800c4b0 <__smakebuf_r+0x1c>
 800c4a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4a4:	6023      	str	r3, [r4, #0]
 800c4a6:	6123      	str	r3, [r4, #16]
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	6163      	str	r3, [r4, #20]
 800c4ac:	b002      	add	sp, #8
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}
 800c4b0:	466a      	mov	r2, sp
 800c4b2:	ab01      	add	r3, sp, #4
 800c4b4:	f7ff ffc9 	bl	800c44a <__swhatbuf_r>
 800c4b8:	9900      	ldr	r1, [sp, #0]
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	4630      	mov	r0, r6
 800c4be:	f7fd fc57 	bl	8009d70 <_malloc_r>
 800c4c2:	b948      	cbnz	r0, 800c4d8 <__smakebuf_r+0x44>
 800c4c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c8:	059a      	lsls	r2, r3, #22
 800c4ca:	d4ef      	bmi.n	800c4ac <__smakebuf_r+0x18>
 800c4cc:	f023 0303 	bic.w	r3, r3, #3
 800c4d0:	f043 0302 	orr.w	r3, r3, #2
 800c4d4:	81a3      	strh	r3, [r4, #12]
 800c4d6:	e7e3      	b.n	800c4a0 <__smakebuf_r+0xc>
 800c4d8:	4b0d      	ldr	r3, [pc, #52]	; (800c510 <__smakebuf_r+0x7c>)
 800c4da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4dc:	89a3      	ldrh	r3, [r4, #12]
 800c4de:	6020      	str	r0, [r4, #0]
 800c4e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4e4:	81a3      	strh	r3, [r4, #12]
 800c4e6:	9b00      	ldr	r3, [sp, #0]
 800c4e8:	6120      	str	r0, [r4, #16]
 800c4ea:	6163      	str	r3, [r4, #20]
 800c4ec:	9b01      	ldr	r3, [sp, #4]
 800c4ee:	b15b      	cbz	r3, 800c508 <__smakebuf_r+0x74>
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4f6:	f000 f863 	bl	800c5c0 <_isatty_r>
 800c4fa:	b128      	cbz	r0, 800c508 <__smakebuf_r+0x74>
 800c4fc:	89a3      	ldrh	r3, [r4, #12]
 800c4fe:	f023 0303 	bic.w	r3, r3, #3
 800c502:	f043 0301 	orr.w	r3, r3, #1
 800c506:	81a3      	strh	r3, [r4, #12]
 800c508:	89a0      	ldrh	r0, [r4, #12]
 800c50a:	4305      	orrs	r5, r0
 800c50c:	81a5      	strh	r5, [r4, #12]
 800c50e:	e7cd      	b.n	800c4ac <__smakebuf_r+0x18>
 800c510:	08009b51 	.word	0x08009b51

0800c514 <_raise_r>:
 800c514:	291f      	cmp	r1, #31
 800c516:	b538      	push	{r3, r4, r5, lr}
 800c518:	4604      	mov	r4, r0
 800c51a:	460d      	mov	r5, r1
 800c51c:	d904      	bls.n	800c528 <_raise_r+0x14>
 800c51e:	2316      	movs	r3, #22
 800c520:	6003      	str	r3, [r0, #0]
 800c522:	f04f 30ff 	mov.w	r0, #4294967295
 800c526:	bd38      	pop	{r3, r4, r5, pc}
 800c528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c52a:	b112      	cbz	r2, 800c532 <_raise_r+0x1e>
 800c52c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c530:	b94b      	cbnz	r3, 800c546 <_raise_r+0x32>
 800c532:	4620      	mov	r0, r4
 800c534:	f000 f830 	bl	800c598 <_getpid_r>
 800c538:	462a      	mov	r2, r5
 800c53a:	4601      	mov	r1, r0
 800c53c:	4620      	mov	r0, r4
 800c53e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c542:	f000 b817 	b.w	800c574 <_kill_r>
 800c546:	2b01      	cmp	r3, #1
 800c548:	d00a      	beq.n	800c560 <_raise_r+0x4c>
 800c54a:	1c59      	adds	r1, r3, #1
 800c54c:	d103      	bne.n	800c556 <_raise_r+0x42>
 800c54e:	2316      	movs	r3, #22
 800c550:	6003      	str	r3, [r0, #0]
 800c552:	2001      	movs	r0, #1
 800c554:	e7e7      	b.n	800c526 <_raise_r+0x12>
 800c556:	2400      	movs	r4, #0
 800c558:	4628      	mov	r0, r5
 800c55a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c55e:	4798      	blx	r3
 800c560:	2000      	movs	r0, #0
 800c562:	e7e0      	b.n	800c526 <_raise_r+0x12>

0800c564 <raise>:
 800c564:	4b02      	ldr	r3, [pc, #8]	; (800c570 <raise+0xc>)
 800c566:	4601      	mov	r1, r0
 800c568:	6818      	ldr	r0, [r3, #0]
 800c56a:	f7ff bfd3 	b.w	800c514 <_raise_r>
 800c56e:	bf00      	nop
 800c570:	20000010 	.word	0x20000010

0800c574 <_kill_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	2300      	movs	r3, #0
 800c578:	4d06      	ldr	r5, [pc, #24]	; (800c594 <_kill_r+0x20>)
 800c57a:	4604      	mov	r4, r0
 800c57c:	4608      	mov	r0, r1
 800c57e:	4611      	mov	r1, r2
 800c580:	602b      	str	r3, [r5, #0]
 800c582:	f7f6 ff84 	bl	800348e <_kill>
 800c586:	1c43      	adds	r3, r0, #1
 800c588:	d102      	bne.n	800c590 <_kill_r+0x1c>
 800c58a:	682b      	ldr	r3, [r5, #0]
 800c58c:	b103      	cbz	r3, 800c590 <_kill_r+0x1c>
 800c58e:	6023      	str	r3, [r4, #0]
 800c590:	bd38      	pop	{r3, r4, r5, pc}
 800c592:	bf00      	nop
 800c594:	20001ecc 	.word	0x20001ecc

0800c598 <_getpid_r>:
 800c598:	f7f6 bf72 	b.w	8003480 <_getpid>

0800c59c <_fstat_r>:
 800c59c:	b538      	push	{r3, r4, r5, lr}
 800c59e:	2300      	movs	r3, #0
 800c5a0:	4d06      	ldr	r5, [pc, #24]	; (800c5bc <_fstat_r+0x20>)
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	4608      	mov	r0, r1
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	602b      	str	r3, [r5, #0]
 800c5aa:	f7f6 ffce 	bl	800354a <_fstat>
 800c5ae:	1c43      	adds	r3, r0, #1
 800c5b0:	d102      	bne.n	800c5b8 <_fstat_r+0x1c>
 800c5b2:	682b      	ldr	r3, [r5, #0]
 800c5b4:	b103      	cbz	r3, 800c5b8 <_fstat_r+0x1c>
 800c5b6:	6023      	str	r3, [r4, #0]
 800c5b8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ba:	bf00      	nop
 800c5bc:	20001ecc 	.word	0x20001ecc

0800c5c0 <_isatty_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	4d05      	ldr	r5, [pc, #20]	; (800c5dc <_isatty_r+0x1c>)
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	4608      	mov	r0, r1
 800c5ca:	602b      	str	r3, [r5, #0]
 800c5cc:	f7f6 ffcc 	bl	8003568 <_isatty>
 800c5d0:	1c43      	adds	r3, r0, #1
 800c5d2:	d102      	bne.n	800c5da <_isatty_r+0x1a>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	b103      	cbz	r3, 800c5da <_isatty_r+0x1a>
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	20001ecc 	.word	0x20001ecc

0800c5e0 <_init>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	bf00      	nop
 800c5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e6:	bc08      	pop	{r3}
 800c5e8:	469e      	mov	lr, r3
 800c5ea:	4770      	bx	lr

0800c5ec <_fini>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	bf00      	nop
 800c5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f2:	bc08      	pop	{r3}
 800c5f4:	469e      	mov	lr, r3
 800c5f6:	4770      	bx	lr
